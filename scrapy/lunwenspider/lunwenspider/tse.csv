author,abstract,doi,publisher,keyword,references,title
"Barbara H. Liskov&&Department of Electrical Engineering and Computer SCience, Massachusetts Institute of Technology, Cambridge, Mass|Stephen N. Zilles&&IBM Corporation, San Jose, Calif|","Discusses the importance of formal specifications and surveys a number of promising specification techniques. The role of formal specifications both in proofs of program correctness and in programming methodologies leading to programs which are correct by construction, is explained. Some criteria are established for evaluating the practical potential of specification techniques. The importance of providing specifications at the right level of abstraction is discussed, and a particularly interesting class of specification techniques, those used to construct specifications of data abstractions, is identified. A number of specification techniques for describing data abstractions are surveyed and evaluated with respect to the criteria.",10.1109/TSE.1975.6312816,IEEE Transactions on Software Engineering,"Formal specifications,Programming,Software,Computers,Writing,Testing",,Specification techniques for data abstractions
"W. M. Mckeeman&&Department of Information Sciences, Universitv of California. Santa Cruz. Calif. 95064|","Wirth (1971) has proposed a method of `stepwise refinement' for writing computer programs. This paper proposes that the steps be expressed as proofs. A program for the eight queens problem is developed, and the proof method is applied across two of the steps of the development. The strengths and weaknesses of the method, and its implications for the programming process and programming language design are discussed.",10.1109/TSE.1975.6312817,IEEE Transactions on Software Engineering,"Arrays,Programming,Computer languages,Computers,Semantics,Educational institutions,Machinery",,On preventing programming languages from interfering with programming
"Carl E. Hewitt&&Artificial Intelligence Laboratory, Massachusetts Institute of Technology, Cambridge, MA, USA|Brian Smith&&Artificial Intelligence Laboratory, Massachusetts Institute of Technology, Cambridge, MA, USA|",The Planner Project is constructing a programming apprentice to assist in knowledge based programming. The programming apprentice is designed for interactive use by expert programmers in the meta-evaluation of implementations in the context of their contracts and background knowledge. Meta-evaluation produces a justification which makes explicit exactly how the module depends on the contracts of other modules and on the background knowledge. The justification is used in answering questions on the behavioral dependencies between modules and in analyzing the implications of perturbations in specifications and/or implementation.,10.1109/TSE.1975.6312818,IEEE Transactions on Software Engineering,"Contracts,Plasmas,Programming,Syntactics,Pattern matching,Computational modeling,Educational institutions",,Towards a programming apprentice
"J.R. McGraw&&Department of Applied Science, University of California,슠Davis, Livermore, CA, USA|G.R. Andrews&&Department of Computer Science, Cornell University, Ithaca, NY, USA|","An important component of a programming language for writing operating systems, or other large parallel systems, is the set of access control facilities. Two principles for access control, expressive power and access validation, are discussed. Then two new language mechanisms are presented: one for expressing the static structure and access rights of parallel systems, the other for controlling dynamic access to shared objects (monitors). The use of the proposed mechanisms is illustrated by examples including a file system. Finally, the relationships between the mechanisms, access validation, and the safety problem are discussed.",10.1109/TSE.1979.234148,IEEE Transactions on Software Engineering,"Access control,Computer languages,Permission,Control systems,File systems,Safety,Proposals,Computer science,Power system reliability,Timing","G. R. Andrews and J. R. McGraw, ""Language features for process interaction"", Proc. ACM Conf. on Language Design for Reliable Software Sigplan Notices, vol. 12, no. 3, pp. 114-127, 1977-Mar.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||M. A. Harrison, W. L. Ruzzo and J. D. Ullman, ""Protection in operating systems"", Commun. Ass. Comput. Mach., vol. 19, pp. 461-471, Aug. 1976.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||A. K. Jones and B. H. Liskov, ""A language extension for controlling access to shared data"", IEEE Trans. Software Eng., vol. SE-2, pp. 277-285, Oct. 1976.||R. B. Keiburtz and A. Silberschatz, ""Capability managers"", IEEE Trans. Software Eng., vol. SE-4, pp. 467-477, Nov. 1978.||B. W. Lampson, ""Report on the programming language Euclid"", Sigplan Notices, vol. 12, no. 2, Feb. 1977.||G. J. Popek and D. Farber, ""A model for verification of security in operating systems"", Commun. Ass. Comput. Mach..||D. M. Ritchie and K. Thompson, ""The Unix time-sharing system"", Commun. Ass. Comput. Mach., vol. 17, pp. 365-375, July 1974.||A. Silberschatz, R. B. Kieburtz and A. Bernstein, ""Extending Concurrent Pascal to allow dynamic resource management"", IEEE Trans. Software Eng., vol. SE-3, pp. 210-217, May 1977.||N. Wirth, ""The programming language Pascal"", Acta Informatica, vol. 1, pp. 35-63, 1971.||N. Wirth, ""Modula: A language for modular multiprogramming"", Software-Practice and Experience, vol. 7, pp. 3-35, Jan. 1977.||W. Wulf, ""Hydra: The kernel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, pp. 337-345, June 1974.||",Access Control in Parallel Programs
"R. Snodgrass&&Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|","This paper describes Cola, an object-oriented command language for Hydra; Hydra is a capability-based operating system that runs on C.mmp, a tightly coupled multiprocessor. The two primary aspects of Cola, that it is a command language for Hydra, and that it is based on the object paradigm, are examined. Cola was designed to effect a correspondence between capabilities in Hydra and objects that are supported by the language. Cola is based on Smalltalk in that it uses message-passing as a control structure to allow syntactic freedom in the expression of commands to the system. Cola objects are arranged in a hierarchy, and the message-passing mechanism was designed to exploit this structure by automatically forwarding an unanswered message up the hierarchy. Two ramifications of this mechanism, automatic inheritance and shadowing, are discussed. An evaluation of the design decisions is also given.",10.1109/TSE.1983.236163,IEEE Transactions on Software Engineering,"Command languages,Operating systems,Assembly,Control systems,Hardware,Computer science,Computer languages,Automatic control,Shadow mapping,Knowledge representation","G. Almes and G. Robertson, An extensible file system for Hydra, Dep. Comput. Sci., Carnegie-Mellon Univ., Feb. 1978.||P. Alsberg, OSL/2: An operating system language, 1971.||G. M. Birtwistle, O.-J. Dahl, B. Myhrtag and K. Nygaard, Simula Begin, PA, Philadelphia:Auerbach, 1973.||D. G. Bobrow and T. Winograd, ""An overview of KRL: A knowledge representation language"", Xerox PARC, July 1976.||S. R. Bourne, ""The Unix shell"", Bell Syst. Tech. J., vol. 57, pp. 1971-1990, July-Aug. 1978.||R. F. Brunt and D. E. Tuffs, ""A user-oriented approach to control languages"", Software–Practice and Experience, vol. 6, pp. 93-108, 1976.||E. Cohen and D. Jefferson, ""Protection in the Hydra Operating System"", Proc. 5th Symp. Operating Syst. Principles, pp. 141-160, 1975-Nov.||Hydra kernel reference manual, Nov. 1976.||R. M. Cowan, ""Burroughs B6700/B7700 work flow language"" in Command Languages, North-Holland, pp. 153-171, 1975.||J. R. Ellis, ""A LISP shell"", SIGPlan Notices, vol. 15, pp. 24-34, May 1980.||S. E. Fahlman, Netl: A System for Representing and Using Real‑World Knowledge, MA, Cambridge:M.I.T. Press, 1979.||P. H. Feiler and R. Medina-Mora, An incremental programming environment, Dep. Comput. Sci., Carnegie-Mellon Univ., Apr. 1980.||Smalltalk-72 Instruction Manual, 1978.||A. Goldberg and D. Robson, ""A metaphor for user interface design"", Proc. 12th Hawaii Int. Conf. Syst. Sci., pp. 148-157, 1979.||I. Grief and C. Hewitt, ""Actor semantics of PLANNER-73"", Proc. 2nd Conf. Principle of Programming Languages, 1975-Jan.||A. N. Habermann, An overview of the Gandalf project, Dep. Comput. Sci., Carnegie-Mellon Univ., pp. 1978-1979, 1980.||C. Hewitt, ""Viewing control structures as patterns of passing messages"", Artificial Intell., vol. 8, pp. 323-364, 1977.||IBM Virtual Machine Facility/370: CMS Command and Macro Reference Manual, 1980.||D. Ingalls, ""The Smalltalk-76 programming system: Design and implementation"", Proc. 5th Conf. Principles of Programming Languages, pp. 9-16, 1978-Jan.||A. K. Jones, ""The narrowing gap between language systems and operating systems"", Proc. IFIP Conf., 1977.||A. K. Jones, R. Chansler, I. Durham, K. Schwans and S. Vegdahl, ""StarOS: A multiprocessor operating system for the support of task forces"", Proc. 7th Symp. Oper. Syst. Principles, pp. 117-127, 1979-Dec.||A. C. Kay and A. Goldberg, ""Personal dynamic media"", IEEE Computer, vol. 10, pp. 31-41, Mar. 1977.||A. C. Kay, personal communication.||B. W. Kernighan and J. R. Mashey, ""The Unix programming environment"", Sofware–Practice and Experience, vol. 9, pp. 1-15, 1979.||B. W. Lampson, J. J. Horning, R. L. Lampson, J. G. Mitchell and G. L. Popek, Report on the programming language Euclid, vol. 12, Feb. 1977.||B. W. Lampson and R. Sproull, ""An open operating system for a single-user machine"", Proc. 7th Symp. Operating Syst. Principles, pp. 98-105, 1979-Dec.||H. C. Lauer and R. M. Needham, ""On the duality of operating system structures"", Proc. 2nd Int. Symp. Operating Sys., 1979-Oct.||Oper. Syst. Rev., vol. 13, pp. 3-19, Apr. 1979.||S. Lauesen, ""Program control of operating systems"", BIT, vol. 13, pp. 323-337, 1973.||J. Levine, ""Why a Lisp-based command language?"", SIGPLAN Notices, vol. 15, pp. 49-53, May 1980.||B. Liskov, A. Snyder, R. Atkinson and C. Schaffert, ""Abstraction mechanisms in CLU"", Commun. Ass. Comput. Mach., vol. 8, pp. 564-576, Aug. 1977.||G. H. Mealy, ""The functional structure of OS/360"", IBM Syst. J., vol. 5, no. 2, 1966.||M. Minsky, ""A framework for representing knowledge"" in The Psychology of Computer Vision, New York:McGraw-Hill, pp. 211-277, 1975.||M. D. Ostreicher, M. J. Bailey and J. I. Strauss, ""GEORGE 3–A general purpose timesharing and operating system"", Commun. Ass. Comput. Mach., vol. 10, pp. 685-693, Nov. 1967.||J. Ousterhout, D. Scelza and P. Sindu, ""Medusa: An experiment in distributed operating system structure"", Commun. Ass. Comput. Mach., vol. 23, pp. 92-104, Feb. 1980.||D. Redell, Y. Dalal, T. Horsley, H. Lauer, W. Lynch, P. McJones, et al., ""Pilot: All operating system for a personal computer"", Commun. Ass. Comput. Mach., vol. 23, pp. 80-91, Feb. 1980.||L. G. Reid, Control and communication in programmed systems, Sept. 1980.||The Hydra Users Manual, 1977.||E. Sandewall, ""Programming in the interactive environment: The LISP experience"", Comput. Surveys, vol. 10, pp. 35-72, Mar. 1978.||M. Shaw, ""The impact of abstraction concerns on modern programming languages"", Proc. IEEE, vol. 68, 1980-Sept.||J. F. Shoch, ""An overview of the programming language Smalltalk-72"", SIGPLAN Notices, vol. 14, pp. 64-73, Sept. 1979.||D. Smith, Pygmalion: A creative programming environment, June 1975.||T. Teitelbaum, The Cornell program synthesizer: A microcomputer inplementation of PL/CS, Cornell Univ., July 1979.||INTERLISP Reference Manual, 1978.||S. Treu, ""Interactive command language design based on required mental work"", Int. J. Man-Machine Studies, vol. 7, pp. 135-149, 1975.||S. Warren and D. Abbe, ""Rosetta Smalltalk: A conversational extensible microcomputer language"", Proc. 2nd Symp. Small Syst., 1979-Oct.||M. V. Wilkes and R. M. Needham, The Cambridge CAP Computer and Its Operating System, New York:Elsevier North-Holland, 1979.||T. Winograd, ""Breaking the complexity barrier (again)"", SIGPLAN Notices, vol. 10, pp. 13-30, Jan. 1975.||W. A. Wulf and C. G. Bell, ""C.mmp–A multi-mini-processor"", Proc. 1972 Fall Joint Comput. Conf., pp. 765-777.||W. A. Wulf, R. K. Johnsson, C. B. Weinstock, S. D. Hobbs and C. M. Geschke, The Design of an Optimizing Compiler, New York:Elsevier North-Holland, 1975.||W. A. Wulf, R. London and M. Shaw, Abstraction and verification in Alphard: Introduction to language and methodology, Dep. Comput. Sci., Carnegie-Mellon Univ., June 1976.||W. A. Wulf, R. Levin and S. P. Harbison, C.mmp/Hydra: An Experimental Computer System, New York:McGraw-Hill, 1981.||A. Yonezawa and C. Hewitt, ""Modeling distributed systems"", Proc. 5th Int. Joint Conf. Artificial Intell., pp. 370-376, 1977-Aug.||",An Object-Oriented Command Language
"E. Gelenbe&&Département de Mathématiques, Université Paris-Nord, Villetaneuse, France|A. Kurinckx&&I.R.I.A.-Laboria, Le Chesnay, France|","We propose a new method for the control of a multiprogrammed virtual memory computer system. A mathematical model solved by decomposition permits us to justify that the method avoids thrashing. Simulation experiments are used to test the robustness of the predictions of the mathematical model when certain simplifying assumptions are relaxed and when a slightly simpler control technique based on the same principle is used. Comparisons are given with the case where an ""optimal"" control is used and with that with no control. We also provide a simulation evaluating the estimators used in an implementation of the control, as well as the responsiveness of the controlled system to transients in the workload.",10.1109/TSE.1978.231462,IEEE Transactions on Software Engineering,"Control systems,Throughput,Mathematical model,Predictive models,Optimal control,Computational modeling,Delay,Testing,Robust control,Control system synthesis","L. Belady and C. J. Kuehner, ""Dynamic space sharing in computer systems"", Commun. Ass. Comput. Mach., vol. 12, pp. 282-288, May 1969.||P. Denning, ""Thrashing: Its causes and prevention"", 1968 Fall Joint Comput. Conf AFIPS Conf Proc., pp. 915-922, 1968.||P. J. Courtois, On the near complete decomposability of networks of queues and of stochastic models of multiprogramming systems, Nov. 1971.||P. J. Courtois, ""Decomposability instabilities and saturation in multiprogramming systems"", Commun. Ass. Comput. Mach., vol. 18, pp. 371-377, July 1975.||P. J. Courtois, ""Error analysis in nearly completely decomposable stochastic systems"", Econometrica, vol. 43, pp. 691-709, July 1975.||A. Brandwajn, J. Buzen, E. Gelenbe and D. Potier, ""A model of performance for virtual memory systems"", Proc. ACM‑SIGMETRICS Symp., 1974-Sept.||IEEE Trans. Software Eng..||M. Badel, E. Gelenbe, J. Leroudier and D. Potier, ""Adaptive optimization of a time-sharing system's performance"", Proc. IEEE (Special Issue on Interactive Computer Systems), vol. 63, pp. 958-965, 1975-June.||P. J. Denning and G. S. Graham, ""Multiprogrammed memory management"", Proc. IEEE (Special Issue on Interactive Computer Systems), vol. 63, pp. 924-939, 1975-June.||P. J. Denning and G. S. Graham, ""Multiprogramming and program behavior"", Proc. ACM‑SIGMETRICS Symp., 1974-Sept.||J. Leroudier and D. Potier, ""Principles of optimality for multiprogramming"", 1976 Int. Symp. on Computer Performance Modelling Measurements Evaluation, 1976-Mar.-19.||E. Gelenbe and R. R. Muntz, ""Exact and approximate solutions to probabilistic models of computer system behavior—Part I"", Acta Informatica, vol. 7, pp. 35-60, 1976.||J. Leroudier and M. Parent, ""Quelques aspects de la modélisation des systèmes informatiques par simulation a evenements discrets"", RAIRO Informatique, vol. 10, pp. 5-26, Jan. 1976.||R. W. Conway, ""Some tactical problems in digital simulation"", Management Sci., vol. 10, Oct. 1963.||P. Le Gall, ""Convergence des simulations et application aux réseaux téléphoniques"", AFIRO Monographies de Recherche Opérationnelle, vol. 7, 1968.||",Random Injection Control of Multiprogramming in Virtual Memory
"K.L. Heninger&&Naval Research Laboratory, Inc., Washington D.C., USA|","This paper concerns new techniques for making requirements specifications precise, concise, unambiguous, and easy to check for completeness and consistency. The techniques are well-suited for complex real-time software systems; they were developed to document the requirements of existing flight software for the Navy's A-7 aircraft. The paper outlines the information that belongs in a requirements document and discusses the objectives behind the techniques. Each technique is described and illustrated with examples from the A-7 document. The purpose of the paper is to introduce the A-7 document as a model of a disciplined approach to requirements specification; the document is available to anyone who wishes to see a fully worked-out example of the approach.",10.1109/TSE.1980.230208,IEEE Transactions on Software Engineering,"Application software,Documentation,Real time systems,Software systems,Military aircraft,Software maintenance,Software engineering,Formal specifications,Laboratories,Weapons","P. Brinch Hansen, Operating Systems Principles, NJ, Englewood Cliffs:Prentice-Hall, 1973.||E. W. Dijkstra, ""Co-operating sequential processes"" in Programming Languages, New York:Academic, pp. 43-112, 1968.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1977.||J. V. Guttag, ""Abstract data types and the development of data structures"", Commun. Ass. Comput. Mach., vol. 20, pp. 396-404, June 1976.||K. Heninger, J. Kallander, D. L. Parnas and J. Shore, Software Requirements for the A-7E Aircraft, Nov. 1978.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||J. Howard, ""Proving monitors"", Commun. Ass. Comput. Mach., vol. 19, pp. 273-279, May 1976.||R. Lipton, On Synchronization Primitive Systems, 1973.||B. Liskov and S. Zilles, ""Specification techniques for data abstractions"", IEEE Trans. Software Eng., vol. SE-1, pp. 7-19, Mar. 1975.||B. Liskov and V. Berzins, ""An appraisal of program specifications"", Proc. Conf. on Research Directions in Software Technology, pp. 13.1-13.24, 1977-Oct.-10-12.||D. L. Parnas, ""Information distribution aspects of design methodology"", Proc. Int. Fed. Inform. Processing Congr., vol. TA-3, 1971-Aug.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., vol. 15, pp. 1053-1058, Dec. 1972.||D. L. Parnas and G. Handzel, More on Specification Techniques for Software Modules, W. Germany, Darmstadt:Fachbereich Informatik, Technische Hochschule Darmstadt, 1975.||D. L. Parnas and H. Wurges, ""Response to undesired events in software systems"", Proc. 2nd Int. Conf Software Eng., pp. 437-446, 1976.||D. L. Parnas, Use of Abstract Interfaces in the Development of Software for Embedded Computer Systems, 1977.||D. L. Parnas, ""use of precise specifications in the development of software"", Proc. Int. Fed. Inform. Processing Congr., 1977.||D. L. Parnas, ""Designing software for ease of extension and contraction"", Proc. 3rd Int. Conf. Software Eng., 1978-May.||D. L. Parnas and K. Heninger, ""Implementing processes in HAS"" in Software Engineering Principles, DC, Washington:Naval Res. Lab., 1978.||D. L. Parnas, ""Desired system behavior in undesired situations"" in Software Engineering Principles, DC, Washington:Naval Res. Lab., 1978.||O. Roubine and L. Robinson, SPECIAL Reference Manual, 1977.||A. C. Shaw, The Logical Design of Operating Systems, NJ, Englewood Cliffs:Prentice-Hall, 1974.||D. M. Weiss, The MUDD Report: A Case Study of Navy Software Development Practices, 1975.||",Specifying Software Requirements for Complex Systems: New Techniques and Their Application
"D.L. Parnas&&Research Group on Operating Systems, Fachbereich Informatik, Technische Hochschule Darmstadt, Darmstadt, Germany|","Program families are defined (analogously to hardware families) as sets of programs whose common properties are so extensive that it is advantageous to study the common properties of the programs before analyzing individual members. The assumption that, if one is to develop a set of similar programs over a period of time, one should consider the set as a whole while developing the first three approaches to the development, is discussed. A conventional approach called ""sequential development"" is compared to ""stepwise refinement"" and ""specification of information hiding modules."" A more detailed comparison of the two methods is then made. By means of several examples it is demonstrated that the two methods are based on the same concepts but bring complementary advantages.",10.1109/TSE.1976.233797,IEEE Transactions on Software Engineering,"Hardware,Manufacturing,Algorithm design and analysis,Production,Software maintenance,Programming profession,Costs,Software design,Software engineering,Operating systems","D. L. Parnas, ""Some conclusions from an experiment in software engineering techniques"", 1972 Fall Joint Computer Conf. AFIPS Conf. Proc., vol. 41, pp. 325-329, 1972.||H. Mills, ""Mathematical foundations of structured programming"", IBM Federal Systems Div. No. FSC72-6012, pp. 1-62, Feb. 1972.||E. W. Dijkstra, ""Structured programming"" in Software Engineering Techniques, Belgium, Brussels:NATO Scientific Affairs Division, pp. 84-87, 1970.||N. Wirth, ""Program development by stepwise refinement"", Commun. ACM, vol. 14, pp. 221-227, Apr. 1971.||W. A. Wulf, ""The GOTO controversy: A case against the GOTO"", SIGPLAN Notices, vol. 7, pp. 63-69, Nov. 1972.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. ACM, vol. 17, pp. 549-557, Oct. 1974.||E. W. Dijkstra, ""On the axiomatic definition of semantics"", EWD 367.||D. L. Parnas, ""On the criteria used in decomposing systems into modules"", Commun. ACM, vol. 15, pp. 1053-1058, Dec. 1972.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. ACM, pp. 330-336, May 1972.||P. Naur, ""Programming by action clusters"", BIT, vol. 9, pp. 250-258, 1969.||P. Henderson and R. Snowdon, ""An experiment in structured programming"", BIT, vol. 12, pp. 38-53, 1972.||D. L. Parnas, ""A course on software engineering techniques"", Proc. ACM SIGCSE, 1972-Mar.-24-25.||E. W. Dijkstra, ""Co-operating sequential processes"" in Programming Languages, New York:Academic Press, pp. 43-112, 1968.||W. R. Price, Implications of a virtual memory mechanism for implementing protection in a family of operating systems, 1973.||B. Randell and F. W. Zurcher, ""Iterative multi-level modelling—A methodology for computer system design"", Proc. IFIP Congr., 1968.||D. L. Parnas, ""On a 'buzzword' hierarchical structure"", Proc. IFIP Congr., pp. 336-339, 1974.||",On the Design and Development of Program Families
"D.T. Ross&&SofTech, Inc.orporated, Waltham, MA, USA|K.E. Schoman&&SofTech, Inc.orporated, Waltham, MA, USA|","Requirements definition encompasses all aspects of system development prior to actual system design. We see the lack of an adequate approach to requirements definition as the source of major difficulties in current systems worlk This paper examines the needs for requirements definition, and proposes meeting those objectives with three interrelated subjects: context analysis, functional specification, and design constraints. Requirements definition replaces the widely used, but never well-defined, term ""requirements analysis.""",10.1109/TSE.1977.229899,IEEE Transactions on Software Engineering,"Production systems,Failure analysis,Hardware,System analysis and design,Pulp manufacturing,Documentation,Personnel,Assembly systems,Environmental management,Engineering management","B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, pp. 48-59, May 1973.||P. Hirsch, ""GAO hits Wimmix hard: FY'72 funding prospects fading fast"", Datamation, pp. 41, Mar. 1971.||An Introduction to SADT™, MA, Waltham:SofTech, Inc., Feb. 1976.||D. T. Ross, J. B. Goodenough and C. A. Irvine, ""Software engineering: Process principles and goals"", Computer, pp. 17-27, May 1975.||AirForce Computer-Aided Manufacturing (AFCAM) Master Plan, vol. II, July 1974.||TRAIDEX Needs and Implementation Study, May 1976.||B. W. Boehm, ""Software design and structure"" in Practical Strategies for Developing Large Software Systems, MA:Addison-Wesley, pp. 115-122, 1975.||R. V. Head, ""Automated system analysis"", Datamation, pp. 22-24, Aug. 1971.||J. T. Rigo, ""How to prepare functional specifications"", Datamation, pp. 78-80, May 1974.||D. Teichroew and H. Sayani, ""Automation of system building"", Datamation, pp. 25-30, Aug. 1971.||D. Teichroew and E. A. Hershey, PSL/PSA: A computer-aided technique for structured documentation and analysis of information processing systems, pp. 41-48.||F. M. Haney, ""What it takes to make MAC MIS and ABM fly"", Datamation, pp. 168-169, June 1974.||",Structured Analysis for Requirements Definition
"C. V. Ramamoorthy&&Computer Science Division, Electronics Research Laboratory,  Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, CA, USA|Siu-Bun F. Ho&&Computer Science Division, Electronics Research Laboratory,  Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, CA, USA|","In the past few years, research has been actively carried out in an attempt to improve the quality and reliability of large-scale software systems. Although progress has been made on the formal proof of program correctness, proving large-scale software systems correct by formal proof is still many years away. Automated software tools have been found to be valuable in improving software reliability and attacking the high cost of software systems. This paper attempts to describe some main features of automated software tools and some software evaluation systems that are currently available.",10.1109/TSE.1975.6312819,IEEE Transactions on Software Engineering,"Testing,Software systems,Debugging,Software reliability,System analysis and design",,Testing large software with automated software evaluation systems
"C.E. Hewitt&&Artificial Intelligence Laboratory and the Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, MA, USA|R.R. Atkinson&&Artificial Intelligence Laboratory and the Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, MA, USA|","This paper presents a specification language, implementation mechanism, and proof techniques for problems involving the arbitration of concurrent requests to shared protected resources whose integrity must be preserved. This mechanism is the serializer, which may be described as a kind of protection mechanism, in that it prevents improper orders of access to a protected resource. Serializers are a more structured form of the monitor mechanism of Brinch Hansen and Hoare.",10.1109/TSE.1979.234149,IEEE Transactions on Software Engineering,"Protection,Monitoring,Specification languages,Control systems,Signal processing,Computational modeling,Concurrent computing,Parallel processing,Artificial intelligence,Computer science","H. J. Baker and C. Hewitt, Incremental garbage collection of processes, Dec. 1977.||G. M. Birtwistle, O. Dahl, B. Myhrhaug and K. Nygaard, SIMULA Begin, New York:Auerbach, 1973.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||P. Brinch Hansen, ""The solo operating system"", Software-Practice and Experience, pp. 141-205, Apr.-June 1976.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, 1973.||D. W. Bustard, Parallel Programming Pascal (PPP), Nov. 1975.||E. W. Dijkstra, ""Co-operating sequential processes"" in Programming Languages, New York:Academic, 1968.||E. W. Dijkstra, ""Hierarchical ordering of sequential processes"", Acta Informatica, 1971.||K. P. Eswaren, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 11, pp. 624-633, Nov. 1976.||N. Goodman, Coordination of parallel processes in the actor model of computation, June 1976.||I. Greif, Semantics of communicating parallel processes, Sept. 1975.||I. Greif and C. Hewitt, ""Actor semantics of PLANNER-73"", Proc. Ass. Comput. Mach. SIGPLAN-SIGACT Conf., 1975-Jan.||C. Hewitt and R. Atkinson, ""Synchronization in actor systems"", Proc. Conf. Principles of Programming Languages, 1977-Jan.||C. Hewitt and G. Attardi, An axiomatic denotation specification of a concurrent programming language, May 1978.||C. Hewitt, G. Attardi and H. Lieberman, Specifying and proving properties of guardians for distributed systems, Oct. 1978.||C. Hewitt and B. Smith, ""Towards a programming apprentice"", IEEE Trans. Software Eng., vol. SE-1, pp. 26-45, Mar. 1975.||C. Hewitt and H. Baker, Laws for communicating parallel processes, 1976-Dec.||C. Hewitt, ""Actors and continuous functionals"", IFIP Working Conf. Formal Description of Programming Concepts, 1977-Aug.-1-5.||July 1977.||C. A. R. Hoare, ""Towards a theory of parallel programming"" in Operating Systems Techniques, New York:Academic, pp. 61-71, 1972.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., Oct. 1975.||C. A. R. Hoare, ""Language hierarchies and interfaces"" in Lecture Notes in Computer Science, New York:Springer, pp. 242-265, 1976.||B. W. Lampson and H. E. Sturgis, ""Crash recovery in a distributed data storage system"", Commun. Ass. Comput. Mach..||D. H. H. Ingalls, ""The Smalltalk-76 programming system design and implementation"", Conf. Rec. 5th Annu. ACM Symp. Principles of Programming Languages, pp. 9-16, 1978-Jan.-23-25.||A. Kay, ""Microelectronics and the personal computer"", Scientific American, Sept. 1977.||J. F. Shoch, ""An overview of the programming language Smailtalk‑72"", Convention Informatique 1977.||A. Yonezawa, Specification and verification techniques for parallel programs based on message passing semantics, Dec. 1977.||||",Specification and Proof Techniques for Serializers
"R.P. Cook&&Department of Computer Sciences, University of Wisconsin, Madison, Madison, WI, USA|T.J. Leblanc&&Department of Computer Sciences, University of Wisconsin, Madison, Madison, WI, USA|","We are concerned with languages in which the programmer has explicit control over the referencing environment of a name. Several modern programming languages, including Ada, Euclid, Mesa, and Modula, implement these control capabilities. This paper describes a simple technique which uses the traditional concepts of a hashed symbol table and lexical level to solve many of the symbol table implemen-tation problems associated with explicit scope control. The primary ad-vantage of this technique is that a single symbol table abstraction can be used to simply and efficiently solve most problems in scope control.",10.1109/TSE.1983.236164,IEEE Transactions on Software Engineering,"Computer languages,Programming profession,Automatic control","A. V. Aho and J. D. Ullman, Principles of Compiler Design, MA, Reading:Addison-Wesley, 1977.||R. P. Cook, ""*MOD–A language for distributed computing"", IEEE Trans. Software Eng., vol. SE-6, pp. 563-571, Nov. 1980.||O. Dahl and K. Nygaard, ""SIMULA–An ALGOL based simulation language"", Commun. Ass. Comput. Mach., vol. 9, pp. 671-678, Sept. 1966.||S. Graham, W. Joy and O. Roubine, ""Hashed symbol tables for languages with explicit scope control"", Proc. SIGPLAN Symp. Compiler Construction, pp. 50-57, 1979-Aug.||SIGPLAN Notices, vol. 14, no. 8.||B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell and G. L. Popek, Report on the programming language Euclid, vol. 12, Feb. 1977.||T. J. LeBlanc, StarMod user's guide–Version 1.0, Dec. 1981.||J. G. Mitchell, W. Maybury and R. Sweet, Mesa language manual, Apr. 1979.||M. S. Sherman and M. S. Borkan, ""A flexible semantic analyzer for ADA"", Proc. ACM-SIGPLAN Symp. Ada Programming Language, pp. 62-71, 1980-Nov.||SIGPLAN Notices, vol. 15, no. 11.||""Ada programming language"", military standard, Dec. 1980.||Pascal User Manual and Report, 1976.||N. Wirth and K. Jensen, ""Modula–A language for modular multiprogramming"", Software–Practice and Experience, vol. 7, pp. 3-35, Jan. 1977.||N. Wirth and K. Jensen, ""Modula-2"" in Nr. 36 Institut für Informatik, Zurich:ETH, Mar. 1980.||",A Symbol Table Abstraction to Implement Languages with Explicit Scope Control
"Shi-Kuo Chang&&Knowledge Systems Laboratory, Department of Information Engineering, University of Illinois, Chicago, IL, USA|Wu-Haung Cheng&&Survey Research Laboratory, University of Illinois, Chicago, IL, USA|","This paper presents the concept of a model of database skeleton which is used to represent user's knowledge on the meaning of the data. The logical database synthesis pfoblem is then formulated as a problem of convetting a partially specified database skeleton to a completely specified-one, which corresponds to one of several data models. Approaches to optimal logical database synthesis for the relational database are then considered.",10.1109/TSE.1978.231463,IEEE Transactions on Software Engineering,"Skeleton,Relational databases,Data models,Laboratories,Knowledge based systems,Knowledge engineering,Cancer,Councils,Dictionaries","M. M. Astrahan, ""System R: A relational approach to database management"", ACM Tran. Database Syst., vol. 1, pp. 97-137, June 1976.||P. A. Bernstein, J. R. Swenson and D. C. Tsichritzis, ""A unified approach to functional dependencies and relations"", Proc. ACMSIGMOD, pp. 237-245, 1975.||J. M. Cadiou, ""On semantic issues in the relational model of data"", Proc. Int. Symp. Math. Foundations of Comput. Sci., 1975-Sept.||C. R. Carlson and R. S. Kaplan, ""A generalized access path model and its application to a relational data base system"", Proc. ACMSIGMOD, pp. 143-154, 1976.||D. D. Chamberlin, ""Relational data-base management systems"", Computing Surveys, vol. 8, pp. 43-66, Mar. 1976.||S. K. Chang, M. O'Brien, J. Read, R. Borovec, W. H. Cheng and J. S. Ke, ""Design considerations of a database system in a clinical network environment"", Proc. Nat. Comput. Conf, pp. 277-286, 1976-June.||S. K. Chang and C. N. Liu, ""Distributed information systems design"", Advances in Information Systems Sciences, 1978.||S. K. Chang, An intelligent coupler for distributed database systems, July 1976.||S. K. Chang and J. S. Ke, ""Database skeleton and its application to fuzzy query translation"", IEEE Trans. Software Eng., pp. 31-44.||P. S. Chen, ""The entity-relationship model—toward a unified view of data"", ACM Trans. Database Syst., vol. 1, Mar. 1976.||L. Clough, W. D. Haseman and Y. H. So, ""Designing optimal data structures"", Proc. Nat. Comput. Conf, pp. 829-837, 1976.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass. Comput. Mach., vol. 13, no. 6, June 1970.||E. F. Codd, ""Further normalization of the data base relational model"", Proc. Cournat Symp. Data Base Systems, vol. 6, 1971.||E. F. Codd, ""Relational completeness of data base sublanguages"", Proc. Courant Symp. Data Base Systems, vol. 6, 1971.||E. F. Codd, ""A data base sublanguage founded on the relational calculus"", Proc. ACM SIGFIDET Workshop on Data Description Access and Control, 1971-Nov.||C. J. Date, An Introduction to Data Base Systems, MA, Reading:Addison-Wesley, 1975.||C. Delobel, A theory about data in an information system, Dec. 1971.||C. Delobel and R. G. Casey, ""Decomposition of a data base and the theory of Boolean switching functions"", IBM J. Res. Develop., vol. 17, no. 5, Sept. 1973.||N. Deo, Graph Theory with Applications to Engineering and ComputerScience, NJ, Englewood Cliffs:Prentice-Hall, 1974.||R. Fagin, Relational database decomposition and propositional logic, Apr. 1976.||R. W. Taylor and R. L. Frank, ""CODASYL data-base management systems"", Computing Surveys, vol. 8, pp. 67-103, Mar. 1976.||D. C. Tsichritzis and F. H. Lochovsky, ""Hierarchical database management: A survey"", Computing Surveys, vol. 8, pp. 105-123, Mar. 1976.||P. P. Uhrowczik, ""Data dictionary/directories"", IBM Syst. J., vol. 12, no. 4, Dec. 1973.||C. P. Wang and H. H. Wedekind, ""Segment synthesis in logical data base design"", IBM J. Res. and Develop., pp. 71-77, Jan. 1975.||",Database Skeleton and Its Application to Logical Database Synthesis
"J. Guttag&&Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, MA, USA|","This paper, which was initially prepared to accompany a series of lectures given at the 1978 NATO International Summer School on Program Construction, is primarily tutorial in nature. It begins by discussing in a general setting the role of type abstraction and the need for formal specifications of type abstractions. It then proceeds to examine in some detail two approaches to the construction of such specifications: that proposed by Hoare in his 1972 paper ""Proofs of Correctness of Data Representations,"" and the author's own version of algebraic specifications. The Hoare approach is presented via a discussion of its embodiment in the programming language Euclid. The discussion of the algebraic approach includes material abstracted from earlier papers as well as some new material that has yet to appear. This new material deals with parameterized types and the specification of restrictions. The paper concludes with a brief discussion of the relative merits of the two approaches to type abstraction.",10.1109/TSE.1980.230209,IEEE Transactions on Software Engineering,"Algorithms,Computer languages,Formal specifications,Computerized monitoring,Computer science,Programming profession","O. J. Dahl, K. Nygaard and B. Myhrhuag, The SIMULA 67 Common Base Language, Oslo:Norwegian Computing Centre, 1968.||O. J. Dahl, Can program proving be made practical?, Norway:Institute of Informatics, Univ. Oslo, 1978.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||J. E. Donahue, ""Complementary definitions of programming language semantics"" in Lecture Notes in Computer Science, New York:Springer-Verlag, vol. 42, 1976.||J. D. Gannon, Language design to enhance programming reliability, 1975.||||J. A. Goguen, J. W. Thatcher, E. G. Wagner and J. B. Wright, ""Abstract data-types as initial algebras and correctness of data representations"", Proc. Conf Computer Graphics Pattern Recognition and Data Structure, 1975-May.||J. V. Guttag, The specification and application to programming of abstract data types, 1975.||||J. V. Guttag, ""Abstract data types and the development of data structures"", Commun. Ass. Comput. Mach., vol. 20, pp. 396-404, June 1977.||J. V. Guttag and J. J. Horning, ""The algebraic specification of abstract data types"", Acta Informatica, vol. 10, pp. 27-52, 1978.||J. V. Guttag, E. Horowitz and D. R. Musser, ""Abstract data types and software validation"", Commun. Ass. Comput. Mach., vol. 21, pp. 1048-1064, Dec. 1978.||Aug. 1976.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||C. A. R. Hoare, ""Proofs of correctness of data representations"", Acta Informatica, vol. 1, no. l, pp. 271-281, 1972.||D. E. Knuth and P. B. Bendix, Computational Problems in Abstract Algebras, New York:Pergamon, pp. 263-297, 1970.||B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell and G. J. Popek, Revised report on the programming language Euclid, Xerox Res. Center.||SIGPLAN Notices, vol. 12, Feb. 1977.||R. L. London, J. V. Guttag, J. J. Horning, B. W. Lampson, J. G. Mitchell and G. J. Popek, ""Proof rules for the programming language Euclid"", Acta Informatica, vol. 10, pp. 1-26, 1978.||J. H. Morris, ""Types are not sets"", Proc. ACM Symp. Principles of Programming Languages, pp. 120-124, 1973-Oct.||D. L. Parnas, ""A technique for the specification of software modules with examples"", Commun. Ass. Comput. Mach., vol. 15, pp. 330-336, May 1972.||D. Scott, ""Outline of a mathematical theory of computation"", Proc. 4th Annu. Princeton Conf. Information Science and Systems, pp. 169-176, 1970.||J. Spitzen and B. Wegbreit, ""The verification and synthesis of data structures"", Acta Informatica, vol. 4, pp. 127-144, 1975.||J. W. Thatcher, E. G. Wagner and J. B. Wright, ""Data type specification: Parameterization and the power of specification techniques"", Proc. SIGACT 10th Annu. Symp. Theory of Computing, 1978-May.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, Dec. 1976.||S. N. Ziles, Abstract specifications for data types, CA, San Jose:IBM Res. Lab., 1975.||",Notes on Type Abstraction (Version 2)
"M. Hamilton&&Computer Science Division, Charles Stark Draper Laboratories, Inc., Cambridge, MA, USA|S. Zeldin&&Computer Science Division, Charles Stark Draper Laboratories, Inc., Cambridge, MA, USA|","The key to software reliability is to design, develop, and manage software with a formalized methodology which can be used by computer scientists and applications engineers to describe and communicate interfaces between systems. These interfaces include: software to software; software to other systems; software to management; as well as discipline to discipline within the complete software development process. The formal methodology of Higher Order Software (HOS), specifically aimed toward large-scale multiprogrammed/multiprocessor systems, is dedicated to systems reliability. With six axioms as the basis, a given system and all of its interfaces is defined as if it were one complete and consistent computable system. Some of the derived theorems provide for: reconfiguration of real-time multiprogrammed processes, communication between functions, and prevention of data and timing conflicts.",10.1109/TSE.1976.233798,IEEE Transactions on Software Engineering,"Software development management,Computer interfaces,Software systems,Software reliability,Engineering management,Communication system software,Computer applications,Application software,Reliability engineering,Design engineering","M. Hamilton and S. Zeldin, ""Higher order software techniques applied to a space shuttle prototype program"", Lecture Notes in Computer Science, vol. 19, pp. 17-31, 1974-April-9-11.||M. Hamilton, Design of the GN&C flight software specification, MA, Cambridge:Charles Stark Draper Lab., Feb. 1973.||R. Millard, study of APOLLO, MA, Cambridge:internal Charles Stark Draper Lab., 1969-1972.||L. Fair, Planning Guide for Computer Program Development, CA, Santa Monica:System Development Corp., pp. 57, May 1965.||B. W. Boehm, Some information processing implications of air force space missions: 1970-1980, CA, Santa Monica:Rand Corp., Jan. 1970.||A. M. Turing, ""On computable numbers with an application to the entscheidungs problem"", Proc. London Math. Soc., vol. 42, 1936.||D. Parnas, ""On a 'buzzword': Hierarchical structure"", 1971 Fall Joint Comput. Conf. IFIPS Conf. Proc., vol. 39, 1971.||D. D. Chamberlin, ""The single-assignment approach to parallel processing"", AFIPS Proc., 1974.||W. A. Wulf, ""Bliss: A language for systems programming"", Commun. Ass. Comput. Mach., vol. 12, Dec. 1973.||B. Randell, Research on computing system reliability at the University of Newcastle upon Tyne 1972-1973, Jan. 1974.||CS-4 Language Reference Manual.||J. Schwartz, On Programming An Interim Report on the SETL Project, 1973.||Installment 2: The SETL Language and Examples of its Use, 1973.||O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||M. Hamilton, Management of APOLLO programming and its application to the shuttle, MA, Cambridge:Charles Stark Draper Lab., May 1971.||M. Hamilton and S. Zeldin, MERCURY statistical analysis, MA, Cambridge:Charles Stark Draper Lab., Nov. 1973.||N. Brodeur, MERCURY statistical analysis report revisited, MA, Cambridge:Charles Stark Draper Lab., Nov. 1973.||M. Hamilton, First draft of a report on the analysis of APOLLO system problems during flight, Oct. 1972.||M. Hamilton, The AGC executive and its influence on software management, MA, Cambridge:Charles Stark Draper Lab., Feb. 1972.||H. Laning, AGC Program Sundisk, MA, Cambridge:Charles Stark Draper Lab., Nov. 1967.||M. Hamilton, AGC Program Sundisk, MA, Cambridge:Charles Stark Draper Lab., Nov. 1967.||D. Lickly, AGC Program Sundisk, MA, Cambridge:Charles Stark Draper Lab., Nov. 1967.||C. Muntz, Users guide to the block II AGC/LGC interpreter, Apr. 1965.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., vol. 15, pp. 1053-1058, Dec. 1972.||C. Muntz, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., vol. 15, pp. 330-336, May 1972.||M. Hamilton and S. Zeldin, Higher order software requirement, MA, Cambridge:Charles Stark Draper Lab., Aug. 1973.||M. Hamilton, Top-down/bottom-up structured programming and program structuring, MA, Cambridge:Charles Stark Draper Lab., Dec. 1972.||W. Daly, Automatic flowcharts, MA, Cambridge:Charles Stark Draper Lab., Mar. 1974.||Chief programmer teams principles and procedures, June 1971.||G. M. Weinberg, Psychology of Computer Programming, New York:Van Nostrand Reinhold, 1971.||J. R. White and L. Presser, ""A tool for enforcing system structure"", Proc. Ass. Comput. Mach., 1973.||M. Hamilton, A discussion of higher order software concepts as they apply to functional requirements and specifications, MA, Cambridge:Charles Stark Draper Lab., Dec. 1973.||B. McCoy, ""DAIS avionic software development techniques"", Amer. Inst. Aeronaut. and Astronaut. Digital Avionics Syst. Conf., 1975-Apr.-2-4.||G. Boetje, ""Managing software development: A new approach"", IEEE Nat. Aerospace Electron. Conf. (NAECON), pp. 165, 1975-June-10-12.||D. DeVorkin, The DAIS executive system.||Submittal of structured flowcharts of the approach and landing test (ALT) GN&C design for the space shuttle orbiter GN&C integration task, MA, Cambridge:The Charles Stark Draper Lab., Inc., Jan. 1975.||Space shuttle orbiter approach and landing test level C functional subsystem software requirements document guidance navigation and control part A guidance, Nov. 1974.||Part B flight control, CA, Downey.||Horizontal flight digital autopilot requirement definition, FL, Sarasota, Honeywell:Honeywell, Inc., vol. II, pp. 5-7, July 1974.||Space shuttle orbiter avionics software, TX, Houston:IBM, vol. III, Feb. 1975.||D. J. Lickly, HAL/S Language Specification, MA, Cambridge:Intermetrics, Inc.||G. Goddard, Control map development, MA, Cambridge:Charles Stark Draper Lab., Jan. 1975.||",Higher Order Software—A Methodology for Defining Software
"D.T. Ross&&SofTech, Inc.orporated, Waltham, MA, USA|","Structured analysis (SA) combines blueprint-like graphic language with the nouns and verbs of any other language to provide a hierarchic, top-down, gradual exposition of detail in the form of an SA model. The things and happenings of a subject are expressed in a data decomposition and an activity decomposition, both of which employ the same graphic building block, the SA box, to represent a part of a whole. SA arrows, representing input, output, control, and mechanism, express the relation of each part to the whole. The paper describes the rationalization behind some 40 features of the SA language, and shows how they enable rigorous communication which results frorn disciplined, recursive application of the SA maxim: ""Everything worth saying about anything worth saying something about must be expressed in six or fewer pieces.""",10.1109/TSE.1977.229900,IEEE Transactions on Software Engineering,"Graphics,Natural languages,Communication system control,System analysis and design,Steam engines,Solid modeling,Mathematical model,Data processing,Databases,Software design","D. T. Ross, ""It's time to ask why?"", Software Practise Experience, vol. 1, pp. 103-104, Jan.Mar. 1971.||D. T. Ross, J. B. Goodenough and C. A. Irvine, ""Software engineering: Process principles and goals"", Computer, pp. 17-27, May 1975.||S. Hori, Human-directed activity cell model, 1972.||D. T. Ross, ""A generalized technique tor symbol manipulation and numerical calculation"", Commun Ass. Comput. Mach., vol. 4, pp. 147-150, Mar. 1961.||D. T. Ross and K. E. Schoman, Structured analysis for requirements definition, pp. 6-15.||G. A. Miller, ""The magical number seven plus or minus two: Some limits on our capacity for processing information"", Psychol. Rev., vol. 63, pp. 81-97, Mar. 1956.||",Structured Analysis (SA): A Language for Communicating Ideas
"Donald I. Good&&Department of Computer Sciences, University of Texas, Austin, TX, USA|Ralph L. London&&University of Southern California, Information Sciences Institute, Marina del Rey, CA, USA|W. W. Bledsoe&&Department of Computer Sciences, University of Texas, Austin, TX, USA|","This paper is an initial progress report on the development of an interactive system for verifying that computer programs meet given formal specifications. The system is based on the conventional inductive assertion method: given a program and its specifications, the object is to generate the verification conditions, simplify them, and prove what remains. The important feature of the system is that the human user has the opportunity and obligation to help actively in the simplifying and proving. A general description is given of the overall design philosophy, structure, and functional components of the system, and a simple sorting program is used to illustrate both the behavior of major system components and the type of user interaction the system provides.",10.1109/TSE.1975.6312820,IEEE Transactions on Software Engineering,"Generators,Humans,Educational institutions,Knowledge based systems,Computers,Sorting,Interactive systems",,An interactive program verification system
"J.T. Robinson&&Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|","Efficient algorithms for asynchronous multiprocessor systems must achieve a balance between low process communication and high adaptability to variations in process speed. Algorithms that employ problem decomposition may be classified as static (in which decomposition takes place before execution) and dynamic (in which decomposition takes place during execution). Static and dynamic algorithms are particularly suited for low process communication and high adaptability, respectively. For static algorithms the following analysis techniques are presented: finding the probability distribution of execution time, deriving bounds on mean execution time using order statistics, finding asymptotic mean speedup, and using approximations. For dynamic algorithms the technique of modeling using a queueing system is presented. For each technique, an example application to parallel sorting is given.",10.1109/TSE.1979.234150,IEEE Transactions on Software Engineering,"Algorithm design and analysis,Heuristic algorithms,Parallel processing,Operating systems,Multiprocessing systems,Sorting,Joining processes,Switches,Interference,Probability distribution","G. Baudet, The design and analysis of algorithms for asynchronous multiprocessors, Apr. 1978.||Computer and Job-Shop Scheduling, New York:Wiley, 1976.||H. A. Herbert, Order Statistics, New York:Wiley, 1970.||W. Feller, An Introduction to Probability Theory and Its Applications, New York:Wiley, vol. 2, 1966.||S. H. Fuller and P. Oleinick, ""Initial measurements of parallel programs on a multi-mini-processor"", Proc. Comput. Conf., pp. 358-363, 1976.||F. Gavril, ""Merging with parallel processes"", Commun. Ass. Comput. Mach., vol. 18, pp. 588-591, Oct. 1975.||L. Kleinrock, Queueing Systems, New York:Wiley, vol. 1, 1975.||D. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 3, 1972.||H. T. Kung, ""Synchronized and asynchronous parallel algorithms for multiprocessors"" in Algorithms and Complexity–New Directions and Recent Results, New York:Academic, pp. 153-200, 1976.||C. H. Lindsey and S. G. van der Meulen, Informal Introduction to ALGOL 68, The Netherlands, Amsterdam:North-Holland, 1971.||R. Sedgewick, Quicksort, 1975.||L. G. Valiant, ""Parallelism in comparison problems"", SIAM J. Comput., vol. 4, no. 3, pp. 348-355, Sept. 1975.||W. A. Wulf and C. G. Bell, ""C.mmp–A multi-mini-processor"", Proc. AFIPS 1972 Fall Joint Comput. Conf, vol. 41, pp. 765-777.||W. Wulf, ""HYDRA: The kernel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, pp. 337-344, June 1974.||",Some Analysis Techniques for Asynchronous Multiprocessor Algorithms
"D.A. Lamb&&Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|P.N. Hilfinger&&Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|","We give a technique for partially simulating procedure variables using Ada tasks. The simulation involves using interface tasks, a technique which may be useful for other problems.",10.1109/TSE.1983.236165,IEEE Transactions on Software Engineering,"Computer languages,Computer science,US Department of Defense,Computerized monitoring,Aerospace electronics,Laboratories,Organizing","Reference Manual for the Ada Programming Language, 1980.||A. N. Habermann and I. Nassi, Efficient implementation of Ada tasks, Jan. 1980.||H. Lauer and E. Satterthwaite, ""The impact of Mesa on system design"", Proc. 4th IEEE Int. Conf. Software Eng., pp. 174-182, 1979-Sept.||O. Roubine, Meeting of the Boston SIGPLAN Chapter, 1980-Dec.||",Simulation of Procedure Variables Using Ada Tasks
"Shi-Kuo Chang&&Knowledge Systems Laboratory, Department of Information Engineering, University of Illinois, Chicago, IL, USA|Jyh-Sheng Ke&&Knowledge Systems Laboratory, Department of Information Engineering, University of Illinois, Chicago, IL, USA|","This paper treats the problem of fuzzy query translation using the concept of database skeleton. An imprecise, or fuzzy, query is represented by a query graph, which can be analyzed for translatability with respect to a given database skeleton. The fuzzy query translation problem is formulated as a problem of converting a partially specified query graph into a completely specified query graph. This graph is then translated into a sequence of data manipulation commands, such as commands in relational algebra. Approaches to optimal fuzzy query translation are also described.",10.1109/TSE.1978.231464,IEEE Transactions on Software Engineering,"Skeleton,User interfaces,Relational databases,Database languages,Algebra,Database systems,Deductive databases,Information retrieval,Network synthesis,Fuzzy systems","J. R. Abrial, ""Data semantics"", Database Management Systems, 1975.||D. L. Bitzer and J. A. Easley, ""PLATO: A computer-controlled teaching system"" in Computer Augmentation ofHuman Reasoning, DC, Washington:Spartan, pp. 90-103, 1965.||C. R. Carlson and R. S. Kaplan, ""A generalized access path model and its application to a relational data base system"", Proc. ACM-SIGMOD, pp. 143-154, 1976.||D. D. Chamberlin and R. F. Boyce, ""SEQUEL: A structured English query language"", Proc. ACM-SIGMOD Workshop on Data Description Access and Control, 1974-May.||D. D. Chamberlin, ""Relational data-base management systems"", Comput. Surveys, vol. 8, no. 1, pp. 43-66, Mar. 1976.||S. K. Chang, M. O'Brien, J. Read, R. Borovec, W. H. Cheng and J. S. Ke, ""Design considerations of a database system in a clinical network environment"", Proc. Nat. Computer Conf., pp. 277-286, 1976-June.||S. K. Chang, An intelligent coupler for distributed database systems, July 1976.||S.-K. Chang and W.-H. Cheng, Database skeleton and its application to logical database synthesis, pp. 18-30.||P. S. Chen, ""The entity-relationship model—toward a unified view of data"", ACM Trans Database Syst., vol. 1, Mar. 1976.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Assoc. Comput. Mach., vol. 13, no. 6, June 1970.||E. F. Codd, ""Further normalization of the data base relational model"", Proc. Cournat Symp. Data Base Systems, vol. 6, 1971.||E. F. Codd, ""Relational completeness of data base sublanguages"", Proc. Courant Symp. Data Base Systems, vol. 6, 1971.||E. F. Codd, ""A data base sublanguage founded on the relational calculus"", Proc. ACM SIGFIDET Workshop on Data Description Access and Control, 1971-Nov.||C. J. Date, An Introduction to Data Base Systems, MA, Reading:Addison-Wesley, 1975.||N. Deo, Graph Theory with Applications to Engineering and Computer Science, NJ, Englewood Cliffs:Prentice-Hall, 1974.||S. L. Hakimi, ""Steiner's problem in graphs and its implications"", Networks, vol. 1, pp. 113-133, 1971.||N. McDonald and M. Stonebraker, ""CUPID—A friendly query language"", Proc. ACM-PACIFIC-75, 1975-Apr.||N. Minsky, ""Files with semantics"", 1976 ACM SIGMOD Workshop.||F. P. Palermo, ""A database search problem"" in Information Systems COINS IV, New York:Plenum Press, 1974.||S. R. Petrick, ""On natural language based computer systems"", IBM. J. Res. Develop., July 1976.||W. J. Plath, The REQUEST system, Aug. 1975.||R. F. Simmons, ""Natural language question-answering systems: 1969"", Commun. Assoc. Comput. Mach., vol. 13, no. 1, Jan. 1970.||J. M. Smith and Y. T. Chang, ""Optimizating the performance of a relational algebra database interface"", Commun. Assoc. Comput. Mach., vol. 18, no. 10, Oct. 1975.||M. Stonebraker and E. Wong, INGRES—A relational data system, CA, Los Angeles:Electron. Res. Lab., University of California, Nov. 1974.||P. P. Uhrowczik, ""Data dictionary/directories"", IBM Syst. J., vol. 12, no. 4, Dec. 1973.||C. P. Wang and H. H. Wedekind, ""Segment synthesis in logical data base design"", IBMJ. Develop., pp. 71-77, Jan. 1975.||M. M. Zloof, ""Query by example"", Proc. AFIPS Nat. Comput. Conf., 1975-May.||",Database Skeleton and Its Application to Fuzzy Query Translation
"D.R. Musser&&Information Sciences Institute, University of Southern California, Los Angeles, CA, USA|","This paper describes the data type definition facilities of the AFFIRM system for program specification and verification. Following an overview of the system, we review the rewrite rule concepts that form the theoretical basis for its data type facilities. The main emphasis is on methods of ensuring convergence (finite and unique termination) of sets of rewrite rules and on the relation of this property to the equational and inductive proof theories of data types.",10.1109/TSE.1980.230459,IEEE Transactions on Software Engineering,"Equations,Intersymbol interference,Specification languages,System testing,Convergence,Interactive systems,Formal specifications,Message systems,Contracts","A. L. Ambler, D. I. Good, J. C. Browne, W. F. Burger, R. M. Cohen, C. G. Hoch, et al., ""Gypsy: A language for specification and implementation of verifiable programs"", Proc. ACM Conf. on Language Design for Reliable Software SIGPLAN Notices, pp. 1-10, 1977-Mar.||W. W. Bledsoe and P. Bruell, ""A man-machine theorem-proving system"", Artificial Intell., vol. 5, pp. 5 1-72, 1974.||R. S. Boyer and J. S. Moore, ""A lemma driven automatic theorem prover for recursive function theory"", Proc. IJCAI-77 Conf., vol. 1, pp. 511-519, 1977-Aug.||R. M. Burstall and J. A. Goguen, ""Putting theories together to make specifications"", Proc. 5th Int. Joint Conf. on Artificial Intelligence, pp. 1045-1058, 1977-Aug.||O. J. Dahl, Can program proving be made practical?, Norway, Oslo:Inst. Informatics, Univ. Oslo, 1978.||N. Dershowitz and Z. Manna, ""Proving termination with multiset orderings"", Commun. Ass. Comput. Mach., vol. 22, pp. 465-476, Aug. 1979.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||S. L. Gerhart and D. S. Wile, Proc. Specifications of Reliable Software Conf, 1979-Apr.-3-5.||J. A. Goguen, ""Some design principles and theory for OBJ-O A language to express and execute algebraic specifications of programs"", Proc. Int. Conf. on Math. Studies of Inform. Processing, pp. 429-475, 1978.||J. A. Goguen, J. W. Thatcher, E. G. Wagner and J. B. Wright, ""Abstract data types as initial algebras and the correctness of data representations"", Proc. Conf. on Comput. Graphics Pattern Recognition and Data Structure, pp. 89-93, 1975.||D. I. Good, R. L. London and W. W. Bledsoe, ""An interactive program verification system"", IEEE Trans. Software Eng., vol. SE-1, Mar. 1975.||J. V. Guttag, The specification and application to programming of abstract data types, 1975.||J. V. Guttag, ""Abstract data types and the development of data structures"", Commun. Ass. Comput. Mach., vol. 20, pp. 397-404, June 1977.||J. V. Guttag, ""Notes on type abstraction"", Proc. Specifications of Reliable Software Conf., 1979-Apr.-3-5.||""Notes on type abstraction (version 2)"", IEEE Trans. Software Eng., pp. 13-23.||J. V. Guttag and J. J. Homing, ""The algebraic specification of abstract data types"", Acta Inform., vol. 10, pp. 27-52, 1978.||J. V. Guttag, E. Horowitz and D. R. Musser, ""Abstract data types and software validation"", Commun. Ass. Comput. Mach., vol. 21, pp. 1048-1064, Dec. 1978.||J. V. Guttag, E. Horowitz and D. R. Musser, ""The design of data type specifications"" in Current Trends in Programming Methodology, NJ, Englewood Cliffs:Prentice-Hall, vol. IV, 1978.||Proc. 2nd Int. Conf. on Software Eng., 1976-Oct.||F. W. von Henke and D. C. Luckham, ""A methodology for verifying programs"", Proc. 1975 Int. Confi on Reliable Software, pp. 156-163, 1975-Apr.||G. Huet, Confluent reductions: Abstract properties and applications to term rewriting systems.||G. Huet and D. S. Lankford, On the uniform halting problem for term rewriting systems.||R. D. Jenks, ""The SCRATCHPAD language"", Proc. ACM SIGPLAN Symp. on Very High Level Languages SIGPLAN Notices, vol. 9, pp. 101-111, 1974-Apr.||D. E. Knuth and P. B. Bendix, ""Simple word problems in universal algebras"" in Computational Problems in Abstract Algebra, New York:Pergamon, pp. 263-297, 1970.||B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell and G. J. Popek, ""Report on the programming language Euclid"", SIGPLAN Notices, vol. 12, Feb. 1977.||D. S. Lankford, Canonical inference, Dec. 1975.||D. S. Lankford and A. M. Ballantyne, Decision procedures for simple equational theories with commutative-associative axioms: Complete sets of commutative-associative reductions, Aug. 1977.||D. S. Lankford and D. R. Musser, On semi-deciding first-order validity and invalidity, Jan. 1978.||R. Lipton and L. Snyder, ""On the halting of tree replacement systems"", Conf. on Theoretical Comput. Sci., 1977.||B. H. Liskov, A. Snyder, R. Atkinson and C. Schaffert, ""Abstraction mechanisms in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-576, Aug. 1977.||R. L. London, J. V. Guttag, J. J. Horning, B. W. Lampson, J. G. Mitchell and G. J. Popek, ""Proof rules for the programming language Euclid"", Acta Inform., vol. 10, pp. 1-26, 1978.||J. H. Morris and B. Wegbreit, ""Subgoal induction"", Commun. Ass. Comput. Mach., vol. 20, pp. 209-222, Apr. 1977.||D. R. Musser, ""A data type verification system based on rewrite rules"", Proc. 6th Texas Conf on Computing Syst., 1977-Nov.||D. R. Musser, ""On proving inductive properties of abstract data types"", Proc. 7th ACM Symp. Principles of Programming Languages, 1980-Jan.||R. Nakajima, Sypes–partial types–for program and specification structuring and a first order system iota logic, Nov. 1977.||G. Nelson and D. C. Oppen, ""A simplifier based on efficient decision algorithms"", Proc. 5th ACM Symp. on Principles of Programming Languages, 1978-Jan.||J. A. Robinson, ""A machine-oriented logic based on the resolution principle"", J. Ass. Comput. Mach., vol. 12, pp. 23-41, Jan. 1965.||B. Rosen, ""Tree-manipulating systems and Church-Rosser theorems"", J. Ass. Comput. Mach., vol. 20, pp. 160-187, Jan. 1973.||J. Spitzen and B. Wegbreit, ""The verification and synthesis of data structures"", Acta Inform., vol. 4, pp. 127-144, 1975.||M. E. Stickel and G. E. Peterson, Complete sets of reductions for equational theories with complete unification algorithms, Dep. Comput. Sd., Univ. Arizona, and Dep. Math. Sci., Univ. Missouri, Sept. 1977.||N. Suzuki, ""Verifying programs by algebraic and logical reduction"", Proc. 1975 Int. Conf. on Reliable Software, pp. 473-481, 1975-Apr.||INTERLISP Reference Manual, Oct. 1978.||D. S. Wile, POPART: Producer of parsers and related tools.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, Dec. 1976.||S. N. Zilles, An introduction to data algebra, CA, San Jose:IBM San Jose Research Lab., Sept. 1975.||",Abstract Data Type Specification in the Affirm System
"J.M. Spitzen&&Computer Science Group, Stanford Research Institute, Menlo Park, CA, USA|","The problem of applying formal techniques of program specification and verification to large complex programs is considered. It is argued that a practical solution requires a variety of techniques, including both procedural and nonprocedural specifications, hierarchical program organization, and the use of program transformations. In particular, a case is made for flexible problem-oriented choice of specification techniques and languages. These ideas are expanded by specifying a load-and-go assembler in three parts: a transduction grammar describing the correspondence between concrete and abstract syntax for assembly language programs; a set of transformations of the abstract form; and a nonconstructive axiomatic specification of the result of core assembly and loading of transformed abstract programs.",10.1109/TSE.1976.233799,IEEE Transactions on Software Engineering,"Assembly,Concrete,Command and control systems,Data processing,Degradation,Automatic programming,Computer science,Knowledge based systems,Testing","T. E. Cheatham and B. Wegbreit, ""A laboratory for the study of automatic programming"", Proc. AFIPS SJCC 40, 1972.||J. Darlington and R. Burstall, ""A system which automatically improves programs"", Proc. 3rd IJCAI, 1973-Aug.||Assembly Language Handbook, Maynard, DEC:Digital Equipment Corporation, 1972.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic Press, 1972.||D. E. Knuth, An analysis of alpha-beta pruning, Aug. 1974.||D. E. Knuth, ""Semantics of context-free languages"", Math. Syst. Theory, vol. 2, no. 2, 1968.||D. E. Knuth, ""Structured programming with goto statements"", Comput. Surveys, vol. 6, no. 4, Dec. 1974.||P. Lucas and K. Walk, ""On the formal description of PL/1"" in Annual Review In Automatic Programming, NY, Elmsford:Pergamon Press, vol. 6, 1970.||LISP 1.5 Programmer's Manual, 1962.||D. L. Parnas, ""Response to undesired events in well-structured software systems"" in Current Trends in Programming Methodology, NJ, Englewood Cliffs:Prentice-Hall, vol. 1, 1976.||L. Robinson, ""On attaining reliable software for a secure operating system"", Proc. Int. Conf. Reliable Software, 1975-Apr.||Proc. Workshop on the Feasibility of Software Certification, 1974-Nov.||",The Specification of Assemblers
"D. Teichroew&&Department of Industrial and Operations Engineering, University of Michigan, Ann Arbor, MI, USA|E.A. Hershey&&Department of Industrial and Operations Engineering, University of Michigan, Ann Arbor, MI, USA|","PSL/PSA is a computer-aided structured documentation and analysis technique that was developed for, and is being used for, analysis and documentation of requirements and preparation of functional specifications for information processing systems. The present status of requirements definition is outlined as the basis for describing the problem which PSL/PSA is intended to solve. The basic concepts of the Problem Statement Language are introduced and the content and use of a number of standard reports that can be produced by the Problem Statement Analyzer are briefly described.",10.1109/TSE.1977.229902,IEEE Transactions on Software Engineering,"Documentation,Information analysis,Information processing,Information retrieval,Assembly systems,System testing,Proposals,Hardware,Operating systems,Concrete","T. Aiken, ""Initiating an electronics program"", Proc. 7th Annu. Meeting Systems and Procedures Assoc., 1954.||B. W. Boehm, ""Software and its impact: A quantitative assess-ment"", Datamation, pp. 48-59, May 1973.||B. W. Boehm, ""Some steps toward formal and automated aids to software requirements analysis and design"", Inform. Process., pp. 192-197, 1974.||R. G. Canning, Electronic Data Processing for Business and Industry, New York:Wiley, 1956.||T. B. Glans, B. Grad, D. Holstein, W. E. Meyers and R. N. Schmidt, Management Systems, New York:Holt, pp. 340, 1968.||""The high cost of software"", proceedings of a symposium held in Monterey, 1973-Sept.-17-19.||R. H. Gregory and R. L. Van Horn, Automatic Data Processing Systems, CA, Belmont:Wadsworth Publishing Co., 1960.||W. Hartman, H. Matthes and A. Proeme, Management Information Systems Handbook, New York:McGraw-Hill, 1968.||E. A. Hershey and M. Bastarache, PSA–Command Descriptions, 1975.||Problem Statement Language–Language Reference Manual, 1975.||G. F. Hice, W. S. Turner and L. F. Cashwell, System Development Methodology, The Netherlands, Amsterdam:North‑Holland Publishing Co., pp. 370, 1974.||Hipo‑A design aid and documentation technique, NY, White Plains:IBM Corporation, Data Processing Division, 1974.||M. N. Jones, ""HIPO for developing specifications"", Datamation, pp. 112-125, Mar. 1976.||G. H. Larsen, ""Software: Man in the middle"", Datamation, pp. 61-66, Nov. 1973.||G. J. Meyers, Reliable Software Through Composite Design, New York:Mason Charter Publishers, Inc., 1975.||D. T. Ross and K. E. Schoman, ""Structured analysis for requirements definition"", Proc. 2nd Int. Conf Software Eng., 1976-Oct.-13-15.||H. W. Schrimpf and C. W. Compton, ""The first business feasibility study in the computer field"", Computers and Automation, Jan. 1969.||PSL User's Manual, 1975.||Software Development and Configuration Management Manual, Dec. 1973.||L. G. Hanscom Field, Support of Air Force automatic data processing requirements through the 1980's, June 1974.||Automated Data Systems Documentation Standards Manual, Dec. 1972.||J. D. Warnier and B. Flanagan, Entrainment de la Construction des Programs D'Informatique, Paris:Editions d'Organization, vol. I and II, 1972.||System Programming Management, System Development Corporation, Mar 1964.||F. G. Withington, The Organization of the Data Processing Function, Wiley Business Data Processing Library, 1972.||E. Yourdon and L. Constantine, Structured Design, New York:Yourdon, Inc., 1975.||",PSL/PSA: A Computer-Aided Technique for Structured Documentation and Analysis of Information Processing Systems
"Steven M. German&&Xerox Research Center, Palo Alto, CA, USA|Ben Wegbreit&&Xerox Research Center, Palo Alto, CA, USA|","Describes a prototype system Vista which provides assistance in synthesizing correct inductive assertions. Given only the source program, it is able to generate a useful class of assertions automatically. For a larger class, it is able to extend partial inductive assertions supplied by the programmer to form complete assertions from which it proves program correctness. Its synthesis methods include: symbolic evaluation in a weak interpretation, combining output assertions with loop exit information to obtain trail loop assertions, and extracting information from proofs which fail in order to determine how assertions should be strengthened.",10.1109/TSE.1975.6312821,IEEE Transactions on Software Engineering,"Junctions,Synthesizers,Prototypes,Arrays,Data mining,Testing,Generators",,A synthesizer of inductive assertions
"T.L. Booth&&Computer Science Division, Department of Electrical Engineering and Computer Science, University of Connecticut, Storrs, CT, USA|",The performance of a hardware/software system is a function of both the deterministic properties of the computation being performed and the probabilistic properties of the information sequence being processed. This paper develops the idea of a computational cost which can be used to measure system performance and shows how this cost can be related to the structure of the system and the information processed by the system. Different ways in which this cost can be used to study system performance are presented.,10.1109/TSE.1979.226496,IEEE Transactions on Software Engineering,"Optimization,Software systems,System performance,Queueing analysis,Costs,Performance analysis,Hardware,Process design,Information processing,Probability","J. L. Baer, ""A survey of some theoretical aspects of multiprocessing"", Computing Surveys, vol. 5, Mar. 1973.||B. Beizer, The Architecture and Engineering of Digital Computer Complexes, New York:Plenum, vol. 1, 1971.||T. L. Booth, Sequential Machines and Automata Theory, New York:Wiley, 1967.||T. L. Booth and R. A. Thompson, ""Applying probability measures to abstract languages"", IEEE Trans. Comput., vol. C-22, pp. 442-449, May 1973.||T. L. Booth, ""Design of minimal expected processing time state transducers"", 1974 Proc. IFIP., 1974.||K. S. Fu and T. L. Booth, ""Grammatical inference: Introduction and survey—part II"", IEEE Trans. Syst. Man Cybern., vol. SMC-5, pp. 409-423, July 1975.||E. Gelenbe and R. R. Muntz, ""Probabilistic models of computer systems–part I (exact results)"", Acta Informatica, vol. 7, pp. 35-60, 1976.||J. E. Hopcroft and J. D. Ullman, Formal Languages and Their Relation to Automata, MA, Reading:Addison-Wesley, 1969.||J. J. Horning and B. Randell, ""Process structuring"", Computing Surveys, vol. 5, Mar. 1973.||J. G. Kemeny and J. L. Snell, Finite Markov Chains, New York:Springer-Verlag, 1976.||L. Kleinrock, Queueing Systems, New York:Wiley, vol. I, 1975.||C. L. Liu, Introduction to Combinatorial Mathematics, New York:McGraw-Hill, 1968.||T. C. Lowe, ""Analysis of an information system model with transfer penalties"", IEEE Trans. Comput., vol. C-22, pp. 469-480, May 1973.||F. J. Maryanski and T. L. Booth, ""Inference of finite-state probabilistic grammars"", IEEE Trans. Comput., vol. C-26, pp. 521-536, June 1977.||R. E. Miller, ""A comparison of some theoretical models of parallel computation"", IEEE Trans. Comput., vol. C-22, pp. 710-717, Aug. 1973.||H. A. Sholl and T. L. Booth, ""Software performance modeling using computation structures"", IEEE Trans. Software Eng., vol. SE-1, pp. 414-420, Dec. 1975.||",Performance Optimization of Software Systems Processing Information Sequences Modeled by Probabilistic Languages
"P. Ancilotti&&CNR, Istituto Elaborazione dell''Informazione, Pisa, Italy|M. Boari&&Istituto di Automatica, Università di Bologna, Bologna, Italy|N. Lijtmaer&&CNR, Istituto Elaborazione dell''Informazione, Pisa, Italy|","The properties of a capability-based protection mechanism to be incorporated in a language for concurrent programming are presented. The protection mechanism is first abstractly characterized in terms of a protection model; the components of the protection mechanism, that is, the objects, subjects, and protection rules which govern the accessing to the objects by the subjects, are defined.",10.1109/TSE.1983.236166,IEEE Transactions on Software Engineering,"Access control,Protection,Computer languages,Object oriented modeling,Resource management,Operating systems,Software reliability,Mechanical factors,Object oriented programming,Dynamic programming","P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||N. Wirth, ""Modula: A language for modular multiprogramming"", Software–Practice and Experience, vol. 7, pp. 3-35, Jan. 1977.||A. K. Jones and B. H. Liskov, ""A language extension for controlling access to shared data"", IEEE Trans. Software Eng., vol. SE-2, pp. 277-285, Oct. 1976.||A. K. Jones and B. H. Liskov, ""A language extension for expressing constraints on data access"", Commun. Ass. Comput. Mach., vol. 21, pp. 358-367, May 1978.||R. B. Kieburtz and A. Silberschatz, ""Capability managers"", IEEE Trans. Software Eng., vol. SE-4, pp. 467-477, Nov. 1978.||J. R. McGraw and G. R. Andrews, ""Access control in parallel programs"", IEEE Trans. Software Eng., vol. SE-5, pp. 1-9, Jan. 1979.||B. W. Lampson, ""Protection"", Proc. 5th Annu. Princeton Conf. Inform. Sci. Syst., pp. 437-443, 1971.||W. Wulf, ""Hydra: The kemel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, pp. 337-345, June 1974.||A. Silberschatz, R. B. Kieburtz and A. J. Bernstein, ""Extending Concurrent Pascal to allow dynamic resource management"", IEEE Trans Software Eng., vol. SE-3, pp. 210-217, May 1977.||A. K. Jones, Protection in programmed systems, 1973.||T. A. Linden, ""Operating system structures to support security and reliable software"", Comput. Surveys, vol. 8, pp. 409-445, Dec. 1976.||C.A.R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 546-557, Oct. 1974.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, 1973.||B. Liskov and S. Zilles, ""Specifications techniques for data abstractions"", IEEE Trans. Software Eng., vol. SE-1, pp. 7-19, Mar. 1975.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, Dec. 1976.||F. De Remer and H. H. Kron, ""Programming-in-the-large versus programming-in-the-small"", IEEE Trans. Software Eng., vol. SE-2, pp. 80-86, June 1976.||P. Ancilotti, M. Boari, N. Lijtmaer and A. Natali, ""Linguistic mechanisms for resource management strategies"", Software–Practice and Experience, vol. 11, pp. 291-314, Mar. 1981.||B. H. Liskov and A. Snyder, ""Exception handling in CLU"", IEEE Trans. Software Eng., vol. SE-5, pp. 546-558, Nov. 1979.||J. G. Mitchell, W. Maybury and R. Sweet, Mesa Language Manual, Feb. 1978.||Reference Manual for the Ada Programming Language, July 1980.||D. K. Branstan, ""Privacy and protection in operating systems"", IEEE Computer, vol. 6, pp. 43-46, Jan. 1973.||",Language Features for Access Control
"S. Ginsburg&&Department of Computer Science, University of Southern California, Los Angeles, CA, USA|E.M. Rounds&&Technology Service Corporation, Santa Monica, CA, USA|","A conceptually simple scheme is exhibited for specifying syntactically correct programs of declarative, block-structured programming languages. The method is then demonstrated on a selected subset of PL/1. The scheme itself is based on grammar forms, a concept recently introduced to provide a unified treatment of structurally related grammars. The form grammar provides the BNF equivalent for the syntax. The interpretations of the grammar form are constructed dynamically during the scanning of the input program and map the form grammar into a context-free grammar satisfying the constraints of the given programming language.",10.1109/TSE.1978.231465,IEEE Transactions on Software Engineering,"Computer languages,Production systems,Computer science,Appraisal,Laboratories","G. V. Bochmann, ""Semantic evaluation from left to right"", Commun. Ass. Comput. Mach., vol. 19, pp. 55-62, Feb. 1976.||A. Cremers and S. Ginsburg, ""Context-free grammar forms"", J. Comput. Syst. Sci., vol. 11, pp. 86-117, Aug. 1975.||D. Crowe, ""Generating parsers for affix grammars"", Commun. Ass. Comput. Mach., vol. 15, pp. 728-734, Aug. 1972.||J. J. Donovan and A. F. Ledgard, ""A formal system for the specification of the syntax and translation of computer languages"", Proc. Fall Joint Comput. Conf. AFIPS Conf. Proc., vol. 31, pp. 553-580, 1967.||R. W. Floyd, ""On the nonexistence of a phrase-structure grammar for ALGOL 60"", Commun. Ass. Comput. Mach., vol. 5, pp. 483-484, 1962.||K. V. Hanford and C. B. Jones, Dynamic syntax: A concept for the definition of the syntax of programming languages, June 1971.||D. E. Knuth, ""Semantics of context-free languages"", Math. Syst. Theory, vol. 2, pp. 127-145, 1968.||C. H. A. Koster, ""Affix grammars"" in ALGOL 68 Implementation, Amsterdam:North-Holland, 1971.||H. F. Ledgard, ""Production systems or can we do better than BNF?"", Commun. Ass. Comput. Mach., vol. 17, pp. 94-102, Feb. 1974.||H. F. Ledgard, ""Production systems: A notation for defining syntax and translation"", IEEE Trans. Software Eng., vol. SE-3, pp. 105-124, Mar. 1977.||P. Lucas and K. Walk, ""On the formal description of PL/1"", Ann. Rev. Automat. Programming, vol. 6, pp. 105-181, 1970.||M. Marcotty, H. F. Ledgard and G. V. Bochmann, ""A sampler of formal definitions"", Computing Surveys, vol. 8, pp. 191-276, June 1976.||E. J. Neuhold, ""The formal description of programming languages"", IBM Syst. J., pp. 86-112, 1971.||A. Newell and H. Simon, Human Problem Solving, Englewood Cliffs:Prentice-Hall, 1972.||R. E. Stearns and P. M. Lewis, ""Property grammars and table machines"", Inform. Contr., vol. 14, pp. 524-549, 1969.||A. Van Wijngaarden, ""Revised report on the algorithmic language ALGOL 68"", IFIPS Conf. Proc., 1973.||D. A. Waterman, Adaptive production systems, PA, Pittsburgh:Dep. Psychology, Carnegie-Mellon University, Dec. 1974.||",Dynamic Syntax Specification Using Grammar Forms
"S.K. Basu&&Department of Computer Science, University of Nebraska, Lincolnshire, NE, USA|","One of the principal impediments to widespread use of automated program verification methodology is due to the user burden of creating appropriate inductive assertions. In this paper, we investigate a class of programs for which such inductive assertions can be mechanically generated from Input-output specifications. This class of programs, called accumulating programs, are iterative realizations of problems in which the required output information is accumulated during successive passes over the input data structures. Obtaining invariant assertions for such programs is shown to be equivalent to the problem of generalizations of specifications to that over an extended closed data domain. For this purpose, a set of basis data elements are to be conceived of as generating the extended domain. An arbitary data element would thus be considered as uniquely decomposable into a sequence of basis elements. The structural relations between the components of a data element are used to extend program behavior and thus obtain the desired invariant.",10.1109/TSE.1980.230460,IEEE Transactions on Software Engineering,"Data structures,Impedance,Computer science,Input variables,Binary trees","R. S. Boyer and J. S. Moore, ""Proving theorems about LISP functions"", J. Ass. Comput. Mach., vol. 22, pp. 129-144, Jan. 1975.||S. K. Basu and J. Misra, ""Proving loop programs"", IEEE Trans. Software Eng., vol. SE-1, pp. 76-86, Mar. 1975.||S. K. Basu and J. Misra, ""Some classes of naturally provable programs"", Proc. 2nd Int. Conf on Software Eng., 1976-Oct.||S. K. Basu and R. T. Yeh, ""Strong verification of programs"", IEEE Trans Software Eng., vol. SE-1, pp. 339-346, Sept. 1975.||R. Burstall and J. Darlington, ""A transformation system for developing recursive programs"", J. Ass. Comput. Mach., vol. 24, pp. 44-67, Jan. 1977.||S. M. German and B. Wegbreit, ""A synthesizer of inductive assertions"", IEEE Trans. Software Eng., vol. SE-1, pp. 68-75, Mar. 1975.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||PASCAL User Manual and Report, 1974.||S. Katz and Z. Manna, ""Logical analysis of programs"", Commun. Ass. Comput. Mach., vol. 19, pp. 188-206, Apr. 1976.||J. C. King, ""Symbolic execution and program testing"", Commun. Ass. Comput. Mach., vol. 19, pp. 385-394, July 1976.||J. Misra, ""Relations uniformly conserved by a loop"", Proc. Int. Symp. on Proving and Improving Programs, 1975-Dec.||J. H. Morris and B. Wegbreit, ""Subgoal induction"", Commun. Ass. Comput. Mach., vol. 20, pp. 209-222, Apr. 1977.||Z. Manna and R. Waldinger, ""Automatic synthesis of recursive programs"", Proc. SIGART/SIGPLAN Symp. Artificial Intelligence and Programming Languages.||L. Siklossy, ""The synthesis of programs from their properties and the insane heuristics"", Proc. 3rd Texas Conf. Computing Systems, 1974.||P. D. Summers, ""A methodology for LISP program construction from examples"", Proc. 3rd ACM Symp. on Principles of Programming Languages, 1975.||M. Wand, ""A new incompleteness result for Hoare's System"", J. Ass. Comput. Mach., vol. 25, pp. 168-175, Jan. 1978.||B. Wegbreit, ""The synthesis of loop predicates"", Commun. Ass. Comput. Mach., vol. 17, pp. 102-112, Feb. 1974.||B. Wegbreit, ""Complexity of synthesizing inductive assertions"", J. Ass. Comput. Mach., vol. 24, pp. 504-512, July 1977.||",A Note on Synthesis of Inductive Assertions
"C.C. Elgot&&Department of Mathematical Sciences, IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","While ""Dijkstra flow-chart schemes"" (built out of assignment statement schemes by means of composition, IF—THEN and WHILEDO) are simple and perspicuous, they lack the descriptive power of flow-chart schemes (provided additional ""variables"" are not permitted). On the other hand, the analogous multiexit composition binary alternation-conditional iteration (CACI) schemes introduced below, which are virtually as simple and perspicuous as Dijkstra schemes, describe exactly the same computational processes as flow-chart schemes (without the aid of additional variables).",10.1109/TSE.1976.233800,IEEE Transactions on Software Engineering,"Flowcharts,Computer languages,Terminology,Variable speed drives,Algorithm design and analysis,Merging","A. Ashcroft and A. Manna, ""The translation of 'go to' programs to 'while' programs"", Proc. Int. Fed. Inform. Processing Congr., vol. 1, 1972.||S. L. Bloom and C. C. Elgot, The existence and construction of free iterative theories, July 1974.||Comput. Syst. Sci..||A. Bohm and A. Jacopini, ""Flow diagrams turing machines and languages with only two formation rules"", Commun. Ass. Comput. Mach., May 1966.||A. Bruno and A. Stieglitz, ""The expression of algorithms by charts"", J. Ass. Comput. Mach., July 1972.||C. C. Elgot, ""The common algebraic structure of exit automata and machines"", Comput., Jan. 1971.||C. C. Elgot, ""Monadic computation and iterative algebraic theories"" in Logic Colloquium '73, The Netherlands, Amsterdam:North‑Holland, vol. 80, 1975.||C. C. Elgot, Matrical theories, May 1974.||J. Algebra..||D. C. Copper, ""Bohm and Jacopini's reduction of flow charts"", Commun. Ass. Comput. Mach., Aug. 1967.||D. E. Knuth, ""Structured programming with go to statements"", Comput. Surveys, Dec. 1974.||F. E. Allen, ""Control flow analysis"", SIGPLAN Notices, vol. 5, pp. 1-19, 1970.||F. T. Baker, ""Chief programmer team management of production programming"", IBM Syst. J., vol. 11, no. 1, 1972.||H. D. Mills, Mathematical foundations for structured programming, 1972.||F. T. Baker, ""Top down programming in large systems"", Debugging Techniques in Large Systems Courant Computer Science Symp., vol. 1, 1971.||M. S. Hecht and J. D. Ullman, ""Flow graph reducibility"", SIAM J. Comput., vol. 1, pp. 188-202, June 1972.||J. Cocke, ""Global common subexpression elimination"", SIGPLAN Notices, vol. 5, pp. 20-24, 1970.||J. D. Rutledge, ""On Ianov's program schemata"", J. Ass. Comput. Mach., Jan. 1964.||A. Knuth and A. Floyd, ""Notes on avoiding 'go to' statements"", Inform. Processing Lett., vol. 1, 1971.||""errata"", Inform. Processing Lett., vol. 1, 1972.||A. Luckham, A. Park and A. Paterson, ""On formalized computer programs"", J. Comput. Syst. Sci., June 1970.||S. R. Kosaraju, ""Analysis of structured programs"", Proc. Fifth Annu. Ass. Comput. Mach. Symp. Theory of Computing, 1973-May.||J. Comput. Syst. Sci., Dec. 1974.||",Structured Programming With and Without go to Statements
"T.E. Bell&&TRW Defense and Space Systems, Redondo Beach, CA, USA|D.C. Bixler&&TRW Defense and Space Systems, Redondo Beach, CA, USA|M.E. Dyer&&TRW Defense and Space Systems, Huntsville, AL, USA|","The development of system requirements has been recognized as one of the major problems in the process of developing data processing system software. We have developed a computer-aided system for maintaining and analyzing such requirements. This system includes the Requirements Statement Language (RSL), a flow-oriented language for the expression of software requirements, and the Requirements Engineering and Validation System (REVS), a software package which includes a translator for RSL, a data base for maintaining the description of system requirements, and a collection of tools to analyze the information in the data base. The system emphasizes a balance between the use of the creativity of human thought processes and the rigor and thoroughness of computer analysis. To maintain this balance, two key design principles–extensibility and disciplined thinking–were foliowed throughout the system. Both the language and the software are easily user-extended, but adequate locks are placed on extensions, and limitations are imposed on use, so that discipline is augmented rather than decreased.",10.1109/TSE.1977.229903,IEEE Transactions on Software Engineering,"Maintenance engineering,Data processing,System software,Software maintenance,Software tools,Data engineering,Systems engineering and theory,Software packages,Information analysis,Humans","Proc. Symp. on the High Cost of Software, 1973-Sept.-17-19.||B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, vol. 19, pp. 48-59, May 1973.||J. D. McGonagle, A study of a software development project, PA, Fort Washington:James P. Anderson & Co., Sept. 1971.||J. C. Bartlett, Software validation study, Mar. 1973.||T. A. Thayer, ""Understanding software through empirical reliability analysis"", Proc. 1975 Nat. Comput. Conf., pp. 335-341, 1975-June.||T. A. Thayer, Software reliability study: Final technical report, Feb. 1976.||T. E. Bell and T. A. Thayer, ""Software requirements: Are they really a problem?"", Proc. 2nd Int. Software Eng. Conf., 1976-Oct.||A. Asch, D. W. KeUiher, J. P. Locher and T. Connors, DOD weapon system software acquisition and management study volume I MITRE findings and recommendations, pp. may-1975.||A. Kossiakoff, T. P. Sleight, E. C. Prettyman, J. M. Park and P. L. Hazan, DOD weapon systems software management study, MD, Silver Spring:The Johns Hopkins Univ. Appl. Phys. Lab., June 1975.||BMDATC software development system, AL, Huntsvile:Ballistic Missile Defense Advanced Technology Center, vol. I and II, July 1975.||D. Teichroew, E. A. Hershey and M. J. Bastarache, An introduction to PSL/PSA, Ann Arbor:Univ. Michigan, Mar. 1974.||E. A. Hershey, A data base management system for PSA based on DBTG 71, Ann Arbor:Univ. Michigan, Sept. 1973.||M. W. Afford, A requirements engineering methodology for real‑ime processing requirements, pp. 60-69.||M. W. Alford and I. F. Burns, ""-nets: A graph model for real-‑time software requirements"", Proc. Symp. on Comput. Software Eng. MRI Symp. Ser., vol. XXIV.||T. E. Bell and D. C. Bixler, ""A flow-oriented requirements statement language"", Proc. Symp. on Comput. Software Eng. MRI Symp. Ser., vol. XXIV.||TRW Software Series.||O. Lecarme and G. V. Bochmann, ""A (truly) usable and portable translator writing system"" in Information Processing 74, Amsterdam:North-Holland, 1974.||F. J. Mullin, ""Software test tools"", Proc. TR W Symp. on Reliable Cost Effective Secure Software, pp. 6-47-6-48, 1974-Mar.||PASCAL: User manual and report, 1974.||F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Ass. Comput. Mach., vol. 19, pp. 137-147, Mar. 1976.||B. W. Boehm, ""Command/control requirements for future Air Force systems"" in Multi-Access Computing: Modern Research andRequirements, NJ, Rochelle Park:Hayden, pp. 17-29, 1974.||",An Extendable Approach to Computer-Aided Software Requirements Engineering
"Sanat K. Basu&&Department of Computer Science, University of Texas, Austin, Austin, TX, USA|Jayadev Misra&&Department of Computer Science, University of Texas, Austin, Austin, TX, USA|","Given a `DO WHILE' program 
<i xmlns:mml=""http://www.w3.org/1998/Math/MathML"" xmlns:xlink=""http://www.w3.org/1999/xlink"">P</i>
 and a function 
<i xmlns:mml=""http://www.w3.org/1998/Math/MathML"" xmlns:xlink=""http://www.w3.org/1999/xlink"">F</i>
 on a domain 
<i xmlns:mml=""http://www.w3.org/1998/Math/MathML"" xmlns:xlink=""http://www.w3.org/1999/xlink"">D</i>
, the authors investigate the problem of proving (or disproving) if 
<i xmlns:mml=""http://www.w3.org/1998/Math/MathML"" xmlns:xlink=""http://www.w3.org/1999/xlink"">P</i>
 computes 
<i xmlns:mml=""http://www.w3.org/1998/Math/MathML"" xmlns:xlink=""http://www.w3.org/1999/xlink"">F</i>
 over 
<i xmlns:mml=""http://www.w3.org/1998/Math/MathML"" xmlns:xlink=""http://www.w3.org/1999/xlink"">D</i>
. It is shown that if 
<i xmlns:mml=""http://www.w3.org/1998/Math/MathML"" xmlns:xlink=""http://www.w3.org/1999/xlink"">P</i>
 satisfies certain natural constraints (well behaved), then there is a loop assertion independent of the structure of the loop body, that is both necessary and sufficient for proving the hypothesis. These results are extended to classes of loop programs which are not well behaved and to FOR loops. The sufficiency of Hoare's DO WHILE axiom for well-behaved loop programs is shown. Applications of these ideas to the problem of mechanical generation of assertions is discussed.",10.1109/TSE.1975.6312822,IEEE Transactions on Software Engineering,"Context,Input variables,Erbium,Radio frequency,Indexes,Humans,Computer science",,Proving loop programs
"M.R. Woodward&&Department of Computational and Statistical Science, University of Liverpool, Liverpool, UK|M.A. Hennell&&Department of Computational and Statistical Science, University of Liverpool, Liverpool, UK|D. Hedley&&Department of Computational and Statistical Science, University of Liverpool, Liverpool, UK|","This paper discusses the need for measures of complexity and unstructuredness of programs. A simple language independent concept is put forward as a measure of control flow complexity in program text and is then developed for use as a measure of unstructuredness. The proposed metric is compared with other metrics, the most notable of which is the cyclomatic complexity measure. Some experience with automatic tools for obtaining these metrics is reported.",10.1109/TSE.1979.226497,IEEE Transactions on Software Engineering,"Fluid flow measurement,Software measurement,Programming profession,Automatic control,Software metrics,Production,Testing,Maintenance,Performance evaluation,History",,A Measure of Control Flow Complexity in Program Text
"J. Aoe&&Department of Information Science and Systems Engineering, Faculty of Engineering, University of Tokushima, Tokushima, Japan|Y. Yamamoto&&Department of Information Science and Systems Engineering, Faculty of Engineering, University of Tokushima, Tokushima, Japan|R. Shimada&&Department of Information Science and Systems Engineering, Faculty of Engineering, University of Tokushima, Tokushima, Japan|","This paper presents a practical method for constructing a more compact matrix structure of the precedence information used in a new weak precedence parsing. The parsing algorithm differs from the conventional weak precedence algorithm in that the precedence relation .> signals a sequence of reduce actions, not just one. The method can be used for any weak precedence grammars without degrading the good error detection capability of the traditional weak precedence parsers. It is shown by the empirical results that the obtained matrices are the very reasonable size and that the presented parsing algorithm is very efficient.",10.1109/TSE.1983.236167,IEEE Transactions on Software Engineering,"Computer languages,Production,Degradation,Information science,Systems engineering and theory,Error correction","R. W. Floyed, ""Syntactic analysis and operator precedence"", J. Ass. Comput. Mach., vol. 10, pp. 316-333, July 1963.||J. R. Bell, ""A new method for determining linear precedence functions for precedence grammars"", Commun. Ass. Comput. Mach., vol. 12, pp. 567-569, Oct. 1969.||D. F. Martin, ""A Boolean matrix method for the computation of linear precedence functions"", Commun. Ass. Comput. Mach., vol. 15, pp. 448-454, June 1972.||A. V. Aho and J. D. Ullman, ""Error detection in precedence parsers"", Math. Syst. Theory, vol. 7, no. 2, pp. 97-112, 1973.||A. V. Aho and J. D. Ullman, The Theory of Parsing Translation and Compiling, NJ, Englewood Cliffs:Prentice-Hall, vol. II, 1973.||A. V. Aho and J. D. Ullman, Principles of Compiler Design, MA, Reading:Addison-Wesley, 1977.||W. M. Mckeeman, J. J. Horning and D. B. Wortman, A Compiler Generator, NJ, Englewood Cliffs:Prentice-Hall, 1970.||N. Wirth and H. Weber, ""EULER–A generalization of ALGOL and its formal definition Parts I II"", Commun. Ass. Comput. Mach., vol. 9, pp. 13-23, Jan., Feb. 1966.||R. M. De Morgan, I. D. Hill and B. A. Wichman, Modified report on the algorithmic language ALGOL 60, vol. 19, pp. 365-379, Nov. 1976.||J. Mcafee and L. Presser, ""An algorithm for the design of simple precedence grammars"", J. Ass. Comput. Mach., vol. 19, pp. 385-395, July 1972.||N. Wirth, ""PL 360: A programming languages for the 360 computers"", J. Ass. Comput. Mach., vol. 15, Jan. 1968.||R. P. Lenius, Error detection and recovery for syntax directed compiler systems, 1970.||S. L. Graham and S. P. Rhodes, ""Practical syntactic error recovery"", Commun. Ass. Comput. Mach., vol. 18, pp. 639-650, Nov. 1975.||J. Aoe, Y. Yamamoto and R. Shimada, ""A practical method for reducing precedence parsers"", Trans. IECE, vol. J61-D, pp. 387-394, June 1978.||W. R. Lalonde, E. S. Lee and J. J. Horning, ""An LALR(k) parser generator"" in Information Processing 71, North-Holland, pp. 513-518, 1972.||T. Anderson, J. Eve and J. J. Horning, ""Efficient LR(1) parsers"", Acta Informatica, vol. 2, no. 1, pp. 12-39, 1973.||M. L. Joliat, ""Practical minimization of LR(k) parser tables"" in Information Processing 74, North-Holland, pp. 376-380, 1972.||",A Practical Method for Reducing Weak Precedence Parsers
"M.V. Zelkowitz&&Department of Computer Science, University of Maryland, College Park, MD, USA|H.J. Larsen&&Department of Computer Science, University of Maryland, College Park, MD, USA|","One important feature in programming language design is an appropriate data definitional facility. Criteria now recognized as important are the concepts of information hiding and data abstraction. The problem, however, is to embed these ideas into languages. Although including these ideas has often led to the design of a new language, that is not always necessary. Such facilities may be added to languages like PL/1 or Pascal. This report discusses the inclusion of such facilities within one such PL/1 compiler. While the resulting system does not have the optimal set of protection features, it does have several advantages: the base language is known to a large class of programmers, there are many such compilers already written, and the system achieves almost as much protection as is needed.",10.1109/TSE.1978.231466,IEEE Transactions on Software Engineering,"Program processors,Programming profession,Computer languages,Protection,Algorithms,Vents,Computer science,Data structures,Personnel","J. M. Aiello, An investigation of current language support for the data requirements of structured programs, Sept. 1974.||""American National Standards Committee X3J3"", Programming Language PL/1 Basis/1-12, Feb. 1975.||J. B. Dennis and E. C. van Horn, ""Programming language semantics for multiprogrammed computations"", Commun. Ass. Comput. Mach., vol. 9, pp. 143-155, 1966.||O. J. Dahl, E. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||A. K. Jones and B. Liskov, ""A language extension for controlling access to shared data"", IEEE Trans. Software Eng., vol. SE-2, pp. 277-285, Dec. 1976.||Proceedings of the ACM Symposium on Language Design for Reliable Software, 1977.||SIGPLAN Notices, Mar. 1977.||B. H. Liskov and S. N. Zilles, ""Specification techniques for data abstraction"", IEEE Trans. Software Eng., vol. SE-1, pp. 7-19, Mar. 1975.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., vol. 15, pp. 1053-1058, 1972.||The CLU Reference Manual, Sept. 1975.||N. Wirth, ""The programming language PASCAL"", ACTA Informatica, vol. 1, pp. 335-363, 1971.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, Dec. 1976.||M. Zelkowitz, ""Third generation compiler design"", Proc. ACM Nat. Conf., pp. 253-258, 1975.||M. V. Zelkowitz, ""Error checking with pointer variables"", Proc. ACM Nat. Conf., pp. 391-395, 1976.||",Implementation of a Capability-Based Data Abstraction
"M. Tamir&&Department of Applied Mathematics, Weizmann Institute of Science, Rehovot, Israel|","Most current systems for mechanical program verification are not fully automatic, since the user himself must provide the intermediate inductive assertions. This paper describes an interactive computer program, called ADI, which automatically generates the needed inductive assertions. ADI is also able to extend partial loop assertions supplied by the user to form complete assertions. The implementation (written in QLISP and INTERLISP) is based on both the algorithmic and the heuristic approaches introduced by Katz and Manna in ""Logical Analysis of Programs"" [25]. For the algorithmic subsystem ADI includes: Difference Equations Constructor, Difference Equations Solver, and Invariants from Conditional Statements Generator. The heuristic subsystem includes: Exit Rules Package, Bounding Variables Component, Strengthening Executer, Weakening Executer, and a Heuristic Invariant Matcher-which is the actual implementation of two new heuristics, MATCHPQ and MATCHPT. ADI is a small step toward interactive, practical program verification.",10.1109/TSE.1980.230461,IEEE Transactions on Software Engineering,"Difference equations,Packaging,Counting circuits,Testing,Heuristic algorithms,Algorithm design and analysis,Flowcharts,Input variables,Mathematics,Data mining","R. Balzar, Automatic programming, Sept. 1972.||S. Basu and J. Misra, ""Proving loop programs"", IEEE Trans. Software Eng., vol. SE-1, pp. 76-86, Mar. 1975.||S. Basu and J. Misra, ""Deterministic generation of inductive assertions"", IEEE Workshop on Automated Theorem Proving, 1975-June.||S. Basu and R. Yeh, ""Strong verification of programs"", IEEE Trans. Software Eng., vol. SE-1, pp. 339-346, Sept. 1975.||J. F. Benders, ""Partitioning procedures for solving mixed-variables programming problems"", Numerische Mathematik, vol. 4, pp. 238-252, 1962.||R. S. Boyer and J. S. Moore, ""Proving theorems about LISP programs"", J. Ass. Comput. Mach., vol. 22, pp. 129-145, Jan. 1975.||M. Caplain, ""Finding invariant assertions for proving programs"", Proc. ICRS SIGPLAN Notices, vol. 10, pp. 165-171, 1975-June.||C. L. Chang, A test-oriented method for generating inductive assertions in program verification, CA, San Jose:IBM Res. Lab., Dec. 1974.||T. S. Chow, ""A generalized assertion language"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct-13-15.||L. P. Deutsch, An interactive program verifier, 1973.||J. W. Duran, A study of loop invariants and automatic program synthesis, Software Eng. and Systems Lab. and Dep. Comput. Sci., Univ. of Texas at Austin, 1975.||B. Elspas, The semiautomatic generation of inductive assertions for proving program correctness, July 1974.||B. Elspas, An interactive system for the verification of computer programs, 1973.||G. W. Ernst and R. J. Hookway, Formulating inductive assertions for program verification.||R. W. Floyd, ""Assigning meaning to programs"", Proc. Symp. Applied Math., vol. 19, pp. 19-32, 1967.||M. German and B. Wegbreit, ""A synthesizer of inductive assertions"", IEEE Trans. Software Eng., vol. SE-1, pp. 68-75, 1975.||R. E. Gomory, ""An algorithm for integer solutions to linear programs"" in Recent Advances in Mathematical Programming, New York:McGraw-Hill, 1963.||D. I. Good, R. L. London and W. W. Bledsoe, ""An interactive program verification system"", IEEE Prans. Software Eng., vol. 1, 1975.||M. W. Green, The use of difference equations as an aid to specifying assertions from Research in interactive program proving techniques, May 1972.||I. Greif and R. Waldinger, ""A more mechanical heuristic approach to program verification"", Proc. Int. Symp. Programming, pp. 83-90, 1974-Apr.||R. J. Hookway, A program verification system, OH, Cleveland:Dep. Comput. Eng., Case Western Reserve Univ.||S. Katz, Invariants and the logical analysis of programs, Sept. 1976.||S. Katz and Z. Manna, ""A heuristic approach to program verification"", Proc. 3rd Int. Conf on Artificial Intelligence, pp. 500-512, 1973-Aug.||S. Katz and Z. Manna, ""Logical analysis of programs"" in Lecture Notes, The Weizmann Institute of Science, Nov.-Dec. 1974.||S. Katz and Z. Manna, ""Logical analysis of programs"", Commun. Ass. Comput. Mach., vol. 19, pp. 188-206, Apr. 1976.||J. King, A program verifier, 1969.||B. Liskov and S. Zilles, ""Specification techniques for data abstraction"", Proc. ICRS SIGPLAN Notices, vol. 19, pp. 77-87, 1975-June.||R. L. London, ""A view of program verification"", Proc. ICRS SIGPLAN Notices, vol. 10, pp. 534-545, 1975-June.||T. Lyons and J. Bruno, An interactive system for program verification, NJ, Princeton:Dep. Electrical Eng., Comput. Sci. Lab., Princeton Univ., 1971.||Z. Manna and R. J. Waldinger, Is 'sometime' sometimes better than 'always'? Intermittent assertions in proving program correctness, June 1976.||E. Marmier, ""A program verifier for PASCAL"", 1974 Proc. IFIP Congr., pp. 177-181.||J. Misra, ""Relations uniformly conserved by a loop"", Proc. Int. Symp. Proving and Improving Programs, 1975-July.||M. S. Moriconi, Toward the interactive synthesis of assertions, Oct. 1974.||J. F. Rulifson, QA4: A procedural calculus for intuitive reasonings, CA, Menlo Park:Stanford Artificial Intelligence Center, Nov. 1972.||N. Suzuki, ""Verifying programs by algebraic and logical reduction"", Proc. ICRS SIGPLAN Notices, vol. 10, pp. 473-481, 1975-June.||M. Tamir, ADI-Automatic derivation of invariants, Aug. 1976.||INTERLISP Reference Manual, Oct. 1974.||R. W. Topor and R. M. Burstall, Verification of programs by symbolic execution, Dec. 1973.||R. J. Waldinger and K. N. Levitt, ""Reasoning about programs"", Artificial Intelligence, vol. 5, pp. 235-316, 1974.||B. Wegbreit, ""The synthesis of loop predicates"", Commun. Ass. Comput. Mach., vol. 17, pp. 102-112, Feb. 1974.||",ADI: Automatic Derivation of Invariants
"J.-L. Baier&&Department of Computer Science, University of Washington, Seattle, WA, USA|G.R. Sager&&Department of Computer Science, University of Waterloo, Waterloo, ONT, Canada|","Replacement algorithms for virtual memory systems are typically based on temporal measures of locality, while predictive loading and program restructuring are based on spatial measures of locality. This paper suggests some techniques for dynamically improving the spatial locality of a program via predictive loading and virtual space restructuring, and presents the results of applying these techniques to actual programs. Bounds are derived for the performance of the methods.",10.1109/TSE.1976.233801,IEEE Transactions on Software Engineering,"Hardware,Heuristic algorithms,Computer science,Prediction algorithms,Statistics,Performance gain,Terminology,Writing,Costs","L. A. Belady, ""A study of replacement algorithms for a virtual storage computer"", IBM Syst. J., vol. 5, no. 2, pp. 78-101, 1966.||T. C. Chen, ""Distributed intelligence for user-oriented computing"", 1972 Fall Joint Computer Conf. AFIPS Conf. Proc., vol. 41, pp. 1049-1056, 1972.||E. G. Coffman and P. Denning, Operating System Theory, NJ, Englewood Cliffs:Prentice-Hall, 1973.||P. J. Denning, ""The working set model for program behavior"", Commun. ACM, vol. 11, no. 5, pp. 323-333, 1968.||P. J. Denning, ""Virtual memory"", Comput. Surveys, vol. 2, no. 3, pp. 153-189, 1973.||D. Ferrari, ""Improving locality by critical working sets"", Commun. ACM, vol. 17, pp. 614-621, Nov. 1974.||D. J. Hatfield and J. Gerald, ""Program restructuring for virtual memory"", IBM Syst. J., vol. 10, no. 3, pp. 168-192, 1971.||M. Joseph, ""An analysis of paging and program behavior"", Comput. J., vol. 13, no. 1, pp. 48-54, 1970.||D. J. Kuck and D. H. Lawrie, ""The use and performance of memory hierarchies: A survey"", Software Engineering, pp. 45-77, 1969.||P. Lewis and G. Shedler, ""Empirically derived micromodels for sequences of page exceptions"", IBM J. Res. Develop., no. 17, pp. 86-100, Mar. 1973.||S. E. Madnick, Storage hierarchy systems, 1973.||R. L. Mattson, J. Gecsei, D. R. Slutz and I. L. Traiger, ""Evaluation techniques for storage hierarchies"", IBM Syst. J., vol. 9, no. 2, pp. 78-117, 1970.||J. E. Morrison, ""User program performance in virtual storage systems"", IBMSyst. J., vol. 12, no. 3, pp. 216-237, 1973.||G. Sager, Dynamic storage allocation in a paged virtual memory, 1972.||",Dynamic Improvement of Locality in Virtual Memory Systems
"M.W. Alford&&TRW Defense and Space Systems, Huntsville, AL, USA|","This paper describes a methodology for the generation of software requirements for large, real-time unmanned weapons systems. It describes what needs to be done, how to evaluate the intermediate products, and how to use automated aids to improve the quality of the product. An example is provided to illustrate the methodology steps and their products and the benefits. The results of some experimental applications are summarized.",10.1109/TSE.1977.233838,IEEE Transactions on Software Engineering,"Software performance,Real time systems,Weapons,Software development management,Engineering management,Data processing,Hardware,Application software,Missiles,Space technology","W. W. Royce, ""Software requirements analysis sizing and costing"" in Practical Strategies for Developing Large Software Systems, MA, Reading:Addison-Wesley, 1975.||B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, vol. 19, pp. 48-59, May 1973.||DOD weapon systems software management study, June 1975.||Proc. Software Management Conf., 1976.||Management of computer resources in major defense systems, Dep. of Defense, Apr. 1976.||C. G. Davis and C. R. Vick, The software development system, pp. 69-84.||I. F. Burns, Current software requirements engineering technology, AL, Huntsville:TRW Systems Group, Aug. 1974.||T. E. Bell and T. A. Thayer, ""Software requirements: Are they really a problem?"", Proc. 2nd Int. Software Engineering Conf., 1976-Oct.||M. W. Alford and I. F. Burns, ""An approach to stating real-time processing requirements"", Conf. Petri Nets and Related Methods, 1975-July-1-3.||M. W. Alford and I. F. Burns, ""R-Nets: A graph model for real‑time software requirements"", MRI Conf. Software Engineering, 1976-Apr.||T. E. Bell and D. C. Bixler, ""A flow-oriented requirements statement language"", MRI Conf. Software Engineering, 1976-Apr.||T. E. Bell, D. C. Bixler and M. E. Dyer, An extendable approach to computer-aided software requirements engineering, pp. 49-60.||D. W. Meseke, ""Safeguard data processing system: The data processing system performance requirements in retrospect"", Bell Syst. Tech. J. special suppl., 1975.||F. J. Buckley, ""Software testing–A–rt from the field"", IEEE Symp. Computer Software Reliability, 1973-May-2.||J. D. McGonagle, A study of a software development project, J. P. Anderson and Co., Sept. 1971.||Military standard specification practices, Oct. 1968.||V. C. Cerf, Mulitprocessors semaphores and a graph model of computation, Apr. 1972.||W. P. Stevens, G. F. Myers and L. C. Constantine, ""Structured design"", IBMSys. J., vol. 13, no. 2, pp. 115-139, 1974.||",A Requirements Engineering Methodology for Real-Time Processing Requirements
"J. Richard Kane&&Department of Computer Sciences, Northwestern University, Evanston, IL, USA|Stephen S. Yau&&Departments of Computer Sciences and Electrical Engineering, Northwestern University, Evanston, IL, USA|","A graph theoretic model for software systems is presented which permits a system to be characterized by its set of allowable execution sequences. It is shown how a system can be structured so that every execution sequence affected by a control fault is obviously in error, i.e., not in the allowable set defined by the system model. Faults are detected by monitoring the execution sequence of every transaction processed by the system and comparing its execution sequence to the set of allowable sequences. Algorithms are presented both for structuring a system so that all faults can be detected and for fault detection concurrent with system operation. Simulation results are presented which support the theoretical development of this paper.",10.1109/TSE.1975.6312823,IEEE Transactions on Software Engineering,"Fault detection,Software systems,Hardware,Program processors,Abstracts,Process control",,Concurrent software fault detection
"D.W. Clark&&Xerox Palo Alto Research Center, Palo Alto, CA, USA|","This paper is an empirical study of how three large Lisp programs use their list structure during execution. Most list-cell references are due to the functions car and cdr, which are executed about equally often and greatly outnumber other primitive functions. Executions of cdr yield the atom NIL about 10 to 20 percent of the time, and nearby list cells most of the rest of the time. Executions of car yield atoms, small integers, and list cells in varying proportions in the three progrms. Atom references by car tend to concentrate on a small number of atoms. The function rplacd increases static pointer locality, but rplaca is used idiosyncratically. Repeated reference to list cells is likely: over half of all references were to one of the ten most recently referenced cells. Linearization is the rearrangement of lists so that consecutive cdr's are adjacent in memory whenever possible. This property deteriorates dowly after a list structure is linearized. If all of a program's lists are linearized, page faults are reduced slightly, but because of the high cost of a fault this small reduction has a large effect.",10.1109/TSE.1979.226495,IEEE Transactions on Software Engineering,"Atomic measurements,Costs,Displays,Terminology,Operating systems,Monitoring,Chemicals,Speech,Fasteners,Instruments","M. Bates, ""The use of syntax in a speech understanding system"", IEEE Trans. Acoustics Speech and Signal Processing, vol. ASSP-23, pp. 112-117, Feb. 1975.||D. G. Bobrow and D. L. Murphy, ""The structure of a Lisp system using two level storage"", Commun. Ass. Comput. Mach., vol. 10, pp. 155-159, Mar. 1967.||D. G. Bobrow, J. D. Burchfiel, D. L. Murphy and R. S. Tomlinson, ""TENEX a paged time sharing system for the PDP-10"", Commun. Ass. Comput. Mach., vol. 15, pp. 135-143, Mar. 1972.||D. G. Bobrow, ""A note on hash linking"", Commun. Ass. Comput. Mach., vol. 18, pp. 413-415, July 1975.||R. Bobrow and M. Grignetti, Interlisp performance measurements, June 1976.||D. W. Clark, List structure: Measurements algorithms and encodings, Aug. 1976.||D. W. Clark and C. C. Green, ""An empirical study of list structure in Lisp"", Commun. Ass. Comput. Mach., vol. 20, pp. 78-87, Feb. 1977.||DECsystem-10 Assembly Language Handbook, MA, Maynard:Digital Equipment Corp., 1973.||R. L. Mattson, J. Gecsei, D. R. Slutz and I. L. Traiger, ""Evaluation techniques for storage hierarchies"", IBM Syst. J., vol. 9, pp. 78-117, 1970.||LISP 1.5 Programmer's Manual, 1962.||M. L. Minsky, A LISP garbage collector algorithm using serial secondary storage, MA, Cambridge:M.I.T. Project MAC, M.I.T., Dec. 1963.||E. Sacerdoti, ""The nonlinear nature of plans"", Proc. Fourth IJCAI, pp. 206-214, 1975.||D. H. Smith, L. M. Masinter and N. S. Sridharan, ""Heuristic DENDRAL: Analysis of molecular structure"" in Computer Representation and Manipulation of Chemical Information, New York:Wiley, 1974.||INTERLISP Reference Manual, 1974.||G. K. Zipf, Human Behavior and the Principle of Least Effort, MA, Cambridge:Addison-Wesley, 1949.||",Measurements of Dynamic List Structure Use in Lisp
"L.A. Rowe&&Department of Electrical Engineering and Computer Science, University of California, Berkeley, CA, USA|K.A. Shoens&&Department of Electrical Engineering and Computer Science, University of California, Berkeley, CA, USA|","This paper describes a screen-oriented I/O facility, designed as a part of Rigel, a high-level database programming language. The novel features of the I/O facility, called Screen Rigel, include the use of formatting techniques to lay out text and data on the screen. Applications written in Screen Rigel can directly access the database using the database constructs already in Rigel. In addition, Screen Rigel has access to the data dictionary so the programmer can use the data descriptions in the database instead of respecifying them. These features make Screen Rigel programs simple to write and highly data and terminal independent.",10.1109/TSE.1983.236168,IEEE Transactions on Software Engineering,"Computer languages,Cathode ray tubes,Programming profession,Spatial databases,Dictionaries,Database systems,High level languages,Two dimensional displays,Protection","J. Sutton and R. Sprague, A study of display generator and management in interactive business applications, Nov. 1973.||L. Rowe and K. Shoens, ""Data abstraction views and updates in RIGEL"", Proc. 1979 ACM-SIGMOD Int. Conf. on Mgt. of Data, 1979-May.||L. Rowe, J. Cortopassi, D. Doucette and K. Shoens, RIGEL language specifications, Berkeley:Dep. Elec. Eng. Comput. Sci., Univ. California, Jan. 1980.||K. Shoens, A RIGEL translator, Apr. 1981.||J. Lafuente and D. Gries, ""Language facilities for programming user-computer dialogues"", IBM J. Res. Develop., vol. 22, Mar. 1978.||HP 3000 computer system VIEW/3000 reference manual, 1979.||PASCAL User Manual and Report, 1975.||D. McLeod, ""High level definition of abstract domains in a relation data base system"", Comput. Languages, vol. 2, pp. 61-73, 1977.||M. Stonebraker, ""Implementation of integrity constraints and views by query modification"", Proc. 1975 SIGMOD Conf., pp. 65-78.||Display management system/virtual storage general information manual, 1979.||M. M. Zloof, ""Query by example"", Proc. NCC, vol. 44, 1975.||S. P. DeJong, ""The system for business automation (SBA): A unified application development system"", Inform. Processing, 1980.||",Programming Language Constructs for Screen Definition
"J. Misra&&Department of Computer Science, University of Technology, Austin, TX, USA|",A technique is presented which is shown to be useful in designing algorithms which operate on sequences (strings). A generalization of the principle is presented for more general data structure.,10.1109/TSE.1978.231467,IEEE Transactions on Software Engineering,"Algorithm design and analysis,Problem-solving,Humans,Data structures,Programming profession,Dynamic programming,Design automation,Computer science","A. V. Aho, J. E. Hopcroft and J. D. Ullman, The Design and Analysis of Computer Algorithms, MA, Reading:Addison-Wesley, 1974.||R. E. Bellman, Dynamic Programming, NJ, Princeton:Princeton Univ., 1957.||E. W. Dijkstra, O. J. Dahl and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||M. L. Fredman, ""On computing the length of the longest increasing subsequence"", Discrete Mathematics, vol. 11, pp. 29-35, Jan. 1975.||D. E. Knuth, Art of Computer Programming: Sorting and Searching, MA, Reading:Addison-Wesley, 1972.||D. Matuszek, personal communication.||J. Misra, ""A principle of algorithm design on limited problem domain"", Proc. 13th Annu. Design Automation Conf., 1976-June.||T. G. Szymanski, A special case of the maximum common subsequence problem, 1975.||R. E. Tarjan, ""Depth first search and linear graph algorithms"", SIAM J. Comput., vol. 1, no. 2, June 1972.||",A Technique of Algorithm Construction on Sequences
"A.P. Ravn&&Institute of Datalogy, University of Copenhagen, Copenhagen, Denmark|",A driver is the part of an I/O system used for processing of an I/O request for a specific channel. The interaction of the CPU with a channel is described through the monitor concept of Hoare and Brinch Hansen. The implementation of monitors using hardware interrupt facilities is described. The resulting device monitor is compared pared with the device processes of Wirth's Modula. The concept is illustrated through an extension to Concurrent Pascal with examples drawn from the PDP11 system. Problems of missing interrupts and power failure are also discussed.,10.1109/TSE.1980.230462,IEEE Transactions on Software Engineering,"Registers,Hardware,Computer languages,Centralized control,Process control,Kernel,Fault tolerant systems,Power system modeling,Software engineering","P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, July 1972.||P. Brinch Hansen, Concurrent Pascal Report, June 1975.||P. Brinch Hansen, The Architecture of Concurrent Programs, NJ, Englewood Cliffs:Prentice-Hall, July 1977.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, 199 207.||The NBB Semaphore Monitor User's Manual, 1972.||N. Wirth, ""On multiprogramming machine coding and computer organization"", Commun. Ass. Comput. Mach., vol. 12, pp. 489-498, Sept. 1969.||N. Wirth, ""Modula: A language for modular multiprogramming"", Software–Practice and Experience, vol. 7, pp. 3-36, Jan. 1977.||N. Wirth, ""The use of Modula"", Software–Practice and Experience, vol. 7, pp. 37-66, Jan. 1977.||N. Wirth, ""Design and implementation of Modula"", Software–Practice and Experience, vol. 7, pp. 67-93, Jan. 1977.||",Device Monitors
"R. Williams&&IBM Research Laboratory, San Jose, CA, USA|G.M. Giddings&&IBM Research Laboratory, San Jose, CA, USA|","The picture-building system (PBS) deals with the problem of creating and manipulating data structures for applications using computer graphics. PBS has a data definition facility that enables one to specify structures needed for a given application, a manipulation facility for loading and editing the data, and displaying the image stored in the structures. The structures are defined in a relational data base and allow graphical attributes to be specified in the same way as nongraphical attributes. There is a deliberate attempt to separate data from programs which is in accord with other data-base developments. It is also possible to mix text and vector data with raster scan data which we have found to be very useful in some graphical applications. Some examples and a brief description of our color display system will be given.",10.1109/TSE.1976.233526,IEEE Transactions on Software Engineering,"Application software,Data structures,Computer graphics,Displays,Interactive systems,Buildings,Pattern recognition,Algorithms,Packaging,Engines","I. E. Sutherland, ""Hardware and software–Final report"", Special Conf. Computer Graphics as Related to Engineering Design, vol. 2, 1973.||S. A. Bana.||R. Williams, ""On the application of relational data structures in computer graphics"", Proc. 1974 IFIP Congress, pp. 722-726.||R. Williams, A systematic method for the creation of data structures in computer graphics applications, Apr. 1971.||I. E. Sutherland and I. E. Sketchpad, ""A man-machine graphical communication system"", 1963 Spring Joint Computer Conf. AFIPS Conf. Proc., vol. 23, pp. 329-346, 1963.||T. G. Hagan, R. J. Nixon and L. J. Schaeffer, ""The adage graphics terminal"", 1968 Fall Joint Computer Conf. AFIPS Conf. Proc., vol. 33, pp. 179-191, 1968.||T. L. Kunii, S. Weyl and J. M. Tenebaum, ""A relational data base schema for describing complex pictures with color and texture"", Proc. 2nd Joint Conf. Pattern Recognition, pp. 310-316, 1974-Aug.||",A Picture-Building System
"C.G. Davis&&U. S. Army Ballistic Missile Defense Advanced Technology Center, Huntsville, AL, USA|C.R. Vick&&U. S. Army Ballistic Missile Defense Advanced Technology Center, Huntsville, AL, USA|","This paper contains a discussion of the Software Development System (SDS), a methodology addressing the problems involved in the development of software for ballistic missile defense systems. These are large real-time, automated systems with a requirement for high reliability. The SDS is a broad approach attacking problems arising in requirements generation, software design, coding, and testing. The approach is highly requirements oriented and has resulted in the formulation of structuring concepts, a requirements statement language, process design language, and support software to be used throughout the development cycle. This methodology represents a significant advance in software technology for the development of software for a class of systems such as BMD. The support software has been implemented and is undergoing evaluation.",10.1109/TSE.1977.233839,IEEE Transactions on Software Engineering,"Programming,Missiles,Software engineering,Military computing,Sensor arrays,Magnetic resonance imaging,Data processing,Software testing,Space technology,Writing","Software Management Conference abridged proceedings, 1976.||C. R Vick, ""Specifications for reliable software"", EASCON '74, 1974-Oct.||""Safeguard data-processing system"", Bell Syst. Tech. J., 1975.||R. Williams, ""Managing the development of reliable software"", 1975 Int. Conf. Reliable Software, 1975-Apr.||""The BMDATC software development system"", BMDATC, vol. I and II, July 1976.||M. W. Alford, ""A requirements engineering methodology for real-time processing requirements"", IEEE Trans. Software Eng., vol. SE-3, pp. 60-69, Jan. 1977.||T. E. Bell, D. C. Bixler and M. E. Dyer, ""An extendable approach to computer-aided software requirements engineering"", IEEE Trans. Software Eng., vol. SE-3, pp. 49-60, Jan. 1977.||K. Salter, ""A methodology for decomposing system requirements into data processing requirements"", Proc. 2nd Int. Software Eng. Conf., 1976-Oct.||E. Balkovich and G. Engleberg, ""Research toward a technology to support the specification of data processing system performance requirements"", Proc. 2nd Int. Software Eng. Conf., 1976-Oct.||P. Belford, ""Specifications–A key to effective software development"", Proc. 2nd Int. Software Eng. Conf., 1976-Oct.||S. N. Gaulding and J. D. Lawson, ""Process design engineering–A methodology for real-time software requirements"", Proc. 2ndlnt. Software Eng. Conf., 1976-Oct.||R. Koppang, ""Process design system–An integrated set of sof development tools"", Proc. 2nd Int. Software Eng. Conf., 1976-Oct.||D. W. Cooper, ""Adaptive testing"", Proc. 2nd Int. Software Eng. Conf., 1976-Oct.||J. Benson and R. Melton, ""A laboratory for the development and evaluation of BMD software quality enhancement techniques"", Proc. 2nd Int. Software Eng. Conf., 1976-Oct.||DOD weapons systems software management study, The Johns Hopkins Univ., Applied Physics Lab., May 1975.||""DOD weapons systems software acquisition and management study"" in MITRE Findings and Recommendations, MITRE Corp., vol. I, May 1975.||S. J. Werson, D. W. Cooper and R. L. Stone, Hierarchical verification and validation software design, General Res. Corp., vol. 2, Mar. 1976.||D. Teichroew, ""A survey of languages for stating requirements for computer-based information systems"", 1972 Fall Joint Comput. Conf. AFIPS Conf. Proc., vol. 41, pp. 1203-1224, 1972.||J. D. Couger, ""Evolution of business systems analysis techniques"", Computing Surveys, pp. 167-198, Sept. 1973.||F. Burns, Current software requirements engineering technology, AL, Huntsville:TRW Systems Group, Aug. 1974.||D. Riefer, ""Software specifications: A tutorial"", in Proc. COMPCOM 76, 1976-Sept.||B. Langefors, ""Information system design computations using generalized matrix algebra"", BIT, vol. 5, pp. 96-1 21, 1965.||The Time Automated Grid System (TAG): Sales and Systems Guide, IBM, May 1971.||HIPO: Design Aid and Documentation Tool, IBM, 1973.||D. Tiechroew, E. Hershey and M. Bastarache, ""An introduction to PSL/PSA"", ISDOS Working Paper 86, 1974-Mar.||C. W. Rose, ""LOGOS and the software engineer"", 1972 Fall Joint Comput. Conf. AFIPS Conf. Proc., vol. 41, pp. 311-323, 1972.||R. T. Burger, ""AUTASIM: A system for computerized assembly of simulation models"", Winter Simulation Conf., 1974-Jan.||B. W. Boehm, ""A concept of model driven software"", Proc. TRW Symp. Reliable Cost Effective Secure Software, 1974-Mar.||J. F. Nunnamaker, ""A methodology for the design and optimization of information processing systems"", 1971 Fall Joint Comput. Conf. AFIPS Conf. Proc., vol. 28, 1971.||A Users Guide to the Threads Management System, Computer Sciences Corp., Nov. 1973.||F. T. Baker, ""Chief programmer team management of production programming"", IBM Syst. J., vol. 11, pp. 56-73, 1972.||M. Hamilton and S. Zeldin, ""Higher order software–A methodology for defining software"", IEEE Trans. Software Eng., pp. 9-32, Mar. 1976.||M. Hamilton and S. Zeldin, The foundations for axes: a specification language based upon completeness of control, The Charles Stark Draper Laboratory, Inc., Mar. 1976.||D. Ross and K. Shoman, ""Structured analysis for requirements definition"", Proc. 2nd lnt. Software Eng. Conf., 1976-Oct.||SADTTM The Sofrech Approach to System Development, SofTech, The Software Technology Company, Jan. 1976.||T. Bell and T. Thayer, ""Software requirements: Are they really a problem?"", Proc. 2nd lnt. Software Eng. Conf., 1976-Oct.||T. Thayer, Understanding software through analysis of empirical data, TRW Software, May 1975.||The Development of a Software Theory to Classify and Detect Software Errors, Mar. 1974.||DPSPR final report, Apr. 1976.||Data processing system requirements, June 1976.||System decomposition technology, Apr. 1976.||L. Peters and L. Tripp, ""Is software design wicked?"", Datamation, pp. 127-129, May 1976.||PASCAL Users Manual and Report, 1974.||""Process design methodology"" in Process Design Language Specffications, AL, Huntsville:Texas Instruments, vol. 1, Dec. 1975.||J. Lawson, Baseline software process productivity and error analysis, AL, Huntsville:Texas Instruments, Apr. 1976.||D. F. Palmer, SETS 1 software design specifications, General Research Corp., July 1972.||",The Software Development System
"K. Mani Chandy&&Department of Computer Sciences, University of Texas, Austin, Austin, TX, USA|James C. Browne&&Department of Computer Sciences, University of Texas, Austin, Austin, TX, USA|Charles W. Dissly&&Department of Computer Sciences, University of Texas, Austin, Austin, TX, USA|Werner R. Uhrig&&Department of Computer Sciences, University of Texas, Austin, Austin, TX, USA|","Rollback and recovery (RR) is a method of enchancing the reliability of file or data base systems. At certain points in time, called checkpoints, a copy of the data or files is made on tape (or other storage devices). A chronological record is kept of all transactions which modify the data stored by the system; this record is called the audit trail. When an error is detected, the copy of the files or data made at the most recent checkpoint is loaded, and all transactions on the audit trail since this check point are reprocessed in chronological sequence, thus recovering from the error. This paper presents models and techniques which aid in determining optimal times for checkpoints.",10.1109/TSE.1975.6312824,IEEE Transactions on Software Engineering,"Checkpointing,Analytical models,Availability,Load modeling,Software reliability,Computational modeling",,Analytic models for rollback and recovery strategies in data base systems
"J. Bicevskis&&Department of Computer Science, Latvian State University, Riga, Latvia|J. Borzovs&&Department of Computer Science, Latvian State University, Riga, Latvia|U. Straujums&&Department of Computer Science, Latvian State University, Riga, Latvia|A. Zarins&&Department of Computer Science, Latvian State University, Riga, Latvia|E.F. Miller&&Software Research Associates, San Francisco, CA, USA|","The possibility of automatic construction of a complete set of program tests is considered. A test set system is said to be complete if every feasible program branch (segment) is executed by it. The complete test set construction algorithm for commercially oriented data processing programs is outlined, and the results of its functioning on real programs are analyzed.",10.1109/TSE.1979.226498,IEEE Transactions on Software Engineering,"Data processing,Debugging,Cascading style sheets,System testing,Logic testing,Automatic testing,Algorithm design and analysis,Programming profession,Terminology,Problem-solving","J. M. Barzdin, J. J. Bičevskis and A. A. Kalninsh, ""Construction of complete sample system for testing correctness of programs"", Ucenye Zapiski Latv. Gos. Univ. (Riga Latvia), vol. 210, pp. 152-188, 1974.||A. A. Kalninsh, J. J. Bičevskis and J. M. Barzdin, ""Solvable and unsolvable cases of the problem of construction of a complete sample system"", Ucenye Zapiski Latv. Gos. Univ. (Riga Latvia), vol. 210, pp. 188-206, 1974.||E. F. Miller and M. R. Paige, ""Automatic generation of software test-cases"", Eurocomp Conf. Proc. 1974, pp. 1-12, 1974.||J. M. Barzdin, J. J. Bičevskis and A. A. Kalninsh, ""Construction of complete sample systems for correctness testing"" in Mathematical Foundations of Computer Science, Berlin:Springer, pp. 1-12, 1975.||J. S. King, ""A new approach to program testing"", Proc. 1975 Int. Conf. on Reliable Software, 1975-Apr.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-559, May 1975.||A. P. Ershov, ""A history of computing in the USSR"", Datamation, vol. 21, pp. 80-88, Sept. 1975.||W. E. Howden, Symbolic testing and the DISSECT symbolic evaluation system, May 1976.||L. A. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, Sept. 1976.||J. M. Barzdin, J. J. Bičevskis and A. A. Kalninsh, ""Automatic construction of complete sample system for program testing"", 1977 IFIP Congr. Proc., pp. 57-62, 1977.||J. J. Bičevskis, ""Automatic construction of sample systems"", Programmirovanije (Moscow USSR), no. 3, pp. 60-70, 1977.||",SMOTL—A System to Construct Samples for Data Processing Program Debugging
"B.E. Jacobs&&Department of Computer Science, University of Maryland, College Park, MD, USA|C.A. Walczak&&Microbial Systematics Section, National Institutes of Health DHHS, Bethesda, MD, USA|","The purpose of this paper is to introduce a Generalized-Query-By-Example (GQBE) data manipulation language (DML) that can be built on top of most existing databases (ie., relational, hierarchical, and network). The data manipulation language supports retrieval, insertion, deletion, and update operations and has a formal semantics based on database logic. It is also seen that GQBE can by used as a DML on external views of an integrated database. We also show the advantages of GQBE on heterogeneous databases over Zloof's QBE on relational external views.",10.1109/TSE.1983.236169,IEEE Transactions on Software Engineering,"Logic,Relational databases,Jacobian matrices,Information retrieval,Distributed databases,Image retrieval,Computer science,Systematics,Dentistry","ANSI/X3/SPARC: Study Group on Database Management Systems Interim Report FDT ACM-SIGMOD Bull., vol. 7, 1975.||""CODASYL Data Description Language Committee"", DDL J. Develop., 1973.||E. F. Codd, ""Relational completeness of database sublanguages"" in Data Base Systems (Courant Computer Science Symposia), NJ, Englewood Cliffs:Prentice-Hall.||C. J. Date, An Introduction to Database Systems, MA, Reading:Addison-Wesley, 1975.||B. E. Jacobs, ""On database logic"", J. Ass. Comput. Mach., vol. 29, pp. 310-332, Apr. 1982.||B. E. Jacobs, On interpretations in database logic and its applications, Sept. 1979.||B. E. Jacobs, Applications of database logic to external-to-conceptual mapping construction, Jan. 1980.||B. E. Jacobs, Applications of database logic to the view update problem, May 1980.||B. E. Jacobs, Applications of database logic to the database uniformization problem, Apr. 1980.||N. McDonald and M. Stonebraker, ""CUPID–The friendly query language"", Proc. ACM Pacific Conf., pp. 127, 1975.||U. Schauer, Ein System zur interaktiven Bearbeitung umfangreiche Messdaten, Berlin:Springer, pp. 1213, 1976.||M. E. Senko, ""The DDL in the context of a multilevel structures description: DIAM II with FORAL"" in Data Base Description, Amsterdam:North-Holland, pp. 239, 1975.||M. E. Senko, ""DIAM II with FORAL LP: Making pointed queries with light pen"" in Information Processing 77, Amsterdam:North‑Holland, pp. 635, 1977.||M. M. Zloof, ""Query-By-Example: A database language"", IBM Syst. J., vol. 16, no. 4, pp. 324-343.||",A Generalized Query-by-Example Data Manipulation Language Based on Database Logic
"W.E. Howden&&Department of Mathematics, University of Victoria, Victoria, BC, Canada|",The basic features of the DISSECT symbolic testing tool are described. Usage procedures are outlined and the special advantages of the tool are summarized. Cost estimates for using the tool are provided and the results of experiments to determine its effectiveness are included. The background and history of the development of the tool are outlined. The availability of the tool is described and a listing of reference materials is included.,10.1109/TSE.1978.231468,IEEE Transactions on Software Engineering,"System testing,Costs,Input variables,Programming profession,History,Software testing,Software tools,Arithmetic,Mathematics,Command languages","D. Knuth, ""An empirical study of FORTRAN progams"", Software Practice and Exp., vol. 1, pp. 105-134, 1971.||W. E. Howden and L. G. Stucki, ""A methodology for effective test case selection-phase III"", U. S. National Bureau of Standards, 1976.||W. E. Howden and L. G. Stucki, ""Methodology for the effective test case selection"", U. S. National Bureau of Standards, 1974.||W. E. Howden and L. G. Stucki, ""Methodology for the effective test case selection-phase II"", U.S. National Bureau of Standards, 1975.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-559, May 1975.||W. E. Howden, ""Symbolic testing and the DISSECT symbolic evaluation system"", IEEE Trans. Software Eng., vol. SE-3, pp. 266-278, July 1977.||W. E. Howden, ""Symbolic testing-design techniques costs and effectiveness"", U.S. National Bureau of Standards, 1977.||W. E. Howden, ""Reliability of symbolic evaluation"", Proc. 1st Int. Comput. Software and Appl. Conf., 1977.||L. A. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept. 1976.||J. C. King, ""Symbolic execution and program testing"", Commun. Ass. Comput. Mach., vol. 19, pp. 385-394, 1976.||R. S. Boyer, B. Elspas and K. N. Levitt, ""SELECT—A formal system for testing and debugging programs by symbolic execution"", Proc. 1975 Int. Conf. Reliable Software, pp. 234-245.||",DISSECT—A Symbolic Evaluation and Program Testing System
"H. Takahashi&&Department of Mathematics, College of Science and Engineering, Nihon University, Tokyo, Japan|","This paper proposes a control-oriented Algol-like nonprocedural language called Condor. Automatic controller theory, in company with computer science, underlies many industrial fields. Sequential control is especially important. So far, sequential-controller description methods have by and large been lmited to graphic ones, which are unreadable in the case of large controllers. A higher-level linguistic approach has been considered unlikely. This paper proposes a language widely suitable for controller architecture description. A controller, in its nature, consists of many subsystems which work in a parallel manner, interacting with one another. This paper deems that a basic component is not a process, but a response. A controller is considered to be a responding system in which every reactor works together, having a relation and communication to one another. A Condor program is a role assignment list for the reactors; it is Algol-like and nonprocedural. All the statements work at all times, interacting with one another.",10.1109/TSE.1980.230463,IEEE Transactions on Software Engineering,"Automatic control,Control systems,Programmable control,Tree data structures,Programmable logic arrays,Programmable logic devices,Relays,Equations,Communication system control,Inductors","C. E. Shannon, ""The symbolic analysis of relay and switching circuits"", AIEE Trans., vol. 57, pp. 713-723, 1938.||E. A. Weiss, ""Needed: A process language standard"", Control Engineering, vol. 15, pp. 84-87, Dec. 1968.||IEEE Trans. Ind. Electron. Contr. Instrum., vol. 15, no. 2, Dec. 1968.||IEEE Trans. Ind. Electron. Contr. Instrum., vol. 16, no. 3, Dec. 1969.||J. L. Hennessy, R. B. Kieburtz and D. R. Smith, ""TOMAL: A task-oriented microprocessor application language"", IEEE Trans. Ind. Electron. Contr. Instrum., vol. 22, pp. 283-289, Aug. 1975.||T. G. Gaspar, V. V. Dobrohotoff and D. R. Burgess, ""New process language uses English terms"", Control Engineering, vol. 15, pp. 118-121, Oct. 1968.||V. V. Dobrohotoff, L. Silver and S. Bacher, ""When user and vendor collaborate"", Control Engineering, vol. 16, pp. 124-127, Jan. 1969.||C. E. Hewitt and B. Smith, ""Toward a programming apprentice"", IEEE Trans. Software Eng., vol. 1, pp. 26-45, Mar. 1975.||E. W. Dijkstra, ""Guarded commands nondeterminancy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||S. Ohama, Sequential Control: How to Understand and Read, Tokyo:Tokyo Denki Daigaku Shuppan-kyoku, 1976.||H. Takai, Sequential Control, Tokyo:Ohm Sha, 1971.||Y. Nakajima, Sequential Control: The Elements and Applications, Tokyo:Ohm Sha, 1977.||""Tateishi Denki Sequential Control Engineers Group"" in Basic Circuits for Automatic Control, Tokyo:Gijutsu-Hyoron Sha, 1977.||N. Tinbergen, The Study of Instinct, Oxford:Oxford Univ., 1951.||L. von Bertalanffy, Robots Men and Minds, New York:Braziller, 1967.||H. Takahashi, ""The maximum invariant set of an automaton system"", Information and Control, vol. 32, pp. 307-354, Dec. 1976.||H. Takahasi, ""Undecidable questions about the maximum invariant set"", Information and Control, vol. 33, pp. 1-34, Jan. 1977.||H. Takahasi, ""Information transmission in one-dimensional cellular space and the maximum invariant set"", Information and Control, vol. 33, pp. 35-55, Jan. 1977.||Psychology Today: An Introduction, New York:Random House, 1975.||",An Automatic-Controller Description Language
"H.E. Tompkins&&Department of Computer Science, Indiana University of Pennsylvania|",,10.1109/TSE.1976.233527,IEEE Transactions on Software Engineering,"Production,Programming environments,Computer science,Assembly","B. L. Clark and J. J. Horning, ""The system language for project SUE"", ACM SIGPLAN Not., vol. 6, pp. 79-88, Oct. 1971.||","Comments on ""Structured Programming in a Production Programming Environment"""
"H.S. Stone&&Department of Electrical and Computer Engineering, University of Massachusetts, Amherst, MA, USA|","In a distributed computing system a modular program must have its modules assigned among the processors so as to avoid excessive interprocessor communication while taking advantage of specific efficiencies of some processors in executing some program modules. In this paper we show that this program module assignment problem can be solved efficiently by making use of the well-known Ford–Fulkerson algorithm for finding maximum flows in commodity networks as modified by Edmonds and Karp, Dinic, and Karzanov. A solution to the two-processor problem is given, and extensions to three and n-processors are considered with partial results given without a complete efficient solution.",10.1109/TSE.1977.233840,IEEE Transactions on Software Engineering,"Processor scheduling,Scheduling algorithm,Distributed computing,Costs,ARPANET,Computer networks,Load management,Microprocessors,Process design,Fasteners","E. G. Coffman and R. L. Graham, ""Optimal scheduling for two-processor systems"", Acta Informatica, vol. 1, pp. 200-213, 1972.||P. J. Denning, ""Properties of the working set mode"", Commun. Ass. Comput. Mach., vol. 11, pp. 323-333, May 1968.||E. A. Dinic, ""Algorithm for solution of a problem of maximum flow in a network with power estimation"", Soviet Math. Doklady, vol. 11, no. 5, pp. 1277-1280, 1970.||J. Edmonds and R. M. Karp, ""Theoretical improvements in algorithm efficiency for network flow problems"", J. Ass. Comput. Mach., vol. 19, pp. 248-264, Apr. 1972.||S. Even, Algorithmic Combinatorics, New York:Macmilan, 1973.||L. R. Ford and D. R. Fulkerson, Flows in Networks, NJ, Princeton:Princeton Univ. Press, 1962.||J. D. Foley, Graphics system modeling, Aug. 1974.||S. H. Fuller and D. P. Siewiorek, ""Some observations on semiconductor technology and the architecture of large digital modules"", Computer, vol. 6, pp. 14-21, Oct. 1973.||R. E. Gomory and T. C. Hu, ""Multiterminal network flows"", J. SIAM, vol. 9, pp. 551-570, Dec. 1961.||F. E. Heart, ""A new minicomputer/multiprocessor for the ARPA network"", Proc. 1973 Nat. Comput. Conf. AFIPS Conf. Proc., vol. 42, 1973.||T. C. Hu, Integer Programming and Network Flows, MA, Reading:Addison-Wesley, 1970.||R. E. Kahn, ""Resource-sharing computer communications networks"", Proc. IEEE, vol. 60, pp. 1397-1407, 1972-Nov.||A. V. Karzanov, ""Determining the maximal flow in a network by the method of preflows"", Soviet Math. Doklady, vol. 15, no. 2, pp. 434-437, 1974.||B. G. Prieve, ""Using page residency to select the working set parameter"", Commun. Ass. Comput. Mach., vol. 16, pp. 619-620, Oct. 1973.||G. M. Stabler, A system for interconnected processing, Oct. 1974.||R. H. Thomas, ""A resource sharing executive for the ARPANET"", Proc. 1973 Nat. Comput. Conf. AFIPS Conf. Proc., vol. 42, 1973.||R. H. Thomas and D. Henderson, ""McRoss–A multi-computer programming system"", Proc. 1972 Spring Joint Comput. Conf. AFIPS Conf. Proc., vol. 40, 1972.||A. van Dam, Computer graphics and its applications, May 1974.||W. A. Wulf and C. G. Bell, ""C.mmp–A multi-miniprocessor"", Proc. 1972 Fall Joint Comput. Conf. AFIPS Conf. Proc., vol. 41, pp. 765-777, 1972.||",Multiprocessor Scheduling with the Aid of Network Flow Algorithms
"Douglas E. Whitten&&Department of Computer Science, Pennsylvania State University, University Park, PA, USA|Paul A. D. Demaine&&Department of Computer Science, Pennsylvania State University, University Park, PA, USA|","Describes the design of a programming language suitable for writing portable, machine independent programs. Based on Fortran, and implemented at the lowest level by means of subprograms, this language (PFortran) provides features which allow programs to be designed so as to be rather insensitive to computer architecture (byte versus word addressable) or to main memory size.",10.1109/TSE.1975.6312825,IEEE Transactions on Software Engineering,"Kernel,Computers,Syntactics,Libraries,Standards,Computer languages,Memory management",,A machine and configuration independent Fortran: Portable Fortran {PFortran}
M.H. Halstead&&Special Collection on Software Science|,,10.1109/TSE.1979.234161,IEEE Transactions on Software Engineering,"Vocabulary,Equations,Volume measurement,Circuit testing,Software measurement,Art,Logic,Computer aided instruction,Measurement techniques,Computer languages","A. Fitzsimmons and T. Love, ""A review and evaluation of software science"", ACM Computing Surveys, vol. 10, pp. 3-18, Mar. 1978.||D. J. J. van der Knijff, ""Software physics and program analysis"", Australian Comput. J., vol. 10, pp. 82-86, Aug. 1978.||M. H. Halstead, ""Advances in software science"" in Advances in Computers, New York:Academic, vol. 18, 1979.||M. H. Halstead, Elements of Software Science, New York:Elsevier, 1977.||",Guest Editorial on Software Science
"P.M.G. Apers&&Informatica Wiskundig Seminarium, Vrije Universiteit, Amsterdam, Netherlands|A.R. Hevner&&The College of Business and Management, University of Maryland, College Park, MD, USA|S.B. Yao&&The College of Business and Management, University of Maryland, College Park, MD, USA|",The efficiency of processing strategies for queries in a distributed database is critical for system performance. Methods are studied to minimize the response time and the total time for distributed queries. A new algorithm (Algorithm GENERAL) is presented to derive processing strategies for arbitrarily complex queries. Three versions of the algorithm are given: one for minimizing response time and two for minimizing total time. The algorithm is shown to provide optimal solutions under certain conditions.,10.1109/TSE.1983.236170,IEEE Transactions on Software Engineering,"Query processing,Distributed databases,Delay,Heuristic algorithms,System performance,Relational databases,Database systems,Indexes,Distributed processing,Data models","P. M. G. Apers, Critique on and improvement of Hevner and Yao's distributed query processing algorithm G, The Netherlands, Amsterdam:Vrije Univ., Feb. 1979.||P. M. G. Apers, Distributed query processing: Minimum response time schedules for relations, The Netherlands, Amsterdam:Vrije Univ., Mar. 1979.||C. Baldissera, G. Bracchi and S. Ceri, ""A query processing strategy for distributed data bases"", Proc. EURP-IFIP 79, pp. 667-678, 1979.||P. A. Bernstein and D. W. Chiu, ""Using semi-joins to solve relational queries"", J. Ass. Comput. Mach., vol. 28, Jan. 1981.||P. A. Bernstein, N. Goodman, E. Wong, C. L. Reeve and J. Rothnie, ""Query processing in a system for distributed databases (SDD-1)"", ACM Trans. Database Syst., vol. 6, Dec. 1981.||D. Chiu and Y. Ho, ""A methodology for interpreting tree queries into optimal semi-join expressions"", Proc. ACM SIGMOD Conf., 1980.||W. W. Chu and P. Hurley, ""A model for optimal processing for distributed databases"", Proc. 18th IEEE COMPCON, pp. 116-122, 1979.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass Comput. Mach., vol. 13, pp. 377-387, June 1970.||R. Epstein, M. R. Stonebraker and E. Wong, ""Distributed query processing in a relational data base system"", Proc. ACM‑SIGMOD, pp. 169-180, 1978-May.||R. Epstein and M. Stonebraker, ""Analysis of distributed data base processing strategies"", Proc. Int. Conf. Very Large Data Bases, 1980.||N. Goodman and O. Shmueli, Hierarchies of database state reductions, 1980.||ACM Trans. Database Syst..||A. R. Hevner and S. B. Yao, ""Query processing in distributed database systems"", Proc. 3rd Berkeley Workshop on Distributed Data Management and Comput. Networks, 1978.||A. R. Hevner, The optimization of query processing on distributed database systems, Dec. 1979.||A. R. Hevner and S. B. Yao, ""Processing in distributed database systems"", IEEE Trans. Software Eng., vol. SE-5, pp. 177-187, May 1979.||A. R. Hevner, ""Data allocation and retrieval in distributed systems"" in Advances in Database Management, New York:Wiley, vol. II, 1983.||L. Kershberg, P. Ting and S. B. Yao, Query optimization in a Star network, 1979.||ACM Trans. Database Syst..||N. G. Toan, ""Decentralized dynamic query decomposition for distributed database systems"", Proc. ACM Pacific Conf., 1980.||G. Pelagatti and F. A. Schreiber, ""Evaluation of transmission requirements in distributed database access"", Proc. ACM SIGMOD Conf., 1979.||G. M. Sacco and S. B. Yao, ""Query optimization in distributed database systems"" in Advances in Computers, New York:Academic, vol. 21, 1982.||P. G. Selinger, M. M. Astrahan, D. D. Chamberlin, R. A. Lorie and T. G. Price, ""Access path selection in a relational database management system"", Proc. ACM SIGMOD Conf., 1979.||M. Stonebraker and E. Neuhold, ""A distributed version of INGRES"", Proc. 2nd Berkeley Workshop Distributed Data Management and Comput. Networks, pp. 19-36, 1977-May.||M. Takizawa, Operational query decomposition algorithm in distributed databases, 1980.||E. Wong and K. Youssefi, ""Decomposition–A strategy for query processing"", ACM Trans. Database Syst., vol. 1, Sept. 1976.||E. Wong, ""Retrieving dispersed data from SDD-1: A system for distributed databases"", Proc. 2nd Berkeley Workshop Distributed Data Management and Comput. Networks, pp. 217-235, 1977-May.||Z. Ozsoyoglu, Query processing in distributed relational databases, 1980.||",Optimization Algorithms for Distributed Queries
"R.A. Demillo&&School of Information and Computer Science, Georgia Institute of Technology, Atlanta, GA, USA|D. Dobkin&&Department of Computer Science, Yale University, New Heaven, CT, USA|R.J. Lipton&&Department of Computer Science, Yale University, New Heaven, CT, USA|","Users can compromise data bases by asking a series of questions, even when the data bases are allowed to lie.",10.1109/TSE.1978.231469,IEEE Transactions on Software Engineering,"Remuneration,Protection,Computer science,Mathematics,Protocols,Law,Legal factors","R. Conway and D. Strip, ""Selective partial access to a data base"", Proc. ACM 1976 Nat. Conf., pp. 207-215, 1976-Oct.||D. Dobkin, A. Jones and R. Lipton, ""Secure data bases: Protection against user inference"", ACM Trans. Data Base Syst..||M. Hall, Combinatorial Theory, Ginn and Blaisdell, 1967.||J. Kam and J. Ullman, ""A model of statistical databases and their security"", ACM Trans. Data Base Syst., vol. 2, pp. 1-10, Mar. 1977.||D. Knuth, ""Semi-numerical algorithms"" in The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 2, 1969.||P. Erdös and J. Spencer, Probabilistic Methods in Combinatorics, New York:Academic, 1974.||R. DeMillo, D. Dobkin and R. Lipton, ""Combinatorial inference"", Proc. Allertion Conf. Commun. Control and Computing, 1977.||",Even Data Bases That Lie Can Be Compromised
"P.J. Denning&&Department of Computer Science, Purdue University, West Lafayette, IN, USA|",A program's working set is the collection of segments (or pages) recently referenced. This concept has led to efficient methods for measuring a program's intrinsic memory demand; it has assisted in undetstanding and in modeling program behavior; and it has been used as the basis of optimal multiprogrammed memory management. The total cost of a working set dispatcher is no larger than the total cost of other common dispatchers. This paper outlines the argument why it is unlikely that anyone will find a cheaper nonlookahead memory policy that delivers significantly better performance.,10.1109/TSE.1980.230464,IEEE Transactions on Software Engineering,"Memory management,Costs,Processor scheduling,Optimal control,Phase measurement,Stochastic processes,Space technology,Operating systems,Computer science,Adaptive control","M. C. Adams and G. E. Millard, ""Performance measurements on the Edinburgh multi access system (EMAS)"", Proc. ICS 75, 1975-June.||A. V. Aho, P. J. Denning and J. D. UlUman, ""Principles of optimal page replacement"", J. Ass. Comput. Mach., vol. 18, pp. 80-93, Jan. 1971.||""Proceedings of a symposium on storage allocation"", Comm. ACM 4 Commun. Ass. Comput. Mach., vol. 4, no. 10, 1961-Oct.||Arvind, R. Y. Kain and E. Sadeh, ""On reference string generation processes"", Proc. 4th ACM Symp. Operating Systems Principles, pp. 80-87, 1973-Oct.||J. Y. Babonneau, M. S. Achard, G. Morisset and M. B. Mounajjed, ""Automatic and general solution to the adaptation of programs in a paging environment"", Proc. 6th ACM Symp. Operating Systems Principles, pp. 109-116, 1977-Nov.||M. Badel, E. Gelenbe, J. Lenfant and D. Potier, ""Adaptive optimization of a time sharing system's performance"", Proc. IEEE, vol. 63, pp. 958-965, 1975-June.||Y. Bard, ""Application of the page survival index (PSI) to virtual memory system performance"", IBM J. Res. Develop., vol. 19, pp. 212-220, May 1975.||F. Baskett and A. Rafii, The AO inversion model of program paging behavior, Nov. 1976.||A. P. Batson, S. Ju and D. Wood, ""Measurements of segment size"", Commun. Ass. Comput. Mach., vol. 13, pp. 155-159, Mar. 1970.||A. P. Batson and W. Madison, ""Measurements of major locality phases in symbolic reference strings"", Proc. Int. Symp. Comput. Performance Modeling Measurement and Evaluation ACM SIGMETRICS and IFIP WG7.3, pp. 75-84, 1976-Mar.||A. P. Batson, ""Program behavior at the symbolic level"", Computer, vol. 9, no. 11, pp. 21-28, Nov. 1976.||A. P. Batson, W. E. Blatt, J. P. Keams and E. Gelenbe, ""Structure within locality intervals"", Proc. Symp. Modeling and Performance Evaluation of Computer Systems, pp. 221-232, 1977-Oct.||L. A. Belady, ""A study of replacement algorithms for virtual storage computers"", IBM Syst. J., vol. 5, no. 2, pp. 78-101, 1966.||L. A. Belady, Biased replacement algorithms for multiprogramming, IBM T. J. Watson Res. Center, Mar. 1967.||L. A. Belady and C. J. Kuehner, ""Dynamic space sharing in computer systems"", Commun. Ass. Comput. Mach., vol. 12, pp. 282-288, May 1969.||A. Brandwajn, ""A model of a time sharing virtual memory system solved using equivalence and decomposition methods"", Acta Informatica, vol. 4, pp. 11-47, 1974.||A. Brandwajn, ""A queueing model of multiprogrammed computer systems under full load conditions"", J. Ass. Comput. Mach., vol. 24, pp. 222-240, Apr. 1977.||B. Brawn and F. G. Gustavson, ""Program behavior in a paging environment"", 1968 AFIPS Conf. Proc. Fall Joint Comput. Conf., vol. 33, pp. 1019-1032, 1968.||B. Brawn, F. G. Gustavson and E. Mankin, ""Sorting in a paged environment"", Commun. Ass. Comput. Mach., vol. 13, pp. 483-494, Aug. 1970.||P. Bryant, ""Predicting working set sizes"", IBM. J. Res. Develop., vol. 19, pp. 221-229, May 1975.||J. P. Buzen, ""Optimizing the degree of multiprogramming in demand paging systems"", Proc. IEEE COMPCON, pp. 139-140, 1971-Sept.||J. P. Buzen, ""Fundamental operational laws of computer system performance"", Acta Informatica, vol. 7, no. 2, pp. 167-182, 1976.||J. P. Buzen, ""queueing network model of MVS"", Computing Surveys, vol. 10, pp. 319-332, Sept. 1978.||W. W. Chiu and W-M Chow, A hybrid hierarchical model of a multiple virtual storage (MVS) operating system, Jan. 1978.||W. W. Chu and H. Opderbeck, ""The page fault frequency replacement algorithm"", 1972 AFIPS Conf. Proc. Fall Joint Comput. Conf., vol. 41, pp. 597-609, 1972.||W. W. Chu and H. Opderbeck, ""Analysis of the PFF algorithm using a semi-Markov model"", Commun. Ass. Comput. Mach., vol. 19, pp. 298-304, May 1976.||W. W. Chu and H. Opderbeck, ""Program behavior and the page fault frequency replacement algorithm"", Computer, vol. 9, no. 11, pp. 29-38, Nov. 1976.||D. D. Chamberlin, S. H. Fuller and L. Liu, ""An analysis of page allocation strategies for virtual memory systems"", IBM J. Res. Develop., vol. 17, pp. 404-412, 1973.||E. G. Coffman and P. J. Denning, Operating Systems Theory, NJ, Englewood Cliffs:Prentice-Hall, 1973.||E. G. Coffman and T. A. Ryan, ""A study of storage partitioning using a mathematical model of locality"", Commun. Ass. Comput. Mach., vol. 15, pp. 183-190, Mar. 1972.||E. G. Coffman and L. C. Varian, ""Further experimental data on the behavior of programs in a paging environment"", Commun. Ass. Comput. Mach., vol. 11, pp. 471-474, July 1968.||L. W. Comeau, ""A study of the effect of user program optimization in a paging system"", Proc. ACM Symp. Operating Systems Principles, 1967-Oct.||P. J. Courtois, On the near complete decomposability of networks of queues and of stochastic models of multiprogramming, 1972.||P. J. Courtois, ""Decomposability instabilities and saturation in multiprogramming systems"", Commun. Ass. Comput. Mach., vol. 18, pp. 371-377, July 1975.||P. J. Courtois, Decomposability, New York:Academic, 1977.||P. J. Courtois and H. Vantilborgh, ""A decomposable model of program paging behavior"", Acta Informatica, vol. 6, no. 3, pp. 251-276, 1976.||P. J. Denning, Memory allocation in multiprogrammed computer systems, MIT Project MAC, Mar. 1966.||P. J. Denning, ""The working set model for program behavior"", Commun. Ass. Comput. Mach., vol. 11, pp. 323-333, May 1968.||P. J. Denning, Resource allocation in multiprocess computer systems, May 1968.||P. J. Denning, ""Thrashing: Its causes and prevention"", 1968 AFIPS Conf. Proc. Fall Joint Comput. Conf., vol. 33, pp. 915-922, 1968.||P. J. Denning, ""Equipment configuration in balanced computer systems"", IEEE Trans. Comput., vol. C-18, pp. 1008-1012, Nov. 1969.||P. J. Denning, ""Virtual memory"", Computing Surveys, vol. 2, pp. 153-189, Sept. 1970.||P. J. Denning, ""Third generation computer systems"", Computing Surveys, vol. 3, pp. 175-216, Dec. 1971.||P. J. Denning and S. C. Schwartz, ""Properties of the working set model"", Commun. Ass. Comput. Mach., vol. 15, pp. 191-198, Mar. 1972.||""corrigendum"", Commun. Ass. Comput. Mach., vol. 16, pp. 122, Feb. 1973.||P. J. Denning, ""On modeling program behavior"", 1972 AFIPS Conf. Proc. Spring Joint Comput. Conf., vol. 40, pp. 937-944, 1972.||P. J. Denning and J. R. Spirn, ""Dynamic storage partitioning"", Proc. 4th ACM Symp. Operating Systems Principles, pp. 74-79, 1973-Oct.||P. J. Denning and G. S. Graham, ""Multiprogrammed memory management"", IEEE Proc., vol. 63, pp. 924-939, 1975-June.||P. J. Denning, The computation and use of optimal paging curves, June 1975.||P. J. Denning and K. C. Kahn, ""A study of program locality and lifetime functions"", Proc. 5th ACM Symp. Operating Systems Principles, pp. 207-216, 1975-Nov.||P. J. Denning and K. C. Kahn, ""An L = S criterion for optimal multiprogramming"", Proc. Int. Symp. Comput. Performance Modeling Measurement and Evaluation, pp. 219-229, 1976-Mar.||P. J. Denning, K. C. Kahn, J. Leroudier, D. Potier and R. Suri, ""Optimal multiprogramming"", Acta Informatica, vol. 7, no. 2, pp. 197-216, 1976.||P. J. Denning, ""Optimal multiprogrammed memory management"" in Current Trends in Programming Methodology III, NJ, Englewood Cliffs:Prentice‑Hall, pp. 298-322, 1978.||P. J. Denning and D. R. Slutz, ""Generalized working sets for segment reference strings"", Commun. Ass. Comput. Mach., vol. 21, pp. 750-759, Sept. 1978.||P. J. Denning and J. P. Buzen, ""The operational analysis of queueing network models"", Computing Surveys, vol. 10, pp. 225-262, Sept. 1978.||P. J. Denning, ""Working sets then and now"", Proc. Int. Symp. Operating Systems, 1979.||J. B. Dennis, ""Segmentation and the design of multiprogrammed computer systems"", J. Ass. Comput. Mach., vol. 12, pp. 589-602, Oct. 1965.||M. C. Easton and P. A. Franaczek, ""Use bit scanning in replacement decisions"", IEEE Trans. Comput., vol. C-28, pp. 133-141, Feb. 1979.||M. C. Easton and B. T. Bennett, ""Transient free working set statistics"", Commun. Ass. Comput. Mach., vol. 20, pp. 93-99, Feb. 1977.||M. C. Easton, ""Model for database reference strings based on behavior of reference clusters"", IBM J. Res. Develop., vol. 22, pp. 197-202, Mar. 1978.||M. C. Easton and R. Fagin, ""Cold-start v. warm-start miss ratios"", Commun. Ass. Comput. Mach., vol. 21, pp. 866-872, Oct. 1978.||D. Ferrari, ""Improving locality by critical working sets"", Commun. Ass. Comput. Mach., vol. 17, pp. 614-620, Nov. 1974.||D. Ferrari, ""Tailoring programs to models of program behavior"", IBM J. Res. Develop., vol. 19, pp. 244-251, May 1975.||D. Ferrari, ""The improvement of program behavior"", Computer, vol. 9, pp. 39-47, Nov. 1976.||G. H. Fine, C. W. Jackson and P. V. McIssac, ""Dynamic program behavior under paging"", Proc. ACM Annu. Conf, pp. 223-228, 1966.||M. H. Fogel, ""The VMOS paging algorithm"", ACM SIGOPS Operating Systems Review, vol. 8, pp. 8-17, Jan. 1974.||M. A. Franklin, G. S. Graham and R. K. Gupta, ""Anomalies with variable partition paging algorithms"", Commun. Ass. Com-put. Mach., vol. 21, pp. 232-236, Mar. 1978.||E. Gelenbe, P. Tiberio and J. Boekhorst, ""Page size in demand paging systems"", Acta Informatica, vol. 3, pp. 1-24, 1973.||E. Gelenbe, ""A unified approach to the evaluation of a class of replacement algorithms"", IEEE Trans. Comput., vol. C-22, pp. 611-618, June 1973.||E. Gelenbe, J. Lenfant and D. Potier, ""Anaylse d'un algorithme de gestion de memoire centrale et d'un disque de pagination"", Acta Informatica, vol. 3, pp. 321-345, 1974.||E. Gelenbe and A. Kurinckx, ""Random injection control of multiprogramming in virtual memory"", IEEE Trans. Software Eng., vol. SE-4, pp. 2-17, Jan. 1978.||E. Gelenbe, A. Kurinckx and I. Mitrani, ""The rate control policy for virtual memory management"", Proc. 2nd Int. Symp. Operating Systems, 1978-Oct.||M. Z. Ghanem and H. Kobayashi, ""A parametric representation of program behavior in a virtual memory system"", Proc. 8th Princeton Conf. Information Sciences and Systems, pp. 327-330, 1974-Mar.||G. S. Graham, A study of program and memory policy behavior, Dec. 1976.||G. S. Graham and P. J. Denning, ""On the relative controllability of memory policies"" in Computer Performance, The Netherlands, Amsterdam:North‑Holland, pp. 411-428, Aug. 1977.||R. K. Gupta and M. A. Franklin, ""Working set and page fault frequency replacement algorithms: A performance comparison"", IEEE Trans. Comput., vol. C-27, pp. 706-712, Aug. 1978.||D. Hatfield and J. Gerald, ""Program restructuring for virtual memory"", IBM Syst. J., vol. 10, pp. 168-192, 1971.||R. Jamp and J. R. Spirn, VMIN based determination of program macro-behavior, May 1979.||K. C. Kahn, Program behavior and load dependent system performance, Aug. 1976.||T. Kilburn, D. B. G. Edwards, M. J. Lanigan and F. H. Sumner, ""One level storage system"", IRE Trans. Elect. Commun., pp. 223-235, Apr. 1962.||J. Lenfant, Comportment des programmes dans leur espace d'addressage, Nov. 1974.||J. Lenfant and P. Burgevin, ""Empirical data on program behavior"", Proc. ACM Int. Symp., pp. 163-170, 1975.||J. Lenfant, ""Ensembles de travail et intervalles bornes de localite"", RAIRO-Informatique (AFCET), vol. 12, pp. 15-35, 1978.||J. Leroudier and P. Burgevin, ""Characteristics and models of program behavior"", Proc. ACMAnnu. Conf., pp. 344-350, 1976.||J. Leroudier and D. Potier, ""Principles of optimality for multiprogramming"", Proc. Int. Symp. Computer Performance Modeling Measurement and Evaluation, pp. 211-218, 1976-Mar.||P. A. W. Lewis and P. C. Yue, ""Statistical analysis of program reference patterns in a paging environment"", in Dig. IEEE Conf., 1971.||A. W. Madison and A. P. Batson, ""Characteristics of program localities"", Commun. Ass. Comput. Mach., vol. 19, pp. 285-294, May 1976.||T. Masuda, H. Shiota, K. Noguchi and T. Ohki, ""Optimization by cluster analysis"", Proc. IFIP Congr., pp. 261-265, 1974.||R. L. Mattson, J. Gecsei, D. R. Slutz and I. L. Traiger, ""Evaluation techniques for storage hierarchies"", IBM Syst. J., vol. 9, pp. 78-117, 1970.||J. B. Morris, ""Demand paging through the use of working sets on the MANIAC II"", Commun. Ass. Comput. Mach., vol. 15, pp. 867-872, Oct. 1972.||G. J. Myers, Advances in Computer Architecture, New York:Wiley, 1978.||H. Opderbeck and W. W. Chu, ""Performance of the page fault frequency algorithm in a multiprogramming environment"", Proc. IFIP Congr., pp. 235-241, 1974.||H. opderbeck and W. W. Chu, ""The renewal model for program behavior"", SIAM J. Computing, vol. 4, pp. 356-374, Sept. 1975.||E. I. Organick, The MULTICS System: An Examination of Its Structure, MA, Cambridge:MIT press, 1972.||E. I. Organick, Computer System Organization: The B5700/ B6700 Series, New York:Academic, 1973.||M. Parent and D. Potier, ""A note on the influence of program loading on the page fault rate"", Acta Informatica, vol. 8, pp. 359-370, 1977.||B. G. Prieve and R. S. Fabry, ""VMIN-An optimal variable space page replacement algorithm"", Commun. Ass. Comput. Mach., vol. 19, pp. 295-297, May 1976.||D. Potier, ""Analysis of demand paging policies with swapped working sets"", Proc. 6th ACM Symp. Operating Systems Principles, pp. 125-131, 1977-Nov.||B. R. Rau, ""Program behavior and the performance of interleaved memories"", IEEE Trans. Comput., vol. C-28, pp. 191-199, Mar. 1979.||J. Rodriguez Rosell, ""Experimental data on how program behavior affects the choice of scheduler parameters"", Proc. 3rd ACM Symp. on Operating Systems Principles, pp. 156-163, 1971-Oct.||J. Rodriguez Rosell and J. P. Dupuy, ""The design implementation and evaluation of a working set dispatcher"", Commun. Ass. Comput. Mach., vol. 16, pp. 247-253, Apr. 1973.||J. Rodriguez-Rosell, ""Empirical working set behavior"", Commun. Ass. Comput. Mach., vol. 16, pp. 556-560, Sept. 1973.||J. Rodriguez-Rosell, ""Empirical data reference behavior in data base systems"", Computer, vol. 9, pp. 9-13, Nov. 1976.||E. Sadeh, ""An analysis of the performance of the page fault frequency (PFF) replacement algorithm"", Proc. 5th ACM Symp. Operating Systems Principles, pp. 6-13, 1975-Nov.||J. H. Saltzer, ""A simple linear model of demand paging performance"", Commun. Ass. Comput. Mach., vol. 17, pp. 181-186, Apr. 1974.||D. Sayre, ""Is automatic folding of programs efficient enough to displace manual?"", Commun. Ass. Comput. Mach., vol. 13, pp. 656-660, Dec. 1969.||G. S. Shedler and C. Tung, ""Locality in page reference strings"", SIAM J. Comput., vol. 1, pp. 218-241, Sept. 1972.||R. Simon, The modeling of virtual memory systems, May 1979.||D. R. Slutz and I. L. Traiger, ""A note on the calculation of average working set size"", Commun. Ass. Comput. Mach., vol. 17, pp. 563-565, Oct. 1974.||D. R. Slutz, A relation between working set and optimal algorithms for segment reference strings, July 1975.||A. J. Smith, ""A modified working set paging algorithm"", IEEE Trans. Comput., vol. C-25, pp. 907-914, Sept. 1976.||A. J. Smith, ""Analysis of the optimal lookahead demand paging algorithms"", SIAM J. Computing, vol. 5, Dec. 1976.||A. J. Smith, Multiprogramming and internal scheduling, Nov. 1976.||A. J. Smith, Multiprogramming and memory contention, Nov. 1976.||J. R. Spin and P. J. Denning, ""Experiments with program locality"", AFIPS Conf. Proc. Fall Joint Comput. Conf., vol. 41, pp. 611-621, 1972.||J. R. Spirn, Program locality and dynamic memory management, Mar. 1973.||J. R. Spirn, ""Distance string models for program behavior"", Computer, vol. 9, pp. 14-20, Nov. 1976.||J. R. Spirn, Program Behavior: Models and Measurement, New York:Elsevier/North-Holland, 1977.||J. R. Spirn, Biased memory partitioning with swapping delays, Jan. 1979.||R. F. Tsao, L. W. Comeau and B. H. Margolin, ""A multifactor paging experiment 1: The experiment and the conclusions"" in Statistical Computer Performance Evaluation, New York:Academic, pp. 103-134, 1972.||S. Tsur, ""Analysis of queueing networks in which processes exhibit locality-transition behavior"", Information Processing Lett., vol. 7, pp. 20-23, Jan. 1978.||N. Weizer and G. Oppenheimer, ""Virtual memory management in a paging environment"", 1969 AFIPS Conf Proc. Spring Joint Comput. Conf, vol. 34, pp. 234ff, 1969.||M. V. Wilkes, ""The dynamics of paging"", Comput. J., vol. 16, pp. 4-9, Feb. 1973.||C. R. Arnold, Optimization of computer operating systems, Mar. 1979.||Apr. 1979.||F. J. Corbato, ""A paging experiment with the MULTICS System"" in In Honor ofP. M. Morse, MA, Cambridge:MIT Press, pp. 217-228, 1969.||W. F. King, ""Analysis of paging algorithms"", Proc. IFIP Congr., 1971-Aug.||A. S. Tannenbaum, ""Implications of structured programming for machine architecture"", Commun. Ass. Comput. Mach., vol. 21, pp. 237-246, Mar. 1978.||",Working Sets Past and Present
"B. Wegbreit&&Xerox Palo Alto Research Center, Palo Alto, CA, USA|","Program development often proceeds by transforming simple, clear programs into complex, involuted, but more efficient ones. This paper examines ways this process can be rendered more systematic. We show how analysis of program performance, partial evaluation of functions, and abstraction of recursive function definitions from recurring subgoals can be combined to yield many global transformations in a methodical fashion. Examples are drawn from compiler optimization, list processing, very high-evel languages, and APL execution.",10.1109/TSE.1976.233533,IEEE Transactions on Software Engineering,"Optimizing compilers,Performance analysis,High level languages,Programming profession,Program processors,Local activities,Design engineering,Cost function,Computational efficiency","P. Abrams, An APL machine, CA, Stanford:Stanford Linear Accelerator Center, Feb. 1970.||Proc. ACM Symp. Very High Level Languages Sigplan Notices, vol. 9, no. 4, 1974-Apr.||F. E. Allen and J. Cocke, ""A catalogue of optimizing transformations"" in Design and Optimization of Compilers, NJ, Englewood Cliffs:Prentice-Hall, pp. 1-30, 1972.||G. Battarel, ""Optimized interpretation of APL statements"", Proc. APL Congress '73, pp. 49-57, 1973.||L. Beckman, A partial evaluator and its use as a programming tool, Sweden:Dept. Comput. Sci., Uppsala University, Nov. 1974.||R. S. Boyer and J. S. Moore, ""Proving theorems about Lisp functions"", J. Ass. Comput. Mach., vol. 22, pp. 129-144, Jan. 1975.||R. M. Burstall and J. Darlington, ""Some transformations for developing recursive programs"", Proc. Int. Conf. Reliable Software, pp. 465-472, 1975-Apr.||C. L. Chang and R. Lee, Symbolic Logic and Mechanical Theorem Proving, New York:Academic, 1973.||T. E. Cheatham and B. Wegbreit, ""A laboratory for the study of automating programming"", 1972 Spring Joint Comput. Conf. AFIPS Conf. Proc., vol. 70, pp. 11-21, 1972.||J. Cohen and C. Zuckerman, ""Two languages for estimating program efficiency"", Commun. Ass. Comput. Mach., vol. 17, pp. 301-308, June 1974.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, pp. 1-82, 1972.||J. Earley, ""High level operations in automatic programming"", Proc. ACMSymp. Very High Level Languages SIGPLAN Notices, vol. 9, no. 4, 1974-Apr.||S. L. Gerhart, ""Correctness preserving program transformations"", Proc. 2nd Ass. Comput. Mach. Symp. Principles Programming Languages, pp. 54-66, 1975-Jan.||P. Henderson and J. H. Morris, ""A lazy evaluator"", Proc. 3rd Ass. Comput. Mach. Symp. Principles Programming Languages, pp. 95-103, 1976-Jan.||A. W. Holt, Final report for the information system theory project, NY, New York:Applied Data Research, Inc., Feb. 1968.||K. E. Iverson, A Programming Language, New York:Wiley, 1962.||L. A. Lombardi and B. Raphael, ""Lisp as the language for an incremental computer"" in The Programming Language LISP: Its Operation and Applications, MA, Cambridge:M.I.T., pp. 204-219, 1964.||Z. Manna and R. Waldinger, Knowledge and reasoning in program synthesis, CA, Menlo Park:Stanford Res. Inst., Nov. 1974.||APL/360 Reference Manual, 1968.||E. A. Sanderwall, ""Programming tool for management of predicate‑calculus-oriented data bases"", Proc. 2nd Int. Joint Conf. Artificial Intelligence, 1971.||J. T. Schwartz, ""Automatic and semiautomatic optimization of SETL"", Proc. ACM Symp. Very High Level Languages SIGPLAN Notices, vol. 9, no. 4, 1974-Apr.||J. Vuillemin, ""Correct and optimal implementations of recursion in a simple programming language"", J. CSS, vol. 9, pp. 332-353, Dec. 1974.||B. Wegbreit, ""Mechanical program analysis"", Commun. Ass. Comput. Mach., vol. 18, pp. 528-539, Sept. 1975.||",Goal-Directed Program Transformation
"A.J. Smith&&Computer Science Division, Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, CA, USA|","The high cost of analyzing long memory address traces has limited most researchers to short traces and analysis algorithms that are linear in the length of the trace. We suggest two methods that permit a trace to be shortened in length by one to two orders of magnitude (or more) for later further analysis. The Stack Deletion Method eliminates all references in the trace to the top k levels of the LRU stack. The Snapshot Method records the reference bits of the pages in the original tape at discrete intervals and uses these bits to generate a new trace. Extensive measurements are presented, from which we conclude that there is little or no loss in accuracy using reduced traces for many purposes for a wide range of memory sizes and degrees of reduction.",10.1109/TSE.1977.233841,IEEE Transactions on Software Engineering,"Algorithm design and analysis,Costs,Computational modeling,Loss measurement,Memory management,Scheduling algorithm,Clocks,Size measurement,Processor scheduling,Computer simulation","L. A. Belady, ""study of replacement algorithms for a virtual storage computer"", IBMSyst. J., vol. 5, pp. 78-101, 1966.||L. P. Horowitz, R. M. Karp, R. E. Miller and S. Winograd, ""Index register allocation"", J. Ass. Comput. Mach., vol. 13, pp. 43-61, Jan. 1966.||F. Yu and F. Baskett, The effect of page write costs on page replacement algorithms.||R. L. Mattson, J. Gecsei, D. R. Slutz and I. L. Traiger, ""Evaluation techniques for storage hierarchies"", IBM Syst. J., vol. 9, pp. 78-117, 1970.||L. A. Belady and F. P. Palermo, ""On-line measurement of paging behavior by the multivalued MIN algorithm"", IBM J. Res. Develop., pp. 2-19, 1974.||C. H. Lewis and R. A. Nelson, Some one pass algorithms for the generation of OPT distance strings, Mar. 1974.||P. A. W. Lewis and G. S. Shedler, ""Empirically derived micro‑models for sequences of page exceptions"", IBMJ. Res. Develop., pp. 86-100, Mar. 1973.||P. J. Denning, ""On modeling program behavior"", 1972 Proc. Spring Joint Comput. Conf., pp. 937-944, 1972.||A. W. Madison and A. P. Batson, ""Characteristics of program localities"", Commun. Ass. Comput. Mach., vol. 19, no. 5, pp. 285-294, 1976.||P. J. Denning, ""The working set model for program behavior"", Commun. Ass. Comput. Machinery, vol. 11, pp. 323-333, May 1968.||W. W. Chu and H. Opderbeck, ""The page fault frequency replacement algorithm"", 1972 Proc. Fall Joint Comput. Conf., pp. 597-609, 1972.||F. J. Corbato and Ingard, ""A Paging Experiment with the multics system"" in In Honor of P. M. Morse, MA, Cambridge:Mass. Inst. Technol., pp. 217-228, 1969.||Y. Bard, ""Characterization of program paging in a time sharing environment"", IBMJ. Res. Develop., pp. 387-393, Sept. 1973.||E. G. Coffman and B. Randell, ""Performance predictions for extended paged memories"", Acta Informatica, vol. 1, pp. 1-13, 1971.||B. G. Prieve, A page partition replacement algorithm, 1974.||A. J. Smith, ""A modified working set paging algorithm"", IEEE Trans. Comput., vol. C-25, pp. 907-914, Sept. 1976.||J. W. Cooley and J. W. Tukey, ""An algorithm for the machine calculation of complex fourier series"", Mathematics of Computation, vol. 19, pp. 297-301.||W. Feller, An Introduction to Probability Theory and ItsA pplica-tions, New York:Wiley, vol. 1, 1968.||D. D. Chamberlin, S. H. Fuller and L. Y. Liu, ""An analysis of page allocation strategies for multiprogramming systems with virtual memory"", IBM J. Res. Develop., vol. 17, no. 5, pp. 404-412, Sept. 1973.||",Two Methods for the Efficient Analysis of Memory Address Trace Data
"Barry W. Boehm&&TRW Corporation, Redondo Beach, CA, USA|Robert K Mcclean&&TRW Corporation, Redondo Beach, CA, USA|D. E. Urfrig&&TRW Corporation, Redondo Beach, CA, USA|","Summarizes some recent experience in analyzing and eliminating sources of error in the design phase of large software projects. It points out some of the significant differences in software error incidence between large and small software projects. A taxonomy of software error causes, and some analyses of the design error data performed to obtain a better understanding of the nature of large-scale software design errors and to evaluate alternative methods of preventing, detecting, and eliminating them are presented. Based on this analysis of observational data, a hypothesis was derived regarding the potential cost effectiveness of an automated aid to detecting inconsistencies between assertions about the nature of inputs and outputs of the various elements of the software design.",10.1109/TSE.1975.6312826,IEEE Transactions on Software Engineering,"Encoding,Taxonomy,Software design,Software reliability,Reliability engineering",,Some experience with automated aids to the design of large-scale reliable software
"S.N. Woodfield&&Department of Computer Science, Purdue University, West Lafayette, IN, USA|",The effect of a variation in problem complexity and how the variation relates to programming complexity is predicted and measured. An experiment was conducted in which eighteen graduate students programmed two variations of the same smali algorithm where the problem complexity varied by 25 percent. Eight measurable program characteristics are compared with predicted values obtained using only two known parameters. The agreement between observed and predicted values is very good. Both predicted and observed measurements indicate that the 25 percent increase in problem complexity results in a 100 percent increase in programming complexity.,10.1109/TSE.1979.234162,IEEE Transactions on Software Engineering,"Computer science,Equations,Software measurement,Computer languages,Machinery,Random number generation,Input variables","A. Fitzsimmons and T. Love, ""A review and evaluation of software science"", ACM Computing Surveys, vol. 10, no. 1, pp. 3-18, Mar. 1978.||M. H. Halstead, Elements of Software Science, New York:Elsevier, 1977.||J. M. Robson, ""Generation of random permutations [G6]"", Commun. Ass. Comput. Mach., vol. 12, pp. 634-635, Nov. 1969.||",An Experiment on Unit Increase in Problem Complexity
"E.J. Lau&&Bell Laboratories, Inc., Naperville, IL, USA|D. Ferrari&&Computer Science Division and the Electronics Research Laboratory, University of California, Berkeley, CA, USA|",Program restructuring techniques have proven successful in two-level automatically managed memory hierarchies. The possibility of extending them to multilevel environments is investigated. The performance of strategy-oriented restructuring algorithms in a three-level linear hierarchy managed by sampled working set policies or by a combination of sampled working set and local LRU policies is studied both analytically (assuming an independent reference model of program behavior) and by trace-driven simulation. The results of the study show that strategy-oriented restructuring may be as beneficial in a virtual memory with three levels as it is in one with two levels.,10.1109/TSE.1983.236296,IEEE Transactions on Software Engineering,"Memory management,Algorithm design and analysis,Operating systems,Performance analysis,Analytical models,Programming profession,Hardware,Degradation,System performance,Control systems","T. O. Alanko, I. J. Haikala and P. H. Kutvonen, ""Program restructuring in segmented virtual memory"", Performance Evaluation, vol. 1, pp. 153-169, May 1981.||E. G. Coffman and P. J. Denning, Operating Systems Theory, NJ, Englewood Cliffs:Prentice-Hall, 1973.||P. J. Denning and S. C. Schwartz, ""Properties of the working-set model"", Commun. Ass. Comput. Mach., vol. 15, pp. 191-198, Mar. 1972.||S. Even and O. Kariv, ""An O( n2.5) algorithm for maximum matching in general graphs"", Proc. 16th Symp. Found. Comput. Sci., pp. 100-112, 1975.||D. Ferrari, ""Improving locality by critical working sets"", Commun. Ass. Comput. Mach., vol. 17, pp. 614-620, Nov. 1974.||D. Ferrari, ""Critical-set algorithms for program locality improvement"", Proc. 12th Atherton Conf. Circuit and Syst. Theory, pp. 641-648, 1974-Oct.||D. Ferrari, ""Tailoring programs to models of program behavior"", IBM J. Res. Develop., vol. 19, pp. 244-251, May 1975.||D. Ferrari and E. Lau, ""An experiment in program restructuring for performance enhancement"", Proc. 2nd Int. Conf. Software Eng., pp. 146-150, 1976-Oct.||D. Ferrari, ""The improvement of program behavior"", IEEE Computer, vol. 9, pp. 39-47, Nov. 1976.||D. Ferrari and M. Kobayashi, ""Program restructuring algorithms for global LRU environments"", Proc. Int. Comput. Symp. 1977, pp. 277-283, 1977-Apr.||J. Gecsei, ""Determining hit ratios for multilevel hierarchies"", IBM J. Res. Develop., vol. 18, pp. 316-327, July 1974.||R. P. Goldberg and R. Hassinger, ""The double paging anomaly"", AFIPS Conf. Proc. NCC, pp. 195-199, 1974.||W. F. King, ""Analysis of demand paging algorithms"", Proc. IFIP Congr. 71, pp. ta-3-155-ta-3-159, 1971-Aug.||E. J. Lau, Performance improvement of virtual memory systems by restructuring and prefetching, 1979.||S. E. Madnick, Storage hierachy systems, 1973.||R. L. Mattson, J. Gecsei, D. R. Slutz and I. L. Traiger, ""Evaluation techniques for storage hierarchies"", IBM Syst. J., vol. 9, pp. 78-117, 1970.||J.-F. Paris, ""Program restructuring in segmenting environments"" in Experimental Computer Performance Evaluation, Amsterdam:North-Holland, pp. 249-264, 1981.||J.-F. Paris, Application of restructuring techniques to the optimization of program behavior in virtual memory systems, 1981.||May 1981.||A. J. Smith, ""A modified working set paging algorithm"", IEEE Trans. Comput., vol. C-25, pp. 907-914, Sept. 1976.||A. J. Smith, ""Two simple methods for the efficient analysis of memory address trace data"", IEEE Trans. Software Eng., vol. SE-3, pp. 94-101, Jan. 1977.||A. J. Smith, ""Sequentiality and prefetching in data base systems"", ACM Trans. Database Syst., vol. 3, pp. 223-247, Sept. 1978.||A. J. Smith, ""Sequential program prefetching in memory hierarchies"", IEEE Computer, vol. 11, pp. 7-21, Dec. 1978.||K. S. Trivedi, ""Prepaging and applications in array algorithms"", IEEE Trans. Comput., vol. C-25, pp. 915-921, Sept. 1976.||W. G. Tuel, ""An analysis of buffer paging in virtual storage systems"", IBM J. Res. Develop., vol. 20, pp. 518-520, Sept. 1976.||",Program Restructuring in a Multilevel Virtual Memory
"S. Kundu&&Logicon, Inc., San Pedro, CA, USA|",A solution method is given for finding an optimum constrained path with applications in program testing.,10.1109/TSE.1978.231470,IEEE Transactions on Software Engineering,"Testing,Strips,Network address translation,Protection,Databases,Data security,Inference algorithms,Art,Programming,Combinatorial mathematics","H. N. Gabow, S. N. Maheshwari and L. J. Osterweil, ""On two problems in the generation of program test paths"", IEEE Trans. Software Eng., vol. SE-2, pp. 227-231, Sept. 1976.||S. Even, Algorithmic Combinatorics, New York:Macmillan, pp. 221-224, 1973.||E. L. Lawler, Combinatorial Optimization: Networks and Matroids, New York:Holt, Rinehart and Winston, pp. 68-69, 1976.||",Note on a Constrained-Path Problem in Program Testing
"D.W. Leinbaugh&&Department of Computer Science, University of Nebraska, Lincolnshire, NE, USA|","This paper describes a scheduling algorithm for a set of tasks that guarantees the time within which a task, once started, will complete. A task is started upon receipt of an external signal or the completion of other tasks. Each task has a rxed set of requirements in processor time, resources, and device operations needed for completion of its various segments. A worst case analysis of task performance is carried out. An algorithm is developed for determining the response times that can be guaranteed for a set of tasks. Operating system overhead is also accounted for.",10.1109/TSE.1980.234465,IEEE Transactions on Software Engineering,"Time factors,Optimal scheduling,Processor scheduling,Scheduling algorithm,Delay,Real time systems,Performance analysis,Operating systems,Process control,Multiprocessing systems","E. G. Coffman, Computer and Job Shop Scheduling Theory, New York:Wiley, 1976.||P. J. Courtois, F. Henmans and D. L. Parnas, ""Concurrent control with readers and writers"", Commun. Ass. Comput. Mach., vol. 14, pp. 667-668, Oct. 1971.||W. E. Dijkstra, ""Hierarchical ordering of sequential processes"", Acta Inform., vol. 1, no. 2, pp. 115-138, 1971.||W. B. Easton, ""Process synchronization without long-term interlock"", ACM SIGOPS, vol. 6, pp. 95-100, June 1972.||M. R. Garey and D. S. Johnson, ""Complexity results for multiprocessor scheduling under resource constraints"", SIAM J. Compput., vol. 4, pp. 397-411, Dec. 1975.||M. R. Garey and D. S. Johnson, ""Scheduling tasks with nonuniform deadlines on two processors"", J. Ass. Comput. Mach., vol. 23, pp. 461-467, July 1976.||T. Gonzalez, O. H. Ibarra and S. Sahni, ""Bounds for LPT schedules on uniform processors"", SIAM J. Comput., vol. 6, pp. 155-166, Mar. 1977.||T. Gonzalez and S. Sahni, ""Preemptive scheduling of uniform processor systems"", J. Ass. Comput. Mach., vol. 25, pp. 92-101, Jan. 1978.||A. N. Habermann, ""A new approach to avoidance of system deadlocks"", Lecture Notes in Comput. Sci. #16: Operating Systems Proc. Int. Symp., pp. 163-170, 1974-Apr.-23-25.||H. H. Johnson and M. S. Maddison, Deadline scheduling for a real-time multiprocessor, VA, Springfield, pp. 10, May 1974.||D. Kafura, ""Scheduling tasks with critical sections"", Proc. Annu. Conf ACM, 1977-Oct.||C. L. Liu and J. W. Layland, ""Scheduling algorithms for multiprocessing in a hard-real-time environment"", J. Ass. Comput. Mach., vol. 20, pp. 46-61, Jan. 1973.||G. K. Manacher, ""Production and stabilization of real-time task schedules"", J. Ass. Comput. Mach., vol. 14, pp. 439-465, July 1967.||R. R. Muntz and E. G. Coffman, ""Preemptive scheduling of real-time tasks on multiprocessor systems"", J. Ass. Comput. Mach., vol. 17, pp. 324-338, Apr. 1970.||S. Sahni, ""Algorithms for scheduling independent tasks"", J. Ass. Comput. Mach., vol. 23, pp. 116-127, Jan. 1976.||P. G. Sorenson and V. C. Hamacher, ""A real-time system design methodology"", INFOR, vol. 13, pp. 1-18, Feb. 1975.||",Guaranteed Response Times in a Hard-Real-Time Environment
"F. DeRemer&&Board of Studies in Information Sciences, University of California, Santa Cruz, CA, USA|H.H. Kron&&Board of Studies in Information Sciences, University of California, Santa Cruz, CA, USA|","We distinguish the activity of writing large programs from that of writing small ones. By large programs we mean systems consisting of many small programs (modules), usually written by different people.",10.1109/TSE.1976.233534,IEEE Transactions on Software Engineering,"LAN interconnection,Writing,Protection,Automatic programming,Computer languages,Program processors,Joining processes,Project management,Disk recording","B. L. Clark and J. J. Horning, ""The system language for project SUE"", SIGPLAN Notices, vol. 6, Oct. 1971.||E. W. Dijkstra, ""Notes on structured programming"" in structured Programming, New York:Academic, 1972.||J. E. George and G. R. Sager, ""Variables-Bindings and protection"", SIGPLAN Notices, vol. 8, Dec. 1973.||J. Guttag, The use of type for the definition of abstract data objects, Canada, Ont.:Dept. Comput. Sci., Univ. Toronto, Mar. 1974.||C. A. R. Hoare, ""Proof of correctness of data representations"", Acta Informatica, vol. 1, pp. 271-281, 1972.||C. A. R. Hoare, Hints on programming language design, Dec. 1973.||Proc. Symp. Principles of Programming Languages, 1973-Oct.||J. D. Ichbiah, ""Visibility and separate compilations"", Proc. IFIP WG 2.4, 1974-May.||D. E. Knuth, ""Semantics of context-free languages"", Mathematical Systems Theory, vol. 2, 1968.||B. H. Liskov, ""A design methodology for reliable software systems"", 1972 Fall Joint Comput. Conf. AFIPS Conf. Proc., vol. 41, pp. 191-199, 1972.||B. H. Liskov and S. Zilles, ""Programming with abstract data types"", Proc. Symp. Very High Level Languages SIGPLAN Notices, vol. 9, 1974-Apr.||J. Maynard, Modular Programming, New York:Petrocelli Books, 1972.||H. D. Mills, Chief programmer teams: Techniques and procedures, Jan. 1970.||D. L. Parnas, Information distribution aspects of design methodology, Feb. 1971.||D. L. Parnas, ""technique for software module specifications with e examples"", Commun. Ass. Comput. Mach., vol. 15, May 1972.||L. Presser and J. R. White, ""Linkers and loaders"", ACM Comput. Surveys, vol. 4, Sept. 1972.||The BCPL reference manual, Jan. 1969.||G. M. Weinberg, The psychology of computer programming, New York:Van Nostrand Reinhold, pp. 71-75, 1971.||J. R. White and L. Presser, A tool for enforcing system structure, Apr. 1972.||N. Wirth and C. A. R. Hoare, ""A contribution to the development of ALGOL"", Commun. Ass. Comput. Mach., vol. 6, June 1966.||W. Wulf and M. Shaw, ""Global variables considered harmful"", SIGPLAN Notices, vol. 8, Feb. 1973.||",Programming-in-the-Large Versus Programming-in-the-Small
"H.F. Ledgard&&Department of Computer and Information Science, University of Massachusetts, Amherst, MA, USA|","This paper presents the formalism of Production Systems and investigates its applcation to defe the Syntax and trlation of programming languages. Several properties appear well-suited to this task: 1) the formalism can be used to specify exactly the syntax of a computer language, including context-sensitive requirements; 2) the specification of the context-sensitive requirements on syntax can be isolated from the context-free requirements; 3) the same formalism can be used to specify more general structural properties, including the translation of one language into another. The notation has been developed with readabifity as a prime designissue. The following examples are given:1) aspecificationofthesyntaxofasmallbutdifflcultsubset of PL/I;2) a specification of the rules for translating lambda-culus expressions into, normal form.",10.1109/TSE.1977.233849,IEEE Transactions on Software Engineering,"Production systems,Law,Legal factors,Functional programming,Computer languages,Terminology,History,Tellurium,Couplings,Program processors","A. Church, ""Annals of Mathematical Studies no. 6"" in The Calculi of Lambda-Conversion, NJ, Princeton:Princeton Univ. Press, 1941.||H. B. Curry and R. Feys, Combinatory Logic, Amsterdam:North-Holland Publishing Co., vol. 1, 1958.||J. J. Donovan, Investigations in simulation and simulation languages, CT, New Haven:Yale Univ., 1966.||J. J. Donovan and H. F. Ledgard, ""A formal system for the specification of the syntax and translation of computer languages"", 1967 Fall Joint Comput. Conf. AFIPS Conf Proc., vol. 31, 1967.||H. F. Ledgard, A formal system for defining the syntax and semantics of computer languages, MA, Cambridge:M.I.T., 1969.||H. F. Ledgard, ""Production systems: Or can we do better than BNF?"", Commun. Ass. Comput. Mach., Feb. 1974.||P. Lucas and K. Walk, ""On the formal description of PL/I"", Annu. Rev. Automat. Program., vol. 6, no. 3, 1969.||M. Marcotty, H. Ledgard and G. Bochman, ""A sampler of formal definitions"", Comput. Surveys, June 1976.||P. Naur, ""Revised report on the algorithmic language ALGOL 60"", Commun. Ass. Comput. Mach., vol. 6, pp. 1-23, 1963.||E. L. Post, ""Formal reductions of the general combinatorial decision problems"", Amer. J. Math., vol. 65, pp. 197-215, 1943.||P. F. Schuler, ""Weakly context-sensitive languages"", Acta Informatica, vol. 3, pp. 155-170, 1974.||R. M. Smullyan, ""Annals of Mathematical Studies no. 47"" in Theory of Formal Systems, NJ, Princeton:Princeton Univ. Press, 1961.||BASIS/1-12, European Computer Manufacturers Association, and American National Standards Institute, July 1974.||",Production Systems: A Notation for Defining Syntax and Translation
"Albert Endres&&IBM Laboratory, Boeblingen, Germany|","Program errors detected during internal testing of the operating system DOS/VS form the basis for an investigation of error distributions in system programs. Using a classification of the errors according to various attributes, conclusions can be drawn concerning the possible causes of these errors. The information thus obtained is applied in a discussion of the most effective methods for the detection and prevention of errors.",10.1109/TSE.1975.6312834,IEEE Transactions on Software Engineering,"Operating systems,Materials,Laboratories,Programming,Protocols,Syntactics",,An analysis of errors and their causes in system programs
"R.D. Gordon&&Digital Systems Research Department, Bell Laboratories, Murray Hill, NJ, USA|","The sharply rising cost incurred during the production of quality software has brought with it the need for the development of new techniques of software measurement. In particular, the ability to objectively assess the clarity of a program is essential in order to rationally develop useful engineering guidelines for efficient software production and language development.",10.1109/TSE.1979.234163,IEEE Transactions on Software Engineering,"Programming profession,Software quality,Software measurement,Production,Guidelines,Frequency,Computer languages,Costs,Testing,Computer science","F. Akiyama, ""An example of software system debugging"", Proc. IFIP Congr., 1971.||L. J. Chmura and H. F. Ledgard, Cobol With Style: Programming Proverbs, NJ, Rochelle Park:Hayden, 1976.||O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||E. W. Dijkstra, ""GO TO-statement considered harmful"", Commun Ass Comput. Mach., vol. 11, pp. 147, 148, Mar. 1968.||A. Fitzsimmons and T. Love, ""A review and evaluation of software science"", ACM Comput. Surveys, vol. 10, pp. 3-18, Mar. 1978.||Y. Funami and M. H. Halstead, A software physics analysis of Akiyaina's debugging data, May 1975.||J. D. Gannon and J. J. Horning, ""Language design for programming reliability"", IEEE Trans. Software Eng., vol. SE-1, pp. 179-191, June 1975.||A. N. Gileadi and H. F. Ledgard, ""On a proposed measure of program structure"", ACM SIGPLAN Notices, vol. 9, pp. 31-36, May 1974.||R. D. Gordon and M. H. Halstead, ""An experiment comparing FORTRAN programming times with the software physics hypothesis"", 1976 Fall Joint Comput. Conf. AFIPS Conf. Proc., vol. 45, pp. 935-937, 1976.||M. H. Halstead, ""Language level a missing concept in information theory"", ACM SIGME: Performance Evaluation Review, vol. 2, pp. 7-9, Mar. 1973.||M. H. Halstead, ""Natural laws controlling algorithm structure?"", ACM SIGPLAN Notices, vol. 7, pp. 19-26, Feb. 1972.||M. H. Halstead, Software physics: Basic principles, May 1975.||M. H. Halstead, ""Toward a theoretical basis for estimating programming efforts"", Proc. ACM Nat. Conf., vol. 30, pp. 222-224, 1975-Oct.||M. H. Halstead and R. Bayer, ""Algorithm Dynamics"", Proc. ACM Nat. Conf., vol. 28, pp. 126-135, 1973-Aug.||B. W. Kernighan and P. J. Plauger, The Elements of Programming Style, New York:McGraw-Hill, 1974.||B. W. Kernighan and P. J. Plauger, ""Programming style: Examples and counterexamples"", ACM Comput. Surveys, vol. 6, pp. 303-319, Dec. 1974.||D. E. Knuth, ""Structured programming with GO TO-statements"", ACM Comput. Surveys, vol. 6, pp. 261-301, Dec. 1974.||H. F. Ledgard and W. C. Cave, ""Cobol under control"", Commun. Ass. Comput. Mach., vol. 19, pp. 601-608, Nov. 1976.||H. F. Ledgard and M. Marcotty, ""A genealogy of control structures"", Commun Ass. Comput. Mach., vol. 18, pp. 629-639, Nov. 1975.||T. Love, ""An experimental investigation of the effect of program structure on program understanding"", ACM SIGPLAN Notices: Language Design for Reliable Software, vol. 12, pp. 105-113, Mar. 1977.||P. Naur, ""GO TO-statements and good ALGOL style"", BIT, vol. 3, pp. 204-208, 1963.||B. Shneiderman, ""Exploratory experiments in programmer behavior"", Int J. Computer and Information Sciences, vol. 5, no. 2, June 1976.||||M. E. Sime, T. R. Green and D. J. Guest, ""Psychological evaluation of two conditional constructions used in computer languages"", Int. J. Man-Machine Studies, vol. 5, pp. 105-113, Jan. 1973.||L. E. Walston and C. P. Felix, ""A method of program measurement and estimation"", IBM Syst. J., vol. 16, no. 1, pp. 54-73, 1977.||L. M. Weissman, A methodology for studying the psychological complexity of computer programs, 1974.||L. M. Weissman, ""Psychological complexity of computer programs: An experimental methodology"", ACM SIGPLAN Notices, vol. 9, pp. 25-36, June 1974.||N. Wirth, ""On the composition of well-structured programs"", ACM Comput. Surveys, vol. 6, pp. 247-259, Dec. 1974.||P. M. Zislis, An experiment in algorithm implementation, June 1973.||",Measuring Improvements in Program Clarity
"T. Nishigaki&&Systems Development Laboratory, Hitachi and Limited, Kawasaki, Japan|","Although the effectiveness of the knee criterion [7] as a virtual memory management strategy is widely accepted, it has been impossible to take advantage of it in a practical system, because little information is available about the program behavior of executing jobs.",10.1109/TSE.1983.236297,IEEE Transactions on Software Engineering,"Knee,Memory management,Abstracts,History,Smoothing methods,Resource management,Throughput,Operating systems","L. A. Belady and C. J. Kuehner, ""Dynamic space-sharing in computer systems"", Commun. Ass. Comput. Mach., vol. 12, no. 5, pp. 282-288, 1969.||W. W. Chiu and W.-M. Chow, ""A performance of MVS"", IBM Syst. J., vol. 17, no. 4, pp. 444-462, 1978.||W. W. Chu and H. Opderbeck, ""The page fault frequency replacement algorithm"", Proc. FJCC, pp. 597-609, 1972.||P. J. Denning, ""The working set model for program behavior"", Commun. Ass. Comput. Mach., vol. 11, no. 5, pp. 323-333, 1968.||P. J. Denning and S. C. Schwartz, ""Properties of the working-set model"", Commun. Ass. Comput. Mach., vol. 15, no. 3, pp. 191-198, 1972.||P. J. Denning and G. S. Graham, ""Multiprogrammed memory management"", Proc. IEEE, vol. 63, no. 6, pp. 924-939, 1975.||P. J. Denning, K. C. Kahn, J. Leroudier, D. Potier and R. Suri, ""Optimal multiprogramming"", Acta Informatica, vol. 7, pp. 197-216, 1976.||P. J. Denning and K. C. Kahn, ""An L = S criterion for optimal multiprogramming"", Proc. ACM SIGMETRICS Int. Symp. Comput. Performance Modeling Measurement and Evaluation, pp. 219-229, 1976.||T.-H. Fin and H. Kameda, ""An extention of a model for memory partitioning in multiprogrammed virtual memory computer systems"", J. Inform. Processing, vol. 2, no. 2, pp. 89-96, 1979.||G. S. Graham and P. J. Denning, ""On the relative controllability of memory policies"", Proc. Int. Symp. Comput. Performance Modeling Measurement and Evaluation, pp. 411-428, 1977.||R. K. Gupta and M. A. Franklin, ""Working set and page fault frequency paging algorithms: A performance comparison"", IEEE Trans. Comput., vol. C-27, no. 8, pp. 706-712, 1978.||D. J. Hatfield and J. Gerald, ""Program restructuring for virtual memory"", IBM Syst. J., vol. 10, no. 3, pp. 168-192, 1971.||A. Krzesinski and P. Teunissen, ""A multiclass network model of a demand paging computer system"", Acta Informatica, vol. 9, pp. 331-343, 1978.||J. Leroudier and D. Potier, ""Principles of optimality for multiprogramming"", Proc. ACM SIGMETRICS Int. Symp. Comput. Performance Modeling Measurement and Evaluation, pp. 211-218, 1976.||H. W. Lynch and J. B. Page, ""The OS/VS2 release 2 system resources manager"", IBM Syst. J., vol. 13, no. 4, pp. 274-291, 1974.||T. Masuda, ""Analysis of memory management strategies for multiprogrammed virtual storage systems"", J. Inform. Processing, vol. 1, no. 1, pp. 14-24, 1978.||T. Nishigaki, ""The general resources manager based on feedback concept in multiprogrammed computer systems"", Joho-Shori, vol. 19, no. 11, pp. 1026-1033, 1978.||T. Nishigaki, C. Ikeda, K. Ohmachi and K. Noguchi, ""An experiment on the general resources manager in multiprogrammed computer systems"", J. Inform. Processing, vol. 1, no. 4, pp. 187-192, 1979.||T. Nishigaki, K. Noguchi and K. Ohmachi, ""An approach to the GRM performance analysis by asymptotic approximation"", J. Inform. Processing, vol. 3, no. 2, pp. 59-67, 1980.||T. Nishigaki and C. Ikeda, ""A study and experiment on the optimum working set in a virtual memory system"", Trans. Inform. Process. Soc. Japan, vol. 21, no. 4, pp. 325-331, 1980.||B. G. Prieve, ""VMIN–An optimal variable-space page replacement algorithm"", Commun. Ass. Comput. Mach., vol. 19, no. 5, pp. 295-297, 1976.||J. Rodriguez-Rosell and J.-P. Dupuy, ""The design implementation and evaluation of a working set dispatcher"", Commun. Ass. Comput. Mach., vol. 16, no. 4, pp. 247-253, 1973.||A. J. Smith, ""A modified working set paging algorithm"", IEEE Trans. Comput., vol. C-25, no. 9, pp. 907-914, 1976.||A. J. Smith, ""Bibliography on paging and related topics"", Oper. Syst. Rev., vol. 12, no. 4, pp. 39-56, 1978.||J. R. Spirn and P. J. Denning, ""Experiments with program locality"", Proc. FJCC, pp. 611-621, 1972.||R. Turner and B. Strecker, ""Use of the LRU stack depth distribution for simulation of paging behavior"", Commun. Ass. Comput. Mach., vol. 20, no. 11, pp. 795-798, 1977.||P. J. Denning and K. C. Kahn, ""A study of program locality and lifetime functions"", Proc. SIGOPS 5th Symp. Oper. Syst. Principles, pp. 207-216, 1975.||P. J. Denning, ""Working sets past and present"", IEEE Trans. Software Eng., vol. SE-6, no. 1, pp. 64-84, 1980.||M. Parent and D. Potier, ""A note on the influence of program loading on the page fault rate"", Acta Informatica, vol. 8, pp. 359-370, 1977.||",Experiments on the Knee Criterion in a Multiprogrammed Computer System
"B.K. Rosen&&Computer Sciences Department, IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","Theorists and implementers can easily interact in such a way that software performs improperly, even if there are no mathematical mistakes in the theory and no coding bugs in the implementation. This correspondence explains the problem and some ways to cope with it. Examples are drawn from program proving, language design, and code optimization.",10.1109/TSE.1978.231471,IEEE Transactions on Software Engineering,"Design optimization,Computer errors,Extrapolation,Software performance,Computer bugs,Software engineering,Error correction,Writing,Reliability theory","F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Ass. Comput. Mach., vol. 19, pp. 137-147, Mar. 1976.||J. W. DeBakker, ""Least fLxed points revisited"", Theor. Comput. Sci., vol. 2, pp. 155-181, Sept. 1976.||S. L. Graham and M. Wegman, ""A fast and usually linear algorithm for global flow analysis"", J. Ass. Comput. Mach., vol. 23, pp. 172-202, Jan. 1976.||J. B. Kam and J. D. Ullman, ""Global data flow analysis and iterative algorithms"", J. Ass. Comput. Mach., vol. 23, pp. 158-171, Jan. 1976.||R. J. Lipton, ""Reduction: A new method of proving properties of systems of processes"", Proc. 2nd ACM Symp. Principles Programming Languages, pp. 78-86, 1975-Jan.||R. J. Lipton, ""Reduction: A new method of proving properties of parallel programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 717-721, Dec. 1975.||Z. Manna, S. Ness and J. Vuillemin, ""Inductive methods for proving properties of programs"", Commun. Ass. Comput. Mach., vol. 16, pp. 491-502, Aug. 1973.||G. D. Plotkin, ""Call by name call by value and the lambda calculus"", Theoret. Comput. Sci., vol. 1, pp. 125-159, Dec. 1975.||B. K. Rosen, ""Tree-manipulating systems and Church-Rosser theorems"", J. Ass. Comput. Mach., vol. 20, pp. 160-187, Jan. 1973.||B. K. Rosen, ""High level data flow analysis"", Commun. Ass. Comput. Mach., vol. 20, pp. 712-724, Oct. 1977.||B. K. Rosen, ""Data flow analysis for procedural languages"", J. Ass. Comput. Mach..||J. Vuillemin, ""Correct and optimal implementations of recursion in a simple programming language"", J. Comput. Syst. Sci., vol. 9, pp. 332-354, Dec. 1974.||B. Wegbreit, ""Property extraction in well-founded property sets"", IEEE Trans. Software Eng., vol. SE-1, pp. 270-285, Sept. 1975.||",The Toy Language Syndrome
"R.C. Cheung&&Bell Laboratories, Naperville, IL, USA|","A user-oriented reliability model has been developed to measure the reliability of service that a system provides to a user community. It has been observed that in many systems, especially software systems, reliable service can be provided to a user when it is known that errors exist, provided that the service requested does not utilize the defective parts. The reliability of service, therefore, depends both on the reliability of the components and the probabilistic distribution of the utilization of the components to provide the service. In this paper, a user-oriented software reliability figure of merit is defined to measure the reliability of a software system with respect to a user environment. The effects of the user profile, which summarizes the characteristics of the users of a system, on system reliability are discussed. A simple Markov model is formulated to determine the reliability of a software system based on the reliability of each individual module and the measured intermodular transition probabilities as the user profile. Sensitivity analysis techniques are developed to determine modules most critical to system reliability. The applications of this model to develop cost-effective testing strategies and to determine the expected penalty cost of failures are also discussed. Some future refinements and extensions of the model are presented.",10.1109/TSE.1980.234477,IEEE Transactions on Software Engineering,"Software reliability,Software systems,Software measurement,Sensitivity analysis,Application software,Testing,Costs,Hardware,Computer bugs","Z. Jelinski and P. B. Moranda, ""Software reliability research"" in Statistica Computer Performance Evaluation, New York:Academic, pp. 465-484, 1972.||M. L. Shooman, ""Operational testing of software reliability during program development"", Rec. IEEE Symp. Comput. Software Rel., pp. 51-57, 1973.||P. B. Moranda, ""Predictions of software reliability during debugging"", 1975 Proc. Annu. Rel. and Maintainability Symp., 1975-Jan.||J. D. Musa, ""A theory of software reliability and its application"", IEEE Trans. Software Eng., vol. SE-1, pp. 312-327, Sept. 1975.||C. V. Ramamoorthy, R. C. Cheung and K. H. Kim, Reliability and integrity of large computer programs, 1974.||R. C. Cheung, A structural theory for improving software reliability, 1974.||B. Littlewood, ""How to measure software reliability and how not to . . ."", Proc. 3rd Int. Conf. Software Eng., pp. 37-45, 1978-May.||L. A. Belady, ""A study of replacement algorithms for a virtual‑storage computer"", IBM Syst. J., vol. 5, no. 2, pp. 78-101, 1966.||R. L. Mattson, J. Gecsei, D. R. Slutz and I. L. Traiger, ""Evaluation techniques for storage hierarchies"", IBM Syst. J., vol. 9, no. 2, pp. 78-117, 1970.||D. J. Hatfield, ""Experiments of page size program access patterns and virtual memory performance"", IBM J. Res. Develop., pp. 58-66, Jan. 1972.||B. Littlewood, ""A reliability model for Markov structured software"", Proc. 1975 Int. Conf. Reliable Software, pp. 204-207, 1975-Apr.||B. Littlewood, ""A semi-Markov model for software reliability with failure costs"", Proc. Symp. Comput. Software Eng., pp. 281-300, 1976-Apr.||H. A. Sholl and T. L. Booth, ""Software performance modeling using computation structures"", IEEE Trans. Software Eng., vol. SE-1, pp. 414-420, Dec. 1975.||T. L. Booth, ""Performance optimization of software systems processing information sequences modeled by probabilistic languages"", IEEE Trans. Software Eng., vol. SE-5, pp. 31-44, Jan. 1979.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., vol. 15, pp. 1053-1058, Dec. 1972.||G. J. Myers, Reliable Software Through Composite Design, New York:Petrocelli/Charter, 1975.||C. V. Ramamoorthy, ""The analytic design of a dynamic look ahead and program segmenting system for multiprogrammed computers"", Proc. Ass. Comput. Mach. Nat. Conf., pp. 229-239, 1966.||T. B. Pinkerton, Program behavior and control in virtual storage computer systems, 1968.||D. J. Hatfield and J. Gerald, ""Program restructuring for virtual memory"", IBM Syst. J., vol. 10, no. 3, pp. 168-192, 1971.||E. Cinlar, Introduction to Stochastic Processes, NJ, Englewood Cliffs:Prentice-Hall, 1975.||K. Nomizu, Fundamentals of Linear Algebra, New York:McGraw-Hill, 1966.||B. Randell, ""System structure for software fault-tolerance"", Proc. 1975 Int. Conf. Reliable Software, pp. 437-457, 1975.||S. S. Yau and R. C. Cheung, ""Design of self-checking software"", Proc. 1975 Int. Conf. Reliable Software, pp. 450-457, 1975.||R. C. Cheung, K. H. Kim, C. V. Ramamoorthy and S. S. Reddi, ""Automated generation of self-metric software"", 7th Hawaii Int. Conf. Syst. Sci., 1974-Jan.||R. C. Cheung and C. V. Ramamoorthy, ""Optimal measurement of program path frequencies and its applications"", Proc. 1975 Int. Fed. Automat. Contr. Congr., 1975-Aug.||J. R. Brown and M. Lipow, ""Testing for software reliability"", Proc. 1975 Int. Conf. Reliable Software, pp. 418-427, 1975-Apr.||G. C. Nelson, Software reliability, Nov. 1975.||D. L. Parnas, ""Some conclusions from an experiment in software engineering techniques"", Proc. Fall Joint Comput. Conf., pp. 325-329, 1972.||D. L. Parnas, ""A technique for software module specifications with examples"", Commun. Ass. Comput. Mach., pp. 330-336, May 1972.||""Special Issue on Measurement of Program Behavior"", Computer, Nov. 1976.||",A User-Oriented Software Reliability Model
"A. Birman&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|W.H. Joyner&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","System correctness often presents itself as the problem of showing that two programs, the ""specification"" and the ""implementation,"" are in some sense equivalent. Such a concept of equivalence is supplied by Milner's definition of simulation between programs. This paper presents a problem-reduction approach to proving simulation, and describes an interactive system designed for this purpose.",10.1109/TSE.1976.233535,IEEE Transactions on Software Engineering,"Computational modeling,Interactive systems,Certification","A. Birman, ""On proving correctness of microprograms"", IBM J. Res. Develop., vol. 18, pp. 250-266, May 1974.||R. Burstall, ""An algebraic description of programs with assertions verification and simulation"", Proc. ACM Conf. on Proving Assertions about Programs, pp. 7-14, 1972-Jan.||W. C. Carter, W. H. Joyner and G. B. Leeman, ""Automated experiments in validating microprograms"", 5th Fault Tolerant Comput. Symp., 1975.||P. Deutsch, An interactive program verifier, 1973.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. in Applied Mathematics, vol. 19, pp. 19-32, 1967.||J. A. Goguen, ""On homomorphisms correctness termination unfoldments and equivalence of flow diagram programs"", Proc. 13th IEEE Conf. on Switching and Automata Theory, 1972.||D. I. Good, R. L. London and W. W. Bledsoe, ""An interactive program verification system"", IEEE Trans. Software Eng., vol. SE-1, pp. 59-67, Mar. 1975.||F. W. von Henke and D. C. Luckham, ""A methodology for verifying programs"", Proc. Int. Joint Conf. Reliable Software, pp. 156-164, 1975-Apr.||S. Igarashi, R. L. London and D. C. Luckham, Automatic program verification: a logical basis and its imphlentation, 1973.||R. M. Karp and R. E. Miller, ""Parallel program schemata"", J. Computer and System Sciences, vol. 3, pp. 147-195, May 1969.||J. C. King, ""A program verifier"", Proc. IFIP, pp. 235-249, 1971-Aug.||J. C. King, ""A new approach to program testing"", Proc. Int. Joint Conf. Reliable Software, pp. 235-249, 1975-Apr.||G. B. Leeman, ""Some problems in certifying microprograms"", IEEE Trans. Comput., vol. C-24, pp. 545-553, May 1975.||G. B. Leeman, W. C. Carter and A. Birman, ""Some techniques for microprogram validation"", Proc. IFIP, pp. 76-80, 1974-Aug.||R. L. London and D. R. Musser, ""The application of a symbolic mathematical system to program verification"", Proc. ACM Nat. Conf., pp. 265-273, 1974.||R. Milner, ""An algebraic definition of simulation between programs"", Proc. 2nd Int. Joint Conf. Artificial Intelligence, pp. 481-489, 1971.||R. Milner, ""Implementation and application of Scott's logic for computable functions"", Proc. ACM Conf. on Proving Assertions about Programs, pp. 1-6, 1972-Jan.||P. Naur, ""Proof of algorithms by general snapshots"", BIT, vol. 6, pp. 310-316, 1966.||N. J. Nilsson, Problem Solving Methods in Artificial Intelligence, New York:McGraw-Hill, 1971.||T. W. Pratt, ""Kernel equivalence of programs and proving kernel equivalence and correctness by test cases"", Proc. 2nd Int. Joint Conf. Artificial Intelligence, pp. 474-480, 1971.||J. F. Rulifson, J. A. Derksen and R. J. Waldinger, QA4: A procedural calculus for intuitive reasoning, CA, Stanford:Stanford Res. Inst., Stanford Univ., Nov. 1972.||N. Suzuki, ""Verifying programs by algebraic and logical reduction"", Proc. Int. Joint Conf. Reliable Software, pp. 473-481, 1975-Apr.||R. J. Waldinger and K. N. Levitt, ""Reasoning about programs"", Artificial Intelligence, vol. 5, pp. 235-316, 1974.||L. Yelowitz, ""Derivation of a path connectivity matrix for tagged flowcharts"", J. Ass. Comput. Mach., vol. 22, pp. 145-154, Jan. 1975.||",A Problem-Reduction Approach to Proving Simulation Between Programs
"L. Lamport&&Massachusetts Computer Associates, Inc., Wakefield, MA, USA|","The inductive assertion method is generalized to permit formal, machine-verifiable proofs of correctness for multiprocess programs. Individual processes are represented by ordinary flowcharts, and no special synchronization mechanisms are assumed, so the method can be applied to a large class of multiprocess programs. A correctness proof can be designed together with the program by a hierarchical process of stepwise refinement, making the method practical for larger programs. The resulting proofs tend to be natural formalizations of the informal proofs that are now used.",10.1109/TSE.1977.229904,IEEE Transactions on Software Engineering,"Safety,Flowcharts,Error correction,Computer errors,Humans,Mathematics,Testing","E. A. Ashcroft, ""Proving assertions about parallel programs"", J. Comput. Syst. Sci., vol. 10, pp. 110-135, Jan. 1975.||E. A. Ashcroft and Z. Manna, ""Formalization of properties of parallel programs"" in Machine Intelligence, Edinburgh Univ. Press, vol. 6, 1970.||G. Belpaire and J. P. Wilmotte, ""Correctness of realization of levels of abstraction in operating systems"" in Operating Systems, New York:Springer Verlag, 1974.||P. Brinch Hansen, ""A comparison of two synchronizing concepts"", Acta Informatica, vol. 1, pp. 190-199, 1972.||P. Brinch Hansen, ""Concurrent programming concepts"", Computing Surveys, vol. 5, pp. 223-245, Dec. 1973.||M. E. Conway, ""A multiprocessor system design"", 1963 Fall Joint Comput. Conf. AFIPS Conf Proc., vol. 23, pp. 139-146, 1963.||P. J. Courtois, F. Heymans and D. L. Parnas, ""Concurrent control with 'readers' and 'writers'"", Commun. Ass. Comput. Mach., vol. 14, pp. 667-668, Oct. 1971.||E. W. Dijkstra, On-the fly garbage collection: An exercise in cooperation.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. Appl. Math., vol. 19, pp. 19-32, 1967.||A. N. Habermann, ""Synchronization of communicating processes"", Commun. Ass. Comput. Mach., vol. 15, pp. 177-184, Mar. 1970.||C. A. R. Hoare, Parallel programming–An axiomatic approach, Stanford A. I. Lab., Oct. 1973.||R. M. Keller, ""Formal verification of parallel programs"", Commun. Ass. Comput. Mach., vol. 19, pp. 371-384, July 1976.||L. Lamport, ""A new solution of Dijkstra's concurrent programming problem"", Commun. Ass. Comput. Mach., vol. 17, pp. 453-455, Aug. 1974.||L. Lamport, ""On concurrent reading and writing"" in Commun. Ass. Comput. Mach., Massachusetts Computer Associates, Inc., Sept. 1974.||K. N. Levitt, ""The application of program-proving techniques to the verification of synchronization processes"", 1972 Fall Joint Comput. Conf AFIPS Conf. Proc., vol. 41, pp. 33-47, 1972.||S. Owicki, Axiomatic proof techniques for parallel programs, Aug. 1975.||S. Owicki and D. Gries, ""An axiomatic proof technique for parallel programs"", Acta Informatica.||",Proving the Correctness of Multiprocess Programs
"Raymond J. Rubey&&Logicon, Inc., Dayton, OH, USA|Joseph A. Dana&&Process Systems Division, Logicon, Inc., Merrifield, VA, USA|Peter W. Biche&&Logicon, Inc., Torrance, CA, USA|","Discusses the need for quantitative descriptions of software errors and methods for gathering such data. The software development cycle is reviewed, and the frequency of the errors that are detected during software development and independent validation are compared. Data obtained from validation efforts are presented, indicating the number of errors in ten categories and three severity levels; the inferences that can be drawn from these data are discussed. Data describing the effectiveness of validation tools and techniques as a function of time are presented and discussed. The software validation cost is contrasted with the software development cost. The applications of better quantitative software error data are summarized.",10.1109/TSE.1975.6312835,IEEE Transactions on Software Engineering,"Software,Encoding,Debugging,Software reliability,Documentation,Error analysis",,Quantitative aspects of software validation
"S.H. Zweben&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|M.H. Halstead&&Department of Computer Science, Purdue University, West Lafayette, IN, USA|","During the past few years, several investigators have noted definite patterns in the distribution of operators in computer programs. Their proposed models have provided explanations for other observed software phenomena and have suggested possible relationships between programming languages and natural languages. However, these models contain notable deficiencies.",10.1109/TSE.1979.234164,IEEE Transactions on Software Engineering,"Computer languages,Frequency estimation,Distributed computing,Natural languages,Production,Software algorithms,Mathematical model,Information science,Computer science,Roads","J. L. Elshoff, ""A study of the structural composition of PL/I programs"", ACM SIGPLAN Notices, vol. 13, pp. 29-37, June 1978.||R. W. Gurney, Introduction to Statistical Mechanics, New York:McGraw-Hill, 1949.||M. H. Halstead, G. T. Uber and K. R. Gielow, ""An algorithmic search procedure for program generation"", 1968 Spring Joint Comput. Conf. AFIPS Conf. Proc., vol. 30, pp. 657-662, 1968.||M. H. Halstead, Elements of Software Science, New York:Elsevier, 1977.||A. Laemmel and M. Shooman, Software modeling studies, vol. II, Apr. 1977.||S. H. Zweben, ""A study of the physical structure of algorithms"", IEEE Trans. Software Eng., vol. SE-3, pp. 250-258, May 1977.||",The Frequency Distribution of Operators in PL/I Programs
"C.H.C. Leung&&Department of Computer Science, University College London, London, UK|","Fragmentation of storage is a common phenomenon in both main storage and secondary storage. Fragmentation in secondary storage not only jeopardizes the allocation of space but also, since secondary storage access time–unlike that in main storage–is typically nonuniform, a decrease in efficiency arising from additional head movement may also result. A fragmented storage exhibits a checkerboard like pattern with free and occupied space alternating one another. Such alternating storage configuration is analyzed using alternating renewal processes. Two main types of storage processing are distinguished: contiguous storage allocation and noncontiguous storage allocation. The latter allows a request to be scattered over different locations while the former requires it to be allocated in a single continuous area. It is found that the reduction in operating efficiency due to fragmentation is quite substantial for both types of processing. The deterioration is especially marked in the former and is strongly affected by 1) the request size and 2) the storage utilization. Expressions for the generating functions of the performance penalties are derived. The results of the model are compared with published measurements and satisfactory agreement is obtained.",10.1109/TSE.1983.236298,IEEE Transactions on Software Engineering,"Scattering,Degradation,Information retrieval,Frequency locked loops,Computer science,System performance,Magnetic heads,Terminology","T. Betteridge, ""An analytic storage allocation model"", Acta Informatica, vol. 3, pp. 101-122, Aug. 1974.||T. Betteridge, An algebraic analysis of storage fragmentation, 1979.||A. G. Bromley, ""Memory fragmentation in buddy methods for dynamic storage allocation"", Acta Informatica, vol. 14, pp. 107-117, Aug. 1980.||J. P. Considine, A computable measure of fragmentation for direct access volumes, Oct. 1976.||D. R. Cox, Renewal Theory, London:Methuen, 1962.||VAX 11/780 Technical Summary, MA, Maynard:Digital Equipment Corp., 1978.||W. Feller, An Introduction to Probability Theory and Its Applications, New York:Wiley, vol. 2, 1971.||P. A. Franaszek and J. P. Considine, ""Reduction of storage fragmentation on direct access devices"", IBM J. Res. Develop., vol. 23, pp. 140-148, Mar. 1979.||E. Gelenbe, ""The two-thirds rule for dynamic storage allocation under equilibrium"", Inform. Processing Lett., vol. 1, pp. 59-60, July 1971.||IBM OS Direct-Access Device Space Management Logic, NY, White Plains, 1974.||D. E. Knuth, The Art of Computer Programming Vol. 1: Fundamental Algorithms, MA, Reading:Addison-Wesley, 1973.||C. H. C. Leung, ""A simple model for the performance analysis of disc storage fragmentation"", Comput. J., vol. 25, pp. 193-198, May 1982.||C. H. C. Leung, ""An improved optimal-fit procedure for dynamic storage allocation"", Comput. J., vol. 25, pp. 199-206, May 1982.||B. H. Margolin, R. P. Parmlee and M. Schatzoff, ""Analysis of free storage algorithms"", IBM Syst. J., vol. 10, no. 4, pp. 283-304, 1971.||I. P. Page, ""Optimal fit of arbitrary sized segments"", Comput. J., vol. 25, pp. 32-33, Feb. 1982.||B. Randell, ""A note on storage fragmentation and program segmentation"", Commun. Ass. Comput. Mach., vol. 12, pp. 365-369, July 1969.||C. M. Reeves, ""Free store distribution under random-fit allocation part 1"", Comput. J., vol. 22, pp. 346-351, Nov. 1979.||C. M. Reeves, ""Free store distribution under random-fit allocation part 2"", Comput. J., vol. 23, pp. 298-306, Nov. 1980.||W. F. Sharpe, The Economics of Compurers, New York:Columbia Univ. Press, 1969.||J. E. Shore, ""On the external storage fragmentation produced by first fit and best fit allocation policies"", Commun. Ass. Comput. Mach., vol. 18, pp. 433-440, Aug. 1975.||J. E. Shore, ""Anomalous behaviour of the fifty percent rule"", Commun. Ass. Comput. Mach., vol. 20, pp. 812-820, Nov. 1977.||C. K. Wong, ""Minimizing expected head movement in one‑dimensional and two-dimensional mass storage systems"", Comput. Surveys, vol. 12, pp. 167-178, June 1980.||",Analysis of Secondary Storage Fragmentation
"T.W. Pratt&&Department of Applied Mathematics and Computer Science, University of Virginia, Charlottesville, VA, USA|","The control computation for a loop in a program is that part of the program concerned with the initialization, incrementation, and testing of the variables that determine the flow of control into, through, and out of the loop. The elements of loop control computations are idenified and their role in structuring our understanding of loops is analyzed. It is argued, through examples drawn from a Pascal compiler, that the intelligibility of a loop is closely tied to the accessibility and intelligibility of the loop control computation. It is further argued, from an analysis of all the loops in this compiler, that most loop control computations fail in a few standard patterns, mostly concerned with the sequential processing of elements of data structures. In light of these results, common loop control statements are critiqued. It appears that better loop control structures than the while, repeat-until, and similar statement structures are possible and desirable, and some proposals for better structures are given.",10.1109/TSE.1978.231478,IEEE Transactions on Software Engineering,"Testing,Centralized control,Failure analysis,Pattern analysis,Data structures,Lighting control,Proposals,Mathematics,Computer science","A. Ambler, D. Good, J. Browne, W. Burger, R. Cohen, C. Hoch, et al., ""GYPSY: A language for specification and implementation of verifiable programs"", ACM SIGPLAN Notices: Proc. Conf. Language Design for Reliable Software, vol. 12, no. 3, pp. 1-10, 1977-Mar.||U. Ammann, Compiler for PASCAL 6000–3.4 Release 1 Update 1-10, Zurich:Institut fur Informatik, 1975.||PASCAL User Manual and Report, 1975.||B. Kernighan and P. Plauger, Software Tools, MA, Reading:Addison-Wesley, 1976.||D. Knuth, ""Structured programming with goto statements"", Comput Surveys, vol. 6, pp. 261-302, Dec. 1974.||B. Lampson, J. Horning, R. London, J. Mitchell and G. Popek, ""Report on the programming language EUCLID"", ACM SIGPLAN Notices, vol. 12, no. 2, pp. 1-79, Feb. 1977.||H. Ledgard and M. Marcotty, ""A genealogy of control structures"", Commun. Ass. Comput. Mach., vol. 18, pp. 629-638, Nov. 1975.||B. Liskov, A. Snyder, R. Atkinson and C. Schaffert, ""Abstraction mechanisms in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-576, Aug. 1977.||A. Perlis, ""The synthesis of algorithmic systems"", J. Assoc. Comput. Mach., vol. 14, pp. 1-9, Jan. 1967.||M. Shaw, W. Wulf and R. London, ""Abstraction and verification in Alphard: Defning and specifying iteration and generators"", Commun. Ass. Comput. Mach., vol. 20, pp. 553-563, Aug. 1977.||",Control Computations and the Design of Loop Control Structures
"S.S. Yau&&Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, IL, USA|Fu-Chung Chen&&Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, IL, USA|","A control flow checking scheme capable of detecting control flow errors of programs resulting from software coding errors, hardware malfunctions, or memory mutilation during the execution of the program is presented. In this approach, the program is partitioned into loop-free intervals and a database containing the path information in each of the loop-free intervals is derived from the detailed design. The path in each loop-free interval actually traversed at run time is recorded and then checked against the information provided in the database, and any discrepancy indicates an error. This approach is general, and can detect all uncompensated illegal branches. Any uncompensated error that occurs during the execution of a loop-free interval and manifests itself as a wrong branch within the loop-free interval or right after the completion of execution of the loop-free interval is also detectable. The approach can also be used to check the control flow in the testing phase of program development. The capabilities, limitations, implementation, and the overhead of using this approach are discussed.",10.1109/TSE.1980.234478,IEEE Transactions on Software Engineering,"Testing,Error correction,Databases,Computer errors,Hardware,Runtime,Patient monitoring,Control systems,Fault detection,Relays","S. S. Yau and R. C. Cheung, ""Design of self-checking software"", Proc. Int. Conf. Reliable Software, pp. 450-457, 1975-Apr.||C. V. Ramamoorthy and S. F. Ho, ""Testing large software with automated software evaluation systems"", IEEE Trans. Software Eng., vol. SE-1, pp. 46-58, Mar. 1975.||J. R. Kane and S. S. Yau, ""Concurrent software fault detection"", IEEE Trans. Software Eng., vol. SE-1, pp. 87-99, Mar. 1975.||C. V. Ramamoorthy, K. H. Kim and W. T. Chen, ""Optimal placement of software monitors aiding systematic testing"", IEEE Trans. Software Eng., vol. SE-1, pp. 403-411, Dec. 1975.||T. S. Chow, ""Testing software design modeled by finite-state machine"", IEEE Trans. Software Eng., vol. SE-4, pp. 178-187, May 1978.||P. J. Denning, ""Fault tolerant operating systems"", ACM Computing Surveys, vol. 8, pp. 359-389, Dec. 1976.||F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Ass. Comput. Mach., vol. 19, pp. 137-147, Mar. 1976.||M. R. Paige, ""On partitioning program graphs"", IEEE Trans. Software Eng., vol. SE-3, pp. 386-393, Nov. 1977.||L. L. Cheng, Program design language–An introduction, Jan. 1978.||S. H. Caine and E. K. Gordon, ""PDL–A tool for software design"", Proc. 1975 Nat. Comput. Conf., pp. 271-276, l975-June.||P. V. Leer, ""Top-down development using a program design language"", IBM Syst. J., vol. 15, pp. 155-169, 1976.||J. F. Stay, ""HIPO and integrated program design"", IBM Syst. J., vol. 15, pp. 143-154, 1976.||L. J. Peters and L. L. Tripp, ""Software design representation schemes"", Proc. Symp. Computer Software Eng., pp. 31-56, 1976-Apr.||C. V. Ramamoorthy, S. F. Ho and W. T. Chen, ""On the automated generation of program test data"", IEEE Trans. Software Eng., vol. SE-2, pp. 293-300, Dec. 1976.||W. E. Howden, ""DISSECT–A symbolic evaluation and program testing system"", IEEE Trans. Software Eng., vol. SE-4, pp. 70-73, Jan. 1978.||J. J. Horning, H. C. Lauer, P. M. Mellior-Smith and B. Randell, ""A program structure for error detection and recovery"", Proc. Conf. Operating Systems: Theoretical and Practical Aspects, pp. 171-187, 1974-Apr.-23-25.||S. S. Yau, R. C. Cheung and D. C. Cochrane, ""An approach to error-resistant software design"", Proc. 2nd Int. Conf. Software Eng., pp. 429-436, 1976-Oct.||T. Anderson and R. Kerr, ""Recovery blocks in action: A system supporting high reliability"", Proc. 2nd Int. Conf. Software Eng., pp. 447-457, 1976-Oct.||K. H. Kim and C. V. Ramamoorthy, ""Failure-tolerant parallel programming and its supporting system architecture"", Proc. 1976 Nat. Comput. Conf., vol. 45, pp. 413-423.||L. G. Stucki, ""Automatic generation of self-metric software"", Rec. 1973 IEEE Symp. Computer Software Reliability, pp. 94-100, 1973-Apr.||B. Parhami, ""The concept of self-checking programs"", Proc. 7th Int. Conf. Fault-Tolerant Computing, pp. 216, 1977-June.||",An Approach to Concurrent Control Flow Checking
"S.P. Ghosh&&IBM Research Laboratory, San Jose, CA, USA|W.G. Tuel&&IBM Research Laboratory, San Jose, CA, USA|","A statistical design of an experiment for modeling the performance (access time) of a data base (DB) system in a controlled environment has been outlined. A three-factor pilot experiment with retrieval sequence, logical view (combined with access method), and target segment type as factors was designed and the results analyzed for a specific IMS batch DB. It was found that: 1) the variation of sequences of DB retrieval calls in the application program did not have any signifilcant effect on the access time, whereas the other two factors did have significant effect; 2) the variability in access time is not completely explained by these three factors; and 3) the distribution of the residual error is ""nonnormal,"" with a large positive skew.",10.1109/TSE.1976.233536,IEEE Transactions on Software Engineering,"System performance,Control system synthesis,Computer errors,Information management,Software systems,Intelligent systems,Memory management,Operating systems,Hardware,Time measurement","U. Grenander and R. F. Tsao, ""Quantitative methods for evaluating computer system performance: A review and proposal"" in Statistical Computer Performance Evaluation, New York:Academic, pp. 3-24, 1972.||R. F. Tsao, L. W. Comeau and B. H. Margolin, ""A multi-factor paging experiment: I-The experiment and conclusions"" in Statistical Computer Performance Evaluation, New York:Academic, pp. 103-134, 1972.||R. F. Tsao and B. H. Margolin, ""A multi-factor paging experiment II: Statistical methodology"" in Statistical Computer Performance Evaluation, New York:Academic, pp. 135-162, 1972.||Information Management System.||System Programming Reference Manual.||System Application Design Guide.||O. Kempthorne, The Design and Analysis of Experiments. Huntington, NY:R. E. Krieger, 1973.||W. G. Cochran and G. M. Cox, Experimental Design, New York:Wiley, 1957.||M. G. Kendall and A. Stuart, The Advanced Theory of Statistics, New York:Hafner, vol. 2, 1961.||The DIME Geocoding System, 1970.||J. L. Hodges and E. L. Lehman, Basic Concepts of Probability and Statistics, CA, San Francisco:Holden-Day.||J. Buzen, ""Analysis of system bottlenecks using a queuing network model"", ACM SIGOPS Workshop System Performance Evaluation, 1971.||J. E. Shemer and D. E. Heying, ""Performance modeling and empirical measurements in a system designed for batch and time sharing users"", Proc. AFIPS FJCC, vol. 35, pp. 17-26, 1969.||S. Sherman, F. Baskett and J. C. Browne, ""Trace driven modeling and analysis of CPU scheduling in a multiprogramming system"", Comm. ACM, vol. 15, pp. 1063-1069, 1972.||P. Denning, ""The working set model for program behavior"", Comm. ACM, vol. 5, pp. 323-333, 1968.||",A Design of an Experiment to Model Data Base System Performance
"J.M. Adams&&Department of Computer Science, New Mexico State University, Las Cruces, NM, USA|","A general iterative control structure with multiple exits and multiple retums to the beginning of the loop is described. The conditions causing these exits or returns must be declared and defined in a prologue to the loop in a manner which is similar to the declaration of variables at the beginning of a block. Also, actions prior to an exit or a return may be specified in an epilogue of the loop. The semantics of the structure are described informally and then formally by means of a Hoare type verification rule. Attributes of the structure and examples of its usage are given in the latter part of the paper.",10.1109/TSE.1977.229905,IEEE Transactions on Software Engineering,"Testing,Data structures,Computer science,Open systems,Independent component analysis","M. Clint and C. A. R. Hoare, ""Program proving: Jumps and functions"", Acta Informatica, vol. 1, no. 3, 1972.||E. W. Dijkstra, ""Guarded commands non-determinacy and a calculus for the derivation of programs"", Int. Conf. on Reliable Software, 1975-April.||C. A. R. Hoare, ""An axiomatic approach to computer programming"", Commun. Ass. Comput. Mach., vol. 12, Oct. 1969.||D. E. Knuth, ""Structured programming with go to statements"", ACM Comput. Surveys, vol. 6, no. 4, Dec. 1974.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||G. M. Weinberg, The Psychology of Computer Programming, New York:Van Nostrand Reinhold, 1971.||N. Wirth, ""On the composition of well-structured programs"", ACM Comput. Surveys, vol. 6, no. 4, Dec. 1974.||N. Wirth, ""The programming language Pascal"", Acta Informatica, vol. 1, no. 1, 1971.||D. S. Wise, D. P. Friedman, S. C. Shapiro and M. Ward, Boolean-valued loops, Jan. 1975.||C. T. Zahn, ""A control statement for natural top-down structured programming"", Programming Symposium, 1974.||Lecture Notes in Computer Science, New York:Springer-Verlag.||","A General, Verifiable Iterative Control Structure"
"John B. Goodenough&&SofTech, Inc., Waltham, MA, USA|Susan L. Gerhart&&Department of Computer Science, Duke University, Durham, NC, USA|","Examines the theoretical and practical role of testing in software development. The authors prove a fundamental theorem showing that properly structured tests are capable of demonstrating the absence of errors in a program. The theorem's proof hinges on our definition of test reliability and validity, but its practical utility hinges on being able to show when a test is actually reliable. The authors explain what makes tests unreliable (for example, they show by example why testing all program statements, predicates, or paths is not usually sufficient to insure test reliability), and they outline a possible approach to developing reliable tests. They also show how the analysis required to define reliable tests can help in checking a program's design and specifications as well as in preventing and detecting implementation errors.",10.1109/TSE.1975.6312836,IEEE Transactions on Software Engineering,"Testing,Reliability theory,Software reliability,Fasteners,Reliability engineering,Software",,Toward a theory of test data selection
"B. Curtis&&Information Systems Programs, Space Division, General Electric Company Limited, Arlington, VA, USA|S.B. Sheppard&&Information Systems Programs, Space Division, General Electric Company Limited, Arlington, VA, USA|P. Milliman&&Information Systems Programs, Space Division, General Electric Company Limited, Arlington, VA, USA|M.A. Borst&&Information Systems Programs, Space Division, General Electric Company Limited, Arlington, VA, USA|T. Love&&Advanced Systems Development Group, Information Services Business Division, General Electric Company Limited, Rockville, MD, USA|","Three software complexity measures (Halstead's E, McCabe's u(G), and the length as measured by number of statements) were compared to programmer performance on two software maintenance tasks. In an experiment on understanding, length and u(G) correlated with the percent of statements correctly recalled. In an experiment on modification, most significant correlations were obtained with metrics computed on modified rather than unmodified code. All three metrics correlated with both the accuracy of the modification and the time to completion. Relationships in both experiments occurred primarily in unstructured rather than structured code, and in code with no comments. The metrics were also most predictive of performance for less experienced programmers. Thus, these metrics appear to assess psychological complexity primarily where programming practices do not provide assistance in understanding the code.",10.1109/TSE.1979.234165,IEEE Transactions on Software Engineering,"Software measurement,Psychology,Software maintenance,Programming profession,Companies,Length measurement,Resource management,Software performance,Documentation,Human factors","L. H. Putnam, ""Measurement data to support sizing estimating and control of the software life cycle"", Proc. COMPCON '78, 1978.||M. H. Halstead, ""Natural laws controlling algorithm structure"", SIGPLAN Notices, vol. 7, pp. 19-26, 1972.||M. H. Halstead, A theoretical relationship between mental work and machine language programming, 1972.||M. H. Halstead, Software physics: Basic principles, 1975.||M. H. Halstead, Elements of Software Science, New York:Elsevier, 1977.||A. B. Fitzsimmons and L. T. Love, ""A review and evaluation of software science"", ACM Computing Surveys, vol. 10, pp. 3-18, 1978.||Y. Funami and M H. Halstead, A software physics analysis of Akiyama's debugging data, 1975.||L. Cornell and M. H. Halstead, Predicting the number of bugs expected in a program module, 1976.||M. H. Halstead, Using the methodology of natural science to understand software, 1976.||R. D. Gordon and M. H. Halstead, An experiment comparing FORTRAN programming times with the software physics hypothesis, 1975.||M. H. Halstead, An experimental determination of the 'purity' of a trivial algorithm, 1972.||N. Bulut and M. H. Halstead, Impurities found in algorithm implementation, 1974.||J. L. Elshoff, ""Measuring commercial PL/1 programs using Halstead's criteria"", SIGPLAN Notices, vol. 11, pp. 38-46, 1976.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||M. O. Rabin, ""Complexity of computations"", Commun. Ass. Comput. Mach., vol. 20, pp. 625-633, 1977.||D. Campbell and J. C. Stanley, Experimental and Quasi-Experimental Designs for Research, Chicago:Rand-McNally, 1976.||S. B. Sheppard and L. T. Love, ""A preliminary experiment to test influences on human understanding of software"", Proc. 21st Annu. Meeting of the Human Factors Society, vol. 21, pp. 167-171, 1977.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, 1972.||T. Tenny, ""Structured programming in FORTRAN"", Datamation, vol. 20, pp. 110-115, 1974.||G. J. Hahn and S. S. Shapiro, A catalogue and computer program for the design and analysis of orthogonal symmetric and asymmetric fractional factorial experiments, 1966.||R. E. Kirk, Experimental Design Procedures for the Behavioral Sciences, San Francisco:Freeman, 1968.||G. E. P. Box, W. G. Hunter and J. S. Hunter, Statistics for Experiments, New York:Wiley, 1978.||K. J. Ottenstein, A program to count operators and operands for ANSI-FORTRAN modules, 1976.||L. T. Love, Relating individual differences in computer programming performance to human information processing abilities, 1977.||B. Shneiderman, ""Measuring computer program quality and comprehension"", Int. J. Man-Machine Studies, vol. 9, pp. 465-478, 1977.||B. Shneiderman, ""Human factors experiments for developing quality software"" in The Infotech State of the Art Report on Software Engineering, England, Berkshire:Infotech International, Ltd., 1977.||S. B. Sheppard, M. A. Borst, B. Curtis and T. Love, Factors influencing the understandability and modffiability of computer programs, VA, Arlington:Inf. Syst. Programs, General Electric Company, 1978.||A. L, Edwards, An Introduction to Linear Regression and Correlation, San Francisco:Freeman, 1976.||R. D. Gordon, A measure of mental effort related to program clarity, 1977.||J. L. Elshoff, ""A review of software measurement studies at General Motors Research Laboratories"", Proc. 2nd Software Life Cycle Management Workshop, 1978.||E. Chrysler, ""Some basic determinants of computer programming productivity"", Commun. Ass. Comput. Mach., vol. 21, pp. 472-483, 1978.||H. Sackman, W. J. Erickson and E. E. Grant, ""Exploratory experimental studies comparing on-line and off-line programming performance"", Commun. Ass. Comput. Mach., vol. 11, pp. 3-11, 1968.||A. Laemmel and M. Shooman, Software modeling studies: Statistical (natural) language theory and computer program complexity, vol. II, 1978.||",Measuring the Psychological Complexity of Software Maintenance Tasks with the Halstead and McCabe Metrics
"C.A. Coutant&&Information Systems Laboratory, Hewlett Packard Company, Cupertino, CA, USA|R.E. Griswold&&Department of Computer Science, University of Arizona Tucson, Tucson, AZ, USA|D.R. Hanson&&Department of Computer Science, University of Arizona Tucson, Tucson, AZ, USA|","The importance of the ability to measure the performance of programs written in high-level languages is well known. Performance measurement enables users to locate and correct program inefficiencies where automatic optimizations fail and provides a tool for understanding program behavior. This paper describes performance measurement facilities for the Icon programming language, and shows not only how these facilities provided insight into program behavior, but also how they were used to improve the implementation.",10.1109/TSE.1983.236299,IEEE Transactions on Software Engineering,"High level languages,Computer languages,Programming profession,Measurement,Program processors,Optimizing compilers,Computer science,Instruments,Testing,Performance evaluation","D. F. Brailsford, E. Foxley, K. C. Marder and D. J. Morgan, ""Runtime profiling of Algol 68-R programs using DIDYMUS and SCAMP"", SIGPLAN Notices, vol. 12, pp. 27-33, June 1977.||R. B. K. Dewar and A. P. McCann, ""MACRO SPITBOL–A SNOBOL4 compiler"", Software–Practice and Experience, vol. 7, pp. 95-113, Jan. 1977.||E. Foxley and D. J. Morgan, ""Monitoring the runtime activity of Algol 68-R programs"", Software–Practice and Experience, vol. 8, pp. 29-34, Jan. 1978.||J. F. Gimpel and W. Keister, Minimal meandering strings, July 1970.||R. E. Griswold, D. R. Hanson and J. T. Korb, ""The Icon programming language: An overview"", SIGPLAN Notices, vol. 14, pp. 18-31, Apr. 1979.||R. E. Griswold and D. R. Hanson, ""An alternative to the use of patterns in string processing"", ACM Trans. Programming Languages and Systems, vol. 2, pp. 153-172, Apr. 1980.||R. E. Griswold, D. R. Hanson and J. T. Korb, ""Generators in Icon"", ACM Trans. Programming Languages and Systems, vol. 3, pp. 144-161, Apr. 1981.||D. R. Hanson, ""A portable storage management system for the Icon programming language"", Software–Practice and Experience, vol. 10, pp. 489-500, June 1980.||D. Ingalls, ""The execution time profile as a measurement tool"" in Design and Optimization of Compilers, NJ, Englewood Cliffs:Prentice-Hall, pp. 107-128, 1972.||S. Jaslk, ""Monitoring program execution on the CDC 6000 series machines"" in Design and Optimization of Compilers, NJ, Englewood Cliffs:Prentice-Hall, pp. 129-136, 1972.||B. W. Kernighan and P. L. Plauger, Software Tools, MA, Reading:Addison-Wesley, 1976.||D. E. Knuth, ""An empirical study of Fortran programs"", Software–Practice and Experience, vol. 1, pp. 105-133, Apr. 1971.||B. W. Leverett and P. G. Hibbard, ""An adaptive system for dynamic storage allocation"", Software–Practice and Experience, vol. 12, pp. 543-556, June 1982.||G. Lyon and R. B. Stillman, ""Simple transforms for instrumenting Fortran programs"", Software–Practice and Experience, vol. 5, pp. 347-358, Oct. 1975.||S. Matwin and M. Missala, ""A simple machine independent tool for obtaining rough measures of Pascal programs"", SIGPLAN Notices, vol. 11, pp. 42-45, Aug. 1976.||G. D. Ripley, ""Program perspectives: A relational representation of measurement data"", IEEE Trans. Software Eng., vol. SE-3, pp. 296-300, July 1977.||G. D. Ripley, R. E. Griswold and D. R. Hanson, ""Performance measurement of storage management in an implementation of SNOBOL4"", IEEE Trans. Software Eng., vol. SE-4, pp. 130-137, Mar. 1978.||E. Satterthwaite, ""Debugging tools for high level languages"", Software–Practice and Experience, vol. 2, pp. 197-217, July 1972.||D. Shields, private communication, 1979.||R. L. Sites, ""Programming tools: Statement counts and procedure timings"", SIGPLAN Notices, vol. 13, pp. 98-101, Dec. 1978.||W. M. Waite, ""A sampling monitor for applications programs"", Software–Practice and Experience, vol. 3, pp. 75-79, Jan. 1973.||W. A. Wulf, D. B. Russell and A. N. Habermann, ""BLISS: A language for systems programming"", Comm. ACM, vol. 14, pp. 780-790, Dec. 1971.||",Measuring the Performance and Behavior of Icon Programs
"D. Gries&&Department of Computer Science, Cornell University, Ithaca, NY, USA|","The conventional axiomatic definitions are given for multiple assignment to simple variables and for assignment to a single subscripted variable, along with examples to illustrate their use. The original contributions of this paper are the extension of the definition to include multiple assignment to several subscripted variables, and the development of a nontrivial, practical algorithm in which multiple assignment to several subscripted variables is indeed useful. Arguments are given to support the conjecture that the use of subscripted variables, like the use of pointers, can lead to exponential explosion of the length of a proof (and thus of the time needed to understand a program) unless the programmer is careful.",10.1109/TSE.1978.231479,IEEE Transactions on Software Engineering,"Explosions,Programming profession,Computer science","E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||D. Gries, Assignment to subscripted variables, Sept. 1976.||C. A. R. Hoare, ""An axiomatic approach to computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||C. A. R. Hoare and N. Wirth, ""An axiomatic defmition of the programming language PASCAL"", Acta Informatica, vol. 2, pp. 335-355, 1973.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 3, 1973.||",The Multiple Assignment Statement
"T.L. Booth&&Department of Electrical Engineering and Computer Science, University of Connecticut, Storrs, CT, USA|C.A. Wiecek&&Department of Electrical Engineering and Computer Science, University of Connecticut, Storrs, USA|","The concept of abstract data types is extended to associate performance information with each abstract data type representation. The resulting performance abstract data type contains a functional part which describes the functional properties of the data type and a performance part which describes the performance characteristics of the data type. The performance part depends upon 1) the algorithms and data representation selected to represent the data type, 2) the particular machine on which the software realization of the data type is realized, and 3) the statistical properties of the actual data represented by the data objects involved in the data type. Methods for determining the necessary information to specify the performance part of the representation are discussed.",10.1109/TSE.1980.230465,IEEE Transactions on Software Engineering,"Software performance,Performance analysis,Software design,Process design,Design engineering,Information analysis,Software algorithms,Large-scale systems,Computer architecture,Job design","T. L. Booth and R. A. Thompson, ""Applying probability measures to abstract languages"", IEEE Trans. Comput., vol. C-22, pp. 442-443, May 1973.||T. L. Booth and C. Whitby-Strevens, ""Performance modelling of distributed systems using probabilistic computation structures"" in Measuring Modelling and Evaluating Computer Systems, The Netherlands, Amsterdam:North-Holland, 1978.||T. L. Booth, ""Performance optimization of software systems processing information sequences modelled by probabilistic languages"", IEEE Trans. Software Eng., vol. SE-5, no. 1, Jan. 1979.||K. S. Fu and T. L. Booth, ""Grammatical inference: Introduction and survey–Part I"", IEEE Trans. Syst. Man Cybern., vol. SMC-5, pp. 95-111, Jan. 1975.||""Grammatical inference: Introduction and survey-Part II"", IEEE Trans. Syst. Man Cybern., vol. SMC-5, pp. 409-423, July 1975.||T. Gilkey, J. R. White and T. L. Booth, ""Performance analysis as a software design tool"", Proc. COMPSAC77.||T. Gilkey, Optimal design of software systems with incomplete performance information, 1980.||J. Guttag, ""Abstract data types and the development of data structures"", Commun. Ass. Comput. Mach., vol. 20, no. 6, June 1977.||E. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 1, 1968.||U. R. Kodres, ""Analysis of real-time systems by data flowgraphs"", IEEE Trans. Software Eng., vol. SE-4, pp. 169-178, May 1978.||U. R. Kodres, ""Discrete systems and flowgraphs"", IEEE Trans. Software Eng., vol. SE-4, pp. 521-525, Nov. 1978.||B. Liskov and S. Zilles, ""An introduction to formal specifications of data abstractions"" in Current Trends in Programming Methodology, NJ, Englewood Cliffs:Prentice‑Hall, vol. 1, 1977.||S. S. Yau, J. S. Collofello and T. MacGregor, ""Ripple effect analysis of software maintenance"", Proc. COMPSAC 78, 1978-Nov.||A. V. Aho, J. E. Hopcroft and J. D. Ullman, The Design and Analysis of Computer Algorithms, MA, Reading:Addison‑Wesley.||L. Kleinrock, Queueing Systems Vol. 1: Theory, New York:Wiley.||H. A. Sholl and T. L. Booth, ""Software performance modelling using computation structures"", IEEE Trans. Software Eng., vol. 1, no. 4, Dec. 1975.||",Performance Abstract Data Types as a Tool in Software Performance Analysis and Design
"S.P. Ghosh&&IBM Research Laboratory, San Jose, CA, USA|",The problem of distributing a data base (with logical associations between segment types) on a computer network such that multiple segment types satisfying a query can be retrieved in paralel from different nodes has been introduced. Properties of such distributions without redundancy and with redundancy have been discussed. Lower bounds on the number of nodes needed for such distributions have been given. Algorithms for constructing such distributions have also been given. Distributions of data bases for queries whose target segments form a combinatorial set have been studied in detail. Closed form expressions for redundancy have been obtained for such query sets.,10.1109/TSE.1976.233537,IEEE Transactions on Software Engineering,"Computer networks,Marketing and sales,Delay,Information retrieval,Computer aided manufacturing,Computer network management,Joining processes,Data communication,Resource management","R. G. Casey, ""Allocation of copies of a file in an information network"", 1972 Spring Joint Comput. Conf. AFIPS Conf. Proc., vol. 40, pp. 617-625, 1972.||P. M. Karp, ""Origin development and current status of the ARPA network"", COMPCON '73 Seventh Annu. IEEE Comput. Soc. Int. Conf., pp. 49-52, 1973-Feb.||P. K. Merrill, Computer netting and distributed data: A tutorial, 1974.||D. H. Lehmer, ""Multisectioned moments of Stirling numbers of the second kind"", J. Combinatorial Theory, vol. 15, no. 2, pp. 210-224, 1971.||J. Riordan, An Introduction to Combinatorial Analysis, New York:Wiley, 1958.||",Distributing a Data Base with Logical Associations on a Computer Network for Parallel Searching
"We-Min Chow&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|W.W. Chiu&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","An important resource allocation mechanism in virtual storage operating systems is the maintainence of the multiprogramming level in main storage, especially when some form of working-set storage management strategy is employed. Swapping of programs in and out of main memory occurs when sufficient storage becomes available and when total storage demand exceeds capacity. In this paper, we propose a class of swapping algorithms that couples storage management parameters with swapping decisions. An analytic model is developed and numerical results are presented to compare the performance of these algorithms.",10.1109/TSE.1977.229906,IEEE Transactions on Software Engineering,"Operating systems,Resource management,Performance analysis,Algorithm design and analysis,Control systems,Costs,Dispatching,Aggregates,Frequency","P. J. Denning and S. C. Schwartz, ""Properties of the working set model"", Commun. Ass. Comput. Mach., vol. 15, no. 3, pp. 191-198, Mar. 1972.||A. L. Scherr, ""Functional structure of IBM virtual operating systems part II OS/VS2-2 concepts and philosophies"", IBM Syst. J., vol. 12, pp. 382, 1973.||T. A. Ryan and E. G. Coffman, ""A problem in multiprogrammed storage allocation"", IEEE Trans. Comput., vol. C-23, no. 11, 1974.||W. Chow, ""Central server model for multiprogrammed computer systems with different classes of jobs"", IBM J. Res. Develop., vol. 19, no. 3, May 1975.||",An Analysis of Swapping Policies in Virtual Storage Systems
"L. M. Culpepper&&Naval ShIp Research and Development Center, Bethesda, MD, USA|","Much of the software developed to support engineering design calculations is produced by persons whose primary skill is not that of computer scientist. Software validation techniques suitable for use by these engineer-programmers have been under investigation by the Navy as part of a project designed to increase the reliability, usability, and portability of engineering design software. This paper describes the goals and results of the project and describes the software validation process which was developed. A software validation tool which was produced during the project is described and compared with several other tools. Some areas for further work are suggested.",10.1109/TSE.1975.6312837,IEEE Transactions on Software Engineering,"Software,Software reliability,Computers,Programming,Testing,Reliability engineering",,A system for reliable engineering software
"D. Comer&&Department of Computer Science, Purdue University, West Lafayette, IN, USA|M.H. Halstead&&Department of Computer Science, Purdue University, West Lafayette, IN, USA|",In this paper we: 1) discuss the need for quantitatively reproducible experiments in the study of top-down design; 2) propose the design and writing of tutorial papers as a suitably general and inexpensive vehicle; 3) suggest the software science parameters as appropriate metrics; 4) report two experiments validating the use of these metrics on outlines and prose; and 5) demonstrate that the experiments tended toward the same optimal modularity.,10.1109/TSE.1979.234166,IEEE Transactions on Software Engineering,"Process design,Design methodology,Software measurement,Writing,Vehicles,Computer science,Humans,Guidelines,Documentation,Error correction","D. Comer, ""MAP: A Pascal preprocessor for large program development"", Software-Practice and Experience.||D. Comer and M. H. Halstead, A simple experiment in top-down design, Nov. 1978.||O. J. Dahl, E. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||M. H. Halstead, Elements of Software Science, New York:Elsevier North-Holland, 1977.||M. H. Halstead, ""Potential impacts of software science on life cycle management"" in Software Phenomenology, U.S. Army Inst. for Res. in Management Inform. and Comput. Sci., pp. 385-400, Aug. 1977.||M. H. Halstead, A software science analysis of the writing of a technical paper, Aug. 1977.||C. McGowan and J. Kelly, Top-Down Structured Programming Techniques, Petrocelli:Charter, 1975.||G. Miler, E. Newman and E. Friedman, ""Length frequency statistics of written English"", Inform. Contr., vol. 1, pp. 370-389, 1958.||R. Tausworthe, Standardized Development of Computer Software, NJ, Englewood Cliffs:Prentice-Hall, 1977.||N. Wirth, ""Program development by stepwise refinement"", Commun. Ass. Comput. Mach., vol. 14, pp. 221-227, Apr. 1971.||Current Trends in Programming Methodologies, NJ, Englewood Cliffs:Prentice-Hall, 1977.||",A Simple Experiment in Top-Down Design
"R.R. Oldehoeft&&Department of Computer Science, Colorado State University, Fort Collins, CO, USA|","This paper describes a technique for predicting the execution behavior of a source program or a software design specification. As a by-product of syntactic analysis, a program graph is constructed which can subsequently be treated as the graph of a finite automaton. The expression for execution behavior is the regular expression of the graph. Several simplification techniques for these expressions are discussed and exemplified. In particular, the substitution of known values for program segments followed by constant folding cannot be done indiscriminately; the allowable situations are characterized. Applications include the prediction of execution time for a program or a software design, other forms of language analysis, and program restructuring.",10.1109/TSE.1983.236300,IEEE Transactions on Software Engineering,"Costs,Software design,Automata,Application software,Performance analysis,Flow graphs,Data analysis,Computer science,Equations,Labeling","A. V. Aho and J. D. Ullman, ""2"" in The Theory of Parsing Translation and Compiling, NJ, Englewood Cliffs:Prentice-Hall, vol. 1, pp. 103-121, 1972.||T. L. Booth, ""Use of computation structure models to measure computation performance"", Proc. Conf. Simulation Measurement and Modeling of Comput. Syst., pp. 183-188, 1979.||R. R. Oldehoeft and L. J. Bass, ""Dynamic software science with applications"", IEEE Trans. Software Eng., vol. SE-5, pp. 497-504, Sept. 1979.||C. Smith and J. C. Browne, ""Performance specifications and analysis of software designs"", Proc. Conf. Simulation Measurement and Modeling of Comput. Syst., pp. 173-182, 1979.||",Program Graphs and Execution Behavior
"R. Balzer&&Information Sciences Institute, University of Southern California, Marina del Rey, CA, USA|N. Goldman&&Information Sciences Institute, University of Southern California, Marina del Rey, CA, USA|D. Wile&&Information Sciences Institute, University of Southern California, Marina del Rey, CA, USA|","This paper is concerned with the need for computer-based tools which help human designers formulate formal process-oriented specifications. It first determines some attributes of a suitable process-oriented specification language, then examines the reasons why specifications would still be difficult to write in such a language in the absence of formulation tools. The key to overcoming these difficulties seems to be the careful introduction of informality based on partial, rather than complete, descriptions and the use of a computer-based tool that uses context extensively to complete these descnrptions during the process of constructing a well-formed specification. Some results obtained by a running prototype of such a computer-based tool on a few informal example specifications are presented and, finaliy, some of the techniques used by this prototype system are discussed.",10.1109/TSE.1978.231480,IEEE Transactions on Software Engineering,"Specification languages,Prototypes,Humans,Process design,Software prototyping,Computer languages,Software systems,Programming,Testing,Artificial intelligence","R. Balzer, N. Goldman and D. Wile, ""On the transformational implementation approach to programming"", 2nd Int. Conf. Software Eng., pp. 337, 1976-Oct.||T. E. Bell and D. Bixler, ""An extendable approach to computer‑aided software requirements engineering"", 2nd Int. Conf. Software Eng., pp. 70, 1976-Oct.||D. Teichroew and E. A. Hershey, ""PSL/PSA a computer‑aided technique for structured documentation and analysis of information processing systems"", 2nd Int. Conf. Software Eng., pp. 2, 1976-Oct.||B. Liskov, A. Snyder, R. Atkinson and C. Schoffert, ""Abstraction mechanisms in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-577, Aug. 1977.||W. A. Wulf and M. Shaw, ""An introduction to the construction and verification of alphard programs"", 2nd Int. Conf. Software Eng., pp. 390, 1976-Oct.||B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell and G. J. Popek, Report on the programming language Euclid, CA, Palo Alto:Xerox Res. Center, Aug. 1976.||R. A. Snowdon, PEARL: An interactive system for the preparation and validation of structured programs, Nov. 1971.||J. T. Schwartz, On programming an interim report on the SETL project, 1973.||J. V. Guttag, E. Horowitz and D. R. Musser, ""The design of data type specifications"", 2nd Int. Conf. Software Eng., pp. 414, 1976-Oct.||E. F. Codd, ""A relational model of data for large shared data bases"", Commun. Ass. Comput. Mach., vol. 13, no. 6, June 1970.||D. D. Chamberlin, ""Relational data base management systems"", ACM Comput. Surveys, vol. 8, no. 1, Mar. 1976.||Data Base Task Group, Apr. 1971.||||S. L. Gerhart and L. Yelowitz, ""Control structure abstractions of the backtracking programming technique"", 2nd Int. Conf. Software Eng., pp. 391, 1976-Oct.||",Informality in Program Specifications
"L.L. Beck&&Department of Computer Science and Engineering, Southern Methodist University, Dallas, TX, USA|","A set of primitive operations on tuples is derived; it is shown that these operations are necessary and sufficient for the implementation tion of any language equivalent in power to the relational algebra. The translation of queries from a variety of relational languages into these tuple operations is discussed and illustrated with several examples. A method is given for the conversion of such a translated query into a network of processes and files. An optimization algorithm which operates on this network is described and demonstrated. Using this method, many different relational languages can be implemented using the same data management software; furthermore, the underlying software can be changed without requiring any changes at the user interface. This approach should yield great benefits in reduced cost and increased flexibility of implementation.",10.1109/TSE.1980.230466,IEEE Transactions on Software Engineering,"Algebra,Query processing,Relational databases,Calculus,Switches,User interfaces,Data models,Prototypes,Authorization,Computer science","A. V. Aho, J. E. Hopcroft and J. D. Ullman, The Design and Analysis of Computer Algorithms, MA, Reading:Addison‑Wesley, 1974.||M. M. Astrahan, ""System R: Relational approach to database management"", ACM Trans. Database Syst., vol. 1, pp. 97-137, June 1976.||L. L. Beck, ""An approach to the creation of structured data processing systems"", Proc. 1976 ACM-SIGMOD Int. Conf. Manag. Data, pp. 179-188, 1976.||L. L. Beck, Automatic design of structured data processing systems, Nov. 1975.||L. L. Beck, On minimal sets of operations for relational data sublanguages, Feb. 1978.||L. L. Beck, ""A relational problem definition language for structured data processing"", Proc. 1978 ACM Annu. Conf., pp. 375-384, 1978.||R. F. Boyce, D. D. Chamberlin, W. F. King and M. M. Hammer, ""Specifying queries as relational expressions: The SQUARE data sublanguage"", Commun. Assoc. Comput. Mach., vol. 18, pp. 621-628, Nov. 1975.||D. D. Chamberlin and R. F. Boyce, ""SEQUEL: A structured English query language"", 1974 Proc. ACM-SIGMOD Workshop on Data Description Access and Control, pp. 249-264, 1974.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Assoc. Comput. Mach., vol. 13, pp. 377-397, June 1970.||E. F. Codd, ""Relational completeness of data base sublanguages"" in Courant Computer Science Symposia Vol. 6: Data Base Systems, NJ, Englewood Cliffs:Prentice-Hall, pp. 65-99, 1971.||D. D. Chamberlin, ""Relational data-base management systems"", ACM Comput. Surv., vol. 8, pp. 43-66, Mar. 1976.||C. J. Date, An Introduction to Database Systems, MA, Reading:Addison-Wesley, 1977.||G. D. Held, M. R. Stonebraker and E. Wong, ""INGRES: A relational data base system"", 1975 Proc. AFIPS Nat. Comput. Conf., pp. 409-416, 1975-May.||A. S. Michaels, B. Mittman and C. R. Carlson, ""A comparison of relational and CODASYL approaches to data-base management"", ACM Comput. Surv., vol. 8, pp. 125-152, Mar. 1976.||M. M. Zloof, Query by example, July 1974.||M. M. Zloof, ""Query by example"", Proc. AFIPS Nat. Comput. Conf., pp. 431-438, 1975-May.||",A Generalized Implementation Method for Relational Data Sublanguages
"J.L. Elshoff&&Computer Science Department, General Motors Research and Development Laboratories, Warren, WI, USA|",The source code for 120 production PL/I programs from several General Motors' commercial computing installations has been collected. The programs have been scanned both manually and automatically. Some data from the scanning process are presented and interpreted.,10.1109/TSE.1976.233538,IEEE Transactions on Software Engineering,"Production,Programming profession,Computer languages,Guidelines,Personnel,Information analysis,History,Terrorism,Computer science,Computer industry","O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||F. T. Baker, ""Structured programming in a production programming environment"", Proc. Int. Conf. Reliable Software, pp. 172-185, 1975-Apr.||F. T. Baker, Datamation (Special Issue on Structured Programming), vol. 19, no. 6, Dec. 1973.||F. T. Baker, Comput. Surveys (Special Issue on Programming), vol. 6, no. 4, Dec. 1974.||OS PL/I Checkout and Optimizing Compilers: Language Reference Manual, July 1974.||F. T. Baker, A Guide to PL/I for Commercial Programmers, NY, White Plains:IBM Corp.||D. D. McGracken and G. M. Weinberg, ""How to write a readable FORTRAN program"", Datamation, vol. 18, pp. 73-77, Oct. 1972.||B. W. Kernighan and P. J. Plauger, The Elements ofProgramming Style, New York:McGraw-Hill, 1974.||K. V. Roberts, ""The readability of computer programs"", Comput. Bull., vol. 10, pp. 17-24, Mar. 1967.||H. Mills, ""Top down programming in large systems"" in Debugging Techniques in Large Systems, NJ, Englewood Cliffs:Prentice-Hall, pp. 41-55, 1971.||N. Wirth, ""Program development by stepwise refinement"", Commun. Ass. Comput. Mach., vol. 14, pp. 221-227, Apr. 1971.||J. L. Elshoff, ""A numerical profile of commercial PL/I programs"", Software–Practice and Experience.||D. E. Knuth, ""An empirical study of FORTRAN programs"", Software–Practice and Experience, vol. 1, pp. 105-133, Apr.-June 1971.||A. Salvadori, J. Gordon and C. Capstick, ""Static profile of COBOL programs"", SIGPLAN Notices, vol. 10, pp. 20-33, Aug. 1975.||R. Conway and D. Gries, An Introduction to Programming, MA, Cambridge:Winthrop, 1973.||R. C. Holt and D. B. Wortman, Structured subsets of the PL/I language, pp. 25, Oct. 1973.||B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, vol. 19, pp. 48-59, May 1973.||",An Analysis of Some Commercial PL/I Programs
"P.B. Hansen&&Department of Computer Science, University of Southern California, Los Angeles, CA, USA|","This paper summarizes the initial experience with the programming language Concurrent Pascal in the design of three model operating systems. A Concurrent Pascal program consists of modules called processes, monitors, and classes. The compiler checks that the data structures of each module are accessed only by the operations defined in the module. The author emphasizes that the creative aspect of program construction is the initial selection of modules and the connection of them into hierarchical structures. By comparison the detailed implementation of each module is straightforward. The most important result is that it is possible to build a concurrent program of one thousand lines out of one-page modules that can be comprehended at a glance.",10.1109/TSE.1977.229907,IEEE Transactions on Software Engineering,"Data structures,Operating systems,Computer languages,Computer displays,System testing,Modular construction,Computer science,Program processors,Microcomputers,Concurrent computing","P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||P. Brinch Hansen, ""The Solo operating system"", Software–Practice and Experience, vol. 6, pp. 141-205, Apr.-June 1976.||C. A. R. Hoare, ""Towards a theory of parallel programming"" in Operating Systems Techniques, New York:Academic, 1972.||P. Brinch Hansen, ""Structured multiprogramming"", Commun. Ass. Comput. Mach., vol. 7, pp. 574-578, July 1972.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, July 1973.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||O.-J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||C. A. R. Hoare, ""Proof of correctness of data representations"", Acta Informatica, vol. 1, pp. 271-281, 1972.||E. W. Dijkstra, ""Hierarchical ordering of sequential processes"", Acta Informatica, vol. l, pp. 115-138, 1971.||P. Brinch Hansen, Concurrent Pascal report, CA, Pasadena:Dept. Information Sci., California Institute of Technology, June 1975.||N. Wirth, ""The programming language Pascal"", Acta Informatica, vol. 1, pp. 35-63, 1971.||A. C. Hartmann, A Concurrent Pascal compiler for minicomputers, CA, Pasadena:Dept. Information Sci., California Institute of Technology, Sept. 1975.||P. Brinch Hansen, The job stream system, CA, Pasadena:Dept. Information Sci., California Institute of Technology, Jan. 1976.||P. Brinch Hansen, A real-time scheduler, CA, Pasadena:Dept. Information Sci., California Institute of Technology, Nov. 1975.||P. Brinch Hansen, ""The RC 4000 real-time control system at Pulaway"", BIT, vol. 7, pp. 279-288, 1967.||P. Brinch Hansen, Concurrent Pascal machine, CA, Pasadena:Dept. Information Sci., California Institute of Technology, Oct. 1975.||J. H. Howard, ""Proving monitors"", Commun. Ass. Comput. Mach., vol. 19, pp. 273-279, May 1976.||S. Owicki and D. Gries, ""Verifying properties of parallel programs: An axiomatic approach"", Commun. Ass. Comput. Mach., vol. 19, pp. 279-285, May 1976.||",Experience with Modular Concurrent Programming
"Niklaus Wirth&&Federal Institute of Technology Lausanne, ZUrich, ONT, Switzerland|","The programming language Pascal is assessed in the light of `reliable programming' and with the background of five years of experience with the language. Some features are selected to point out remaining problems, either inherent or specific, from which some guidelines for the design of choice of languages for reliable programming are derived. Among the discussed features are the concept of data type, the sequential file structure and the type union.",10.1109/TSE.1975.6312839,IEEE Transactions on Software Engineering,"Software reliability,Arrays,Software,Integrated circuit reliability,Programming,Indexes",,An assessment of the programming language pascal
"A.L. Baker&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|S.H. Zweben&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|","An investigation is made into the extent to which relationships from software science are useful in analyzing programming methodology principles that are concerned with modularity. Using previously published data from over 500 programs, it is shown that the software science effort measure provides quantitative answers to questions concerning the conditions under which modularization is beneficial. Among the issues discussed are the reduction of similar code sequences by temporary variable and subprogram defmition, and the use of global variables. Using data flow analysis, environmental considerations which affect the applicability of alternative modularity techniques are also discussed.",10.1109/TSE.1979.234167,IEEE Transactions on Software Engineering,"Software measurement,Data analysis,Area measurement,Software tools,Problem-solving,Chemicals,Computer interfaces,Information science,Programming environments,Particle measurements","N. Bulut, Invariant properties of algorithms, Aug. 1973.||N. Bulut, M. H. Halstead and R. Bayer, ""Experimental validation of a structural property of FORTRAN algorithms"", Proc. Assoc. Comput. Mach. Annu. Conf., pp. 207-211, 1974-Nov.||J. L. Elshoff, ""Measuring commercial PL/I programs using Halstead's criteria"", Assoc. Comput. Mach. SIGPLAN Notices, vol. 11, pp. 38-46, May 1976.||J. L. Elshoff, ""An investigation into the effects of the counting used on software science measurements"", Assoc. Comput. Mach. SIGPLAN Notices, vol. 13, pp. 30-45, Feb. 1978.||L. D. Fosdick and L. J. Osterweil, ""Data flow analysis in software reliability"", Assoc. Comput. Mach. Comput. Surv., vol. 8, pp. 305-330, Sept. 1976.||R. D. Gordon and M. H. Halstead, ""An experiment comparing programming times and the software physics hypothesis"", 1976 AFIPS Conf. Proc. Nat. Comput. Conf., vol. 45, pp. 935-937.||R. D. Gordon, A measure of mental effort related to program clarity, Aug. 1977.||M. H. Halstead, A theoretical relationship between mental work and machine language programming, May 1972.||M. H. Halstead, ""An experimental determination of the purity of a trivial algorithm"", Assoc. Comput. Mach. SIGME Performance Evaluation Rev., vol. 2, pp. 10-15, Mar. 1973.||M. H. Halstead, ""Toward a theoretical basis for estimating programming effort"", Proc. Assoc. Comput. Mach. Annu. Conf., pp. 222-224, 1975-Oct.||M. H. Halstead, Elements of Software Science, New York:Elsevier North‑Holland, 1977.||B. W. Kemighan and P. J. Plauger, Elements of Programming Style, New York:McGraw-Hill, 1974.||P. M. Zislis, An experiment in algorithm implementation, June 1973.||",The Use of Software Science in Evaluating Modularity Concepts
"R.A. Marie&&IRISA/INRIA, Rennes, France|J.M. Pellaumail&&IRISA/INRIA, Rennes, France|","We consider a queueing system with a general service distribution having a possibility of feedback. The customers belong to the same class, and the queueing discipline is first-in, first-out. There is only one server in the station. The facility is rendered Markovian by means of fictitious stages. The input flow depends on the state of the station. It is shown that the equilibrium probabilities can be simply expressed by means of a matrix product. Two particular cases are studied.",10.1109/TSE.1983.236301,IEEE Transactions on Software Engineering,"Steady-state,State feedback,Network servers,Computer science,Tin","D. R. Cox, ""A use of complex probabilities in the theory of stochastic process"", Proc. Cambridge Phil Soc., vol. 51, pp. 313-319, 1955.||R. A. Marie, Algorithmes de calcul des probabilités asymptotiques pour des files d'attente λ(n)/Ck/1/N avec rebouclage et cas particuliers, Dec. 1979.||R. A. Marie, Modelisation par reseaux de files d'attente, Nov. 1978.||",Steady-State Probabilities for a Queue with a General Service Distribution and State-Dependent Arrivals
"G.J. Schick&&Graduate School of Business Administration, University of Southern California, Los Angeles, CA, USA|R.W. Wolverton&&Systems Engineering and Integration Division, TRW Defense and Space Systems Group, Office of Software Research and Technology, Redondo Beach, CA, USA|","This paper examines the most widely used reliability models. The models discussed fall into two categories, the data domain and the time domain. Besides tracing the historical development of the various models their advantages and disadvantages are analyzed. This includes models based on discrete as weil as continuous probability distributions. How well a given model performs its purpose in a specific economic environment will determine the usefulness of the model. Each of the models is examined with actual data as to the applicability of the error fmding process.",10.1109/TSE.1978.231481,IEEE Transactions on Software Engineering,"Software reliability,Predictive models,Economic forecasting,Environmental economics,Software testing,Software packages,Equations,Costs,Space technology,Resource management","G. J. Schick and R. W. Wolverton, ""Assessment of software reliability"", Proc. Operations Res., pp. 395-422, 1973.||G. Haugk, S. H. Tsiang and L. Zimmerman, ""System testing of the no. 1 electronic switching system"", Bell Syst. Tech. J., vol. 43, pp. 2575-2592, Sept. 1964.||R. W. Floyd, ""Assigning meanings to programs"" in Mathematical Aspects of Computer Science, RI, Providence:American Mathematical Society, vol. XIX, pp. 19-32, 1967.||G. R. Hudson, Programming errors as a birth-and-death process, Dec. 1967.||J. L. Sauter, ""Reliability in computer programs"", Mech. Eng., vol. 91, pp. 24-27, Feb. 1969.||R. L. London, ""Proving programs correct: Some techniques and examples"", BIT, vol. 10, pp. 168-182, May 1969.||D. E. Knuth, An empirical study of FORTRAN programs, 1970.||Software Practice and Experience, vol. 1, pp. 105-133, Apr.-June 1971.||D. R. Barney, P. K. Giloth and H. G. Kienzle, ""System testing and early field operation experience"", Bell Syst. Tech. J., vol. 49, pp. 2975-3004, Dec. 1970.||F. Akiyama, ""An example of software system debugging"", 1971 Proc. IFIP Congr., vol. 1, pp. 353-359, 1971-Aug.||J. C. Dickson, ""Quantitative analysis of software reliability"", Proc. 1972 IEEE Annu. Reliability and Maintainability Symp., pp. 148-157, 1972-Jan.||M. L. Shooman, ""Probabilistic models for software reliability prediction"", 1972 Int. Symp. Fault-Tolerant Computing, pp. 211-215, 1972-June.||Z. Jelinski and P. B. Moranda, ""Software reliability research"", Conf. on Statistical Methods for the Evaluation of Computer System Performance, 1971-Nov.||Statistical Computer Performance Evaluation, New York:Academic, 1972.||E. Yourdon, ""Reliability of real-time systems"", Modern Data, Jan.-June 1972.||Design of On-Line Computer Systems, NJ, Englewood Ciffs:Prentice-Hall, pp. 608, 1972.||G. M. Weinberg, ""The psychology of improved programming performance"", Datamation, vol. 18, pp. 82-83, 85, Nov. 1972.||""Goals and performance in computer programming"", Human Factors, vol. 16, pp. 70-77, Feb. 1974.||F. P. Brooks, The Mythical Man-Month, MA, Reading:Addison-Wesley, 1975.||G. M. Weinberg, The Psychology of Computer Programming, New York:Van Nostrand Reinhold, 1971.||J. D. S. Coutinho, ""Software reliability growth"", Proc. 1973 IEEE Symp. Comput. Software Reliability, pp. 58-64, 1973-Apr.-May.||M. L. Shooman, ""Operational testing and software reliability estimation during program development"", Proc. 1973 IEEE Symp. Comput. Software Reliability, pp. 51-57, 1973-Apr.-May.||E. C. Nelson, A statistical basis for software reliability assessment, Mar. 1973.||E. K. Blum, The semantics of programming languages, Dec. 1969.||W. L. Wagoner, The final report on a software reliability measurement study, CA, El Segundo:Technol. Div., The Aerospace Corp., Aug. 1973.||B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, vol. 19, pp. 48-59, May 1973.||A. E. Ferdinand, ""A theory of systen. complexity"", Int. J. General Syst., vol. 1, pp. 19-33, 1974.||J. D. Musa, ""A theory of software reliability and its application"", IEEE Trans. Software Eng., vol. SE-1, pp. 312-327, Sept. 1975.||R. T. Yeh, ""Guest editorial"", ACM Computing Surveys, vol. 8, pp. 355-357, Dec. 1976.||S. L. Gerhart and L. Yelowitz, ""Observations of fallibility in applications of modern programming methodologies"", IEEE Trans. Software Eng., vol. SE-2, Dec. 1976.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", Proc. ACM 1975 Int. Conf. Reliable Software, pp. 493-510, 1975.||S. L. Hantler and J. C. King, ""An introduction to proving the correctness of programs"", ACM Computing Surveys, vol. 8, pp. 331-353, Sept. 1976.||T. Gilb, Software Metrics, NJ, Englewood:Winthrop, pp. 282, 1977.||Practical Strategies for Developing Large Software Systems, MA, Reading:Addison-Wesley, 1975.||R. W. Wolverton, Software reliability modeling prediction and measurement methodology, July 1974.||D. E. W. Bucher, ""Maintenance of the computer sciences teleprocessing system"", Proc. Int. Conf Reliable Software, pp. 260-266, 1975-Apr.||M. Lipow, Estimation of software package residual errors, Nov. 1972.||S. L. Basin, Estimation of software error rates via capture‑recapture sampling, CA, Palo Alto:Science Applications, Inc., Sept. 1973.||S. L. Basin, Measuring the error content of software, CA, Palo Alto:Science Applications, Inc., Sept. 1974.||||W. Feller, An Introduction to Probability Theory and Its Application, New York:Wiley, vol. 1, pp. 43-47, 1968.||L. Holst, ""Some limit theorems with applications in sampling theory"", Ann. Statistics, vol. 1, pp. 644-658, July 1973.||D. G. Chapman, ""Some properties of the hypergeometric distribution"", Univ. California Publications in Statistics, vol. 1, no. 7, pp. 131-160, 1951.||R. W. Wolverton, ""The cost of developing large-scale software"" in The Auerback Annual 1975 Best Computer Papers, NewYork:Petrocelli/Charter, pp. 121-142, 1975.||P. B. Moranda, ""Prediction of software reliability during debugging"", Proc. 1975 Annu. Reliability and Maintainability Symp., pp. 327-332, 1975.||M. Lipow and T. A. Thayer, ""Prediction of software failures"", Proc. 1977 Annu. Reliability and Maintainability Symp., pp. 489-494, 1977-Jan.||T. A. Thayer, M. Lipow and E. C. Nelson, Software reliability study, pp. 5-1-5-22, Feb. 1976.||E. C. Nelson, Software reliability, Nov. 1975.||P. B. Moranda and Z. Jelinski, Final report on software reliability study, Dec. 1972.||L. J. LaPadula, Engineering of quality software systems vol. VIII; software reliability modeling and measurement techniques, June 1973.||Software reliability and timeliness, pp. 81, Jan. 1975.||M. Lipow, Some variations of a model for software time-to-failure, Aug. 1974.||A. N. Sukert, ""An investigation of software reliability models"", Aug. 1976.||1977 Annu. Reliability and Maintainability Symp., 1977-Jan.-18-20.||S. H. Caine and E. K. Gordon, ""PDL-A tool for software design"", Proc. Nat. Comput. Conf., pp. 271-276, 1975.||",An Analysis of Competing Software Reliability Models
"W.E. Howden&&Department of Mathematics, University of Victoria, Victoria, BC, Canada|",An approach to functional testing is described in which the design of a program is viewed as an integrated collection of functions. The selection of test data depends on the functions used in the design and on the value spaces over which the functions are defined. The basic ideas in the method were developed during the study of a collection of scientific programs containing errors. The method was the most reliable testing technique for discovering the errors. It was found to be significantly more reliable than structural testing. The two techniques are compared and their relative advantages and limitations are discussed.,10.1109/TSE.1980.230467,IEEE Transactions on Software Engineering,"Packaging,NIST,Mathematics,Logic testing,Numerical analysis,Error correction,Error analysis","L. G. Stucki, ""Automatic generation of self-metric software"", Proc. 1973 IEEE Symp. Comput. Software Rel., pp. 94-100, 1973.||J. C. Huang, ""An approach to program testing"", Comput. Surveys, vol. 7, pp. 113-128, 1975.||E. F. Miller and R. A. Melton, ""Automated generation of test case data sets"", Proc. 1975 IEEE Int. Conf. Rel. Software, pp. 51-58, 1975.||R. E. Fairley, ""An experimental program testing facility"", IEEE Trans Software Eng., vol. SE-1, pp. 350-358, 1975.||K. W. Krause, R. W. Smith and M. A. Goodwin, ""Optimal software test planning through automated network analysis"", Proc. IEEE Symp. Comput. Software Rel., pp. 18-22, 1973.||S. R. Brown, ""Automated software quality assurance"" in Program Test Methods, NJ, Englewood Cliffs:Prentice-Hall, pp. 181-204, 1973.||C. V. Ramamoorthy and S. F. Ho, FORTRAN automatic code evaluation systems, Aug. 1974.||M. P. Page and J. P. Benson, ""The use of software probes in testing FORTRAN programs"", Computer, vol. 7, pp. 18-25, 1974.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-560, 1975.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-214, 1976.||R. W. Wolverton, ""The cost of developing large scale software"" in Practical Strategies for Developing Large Software Systems, MA, Reading:Addison-Wesley, pp. 73-100, 1975.||E. Dijkstra, ""Structured programming"" in Software Engineering Techniques, Belgium, Brussels:NATO Science Committee, 1969.||IMSL Library Reference Manual, 1978.||W. E. Howden, ""A survey of dynamic analysis methods"" in Software Testing and Validation Techniques, IEEE, 1978.||W. E. Howden, ""A survey of static analysis methods"" in Software Testing and Validation Techniques, IEEE, 1978.||W. E. Howden, ""Empirical studies of software validation"" in Software Testing and Validation Techniques, IEEE, 1978.||D. J. Panzl, ""Automatic software test drivers"", Computer, vol. 11, pp. 44-50, 1978.||W. E. Howden, ""Symbolic testing and the DISSECT symbolic evaluation system"", IEEE Trans. Software Eng., vol. SE-3, pp. 266-278, 1977.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, pp. 156-173, 1975.||",Functional Program Testing
"A.S. Tanenbaum&&Vrije Universiteit, Amsterdam, Netherlands|","A method for quickly producing compilers for high level languages is described. The technique consists of feeding a description of the language to be translated to a general-purpose macro processor. Used in this way, the macro processor functions as a compiler-compiler, providing automatic parsing, lexical scanning, symbol table operations, and handling of syntactic errors. A complete syntactic and semantic description of a WHILE statement (except for Boolean expression processing) is given in only seven lines, as an example. A system programming language implemented by this method is discussed in order to illustrate the main ideas. The compiler produced for this language is compared to other compilers produced by conventional methods.",10.1109/TSE.1976.233539,IEEE Transactions on Software Engineering,"Computer languages,Program processors,High level languages,Operating systems,Assembly,Writing,Production,Manufacturing,Control systems,Debugging",,A General-Purpose Macro Processor as a Poor Man's Compiler-Compiler
"R.F.H. Farag&&Department of Mathematics and Computer Science, Saint John's University, NY, USA|","In this paper a general-purpose interactive pattern recognition system is built using limited resources. The system utilizes Ribak's [5] relationship matrix (R-matrix) as a data structure and a PDP-9 minicomputer as hardware. The software developed for the interactive system along with the implemented idea of ""vague"" relations gives the human operator flexibility and aid in interactive file creation. Files created to describe complex patterns can be formed by merging simpler subfiles of different portions of that pattem. In addition to merging files (union operation), common elements between files can be detected using an intersection operation. User-defined routines are readily interfaced to the interactive system, thus increasing the system flexibility and giving the human operator a tailor-made effect.",10.1109/TSE.1977.229909,IEEE Transactions on Software Engineering,"Pattern recognition,Data structures,Interactive systems,Humans,Matrix decomposition,Hardware,Merging,Microcomputers,Man machine systems,Software design","E. A. Patrick, ""Interactive pattern analysis and classification utilizing prior knowledge"", Pattern Recognition, vol. 3, pp. 53-71, Apr. 1971.||G. L. Stanley, W. C. Nienow and G. G. Lendaris, ""SARF 'An interactive signature analysis research facility"", Proc. Purdue Centennial Symp. Inform. Proc., vol. 2, pp. 436-448, 1969-Apr.||D. J. Haul, G. H. Ball, D. E. Wolf and J. W. Eusebio, PROMENADE–An improved interactive-graphics man-machine system for pattern recognition, June 1969.||J. W. Sammon, A. H. Proctor and D. F. Roberts, ""An interactive graphic subsystem for pattern analysis in pattern recognition"", Pattem Recognition, vol. 3, pp. 37-52, Apr. 1971.||R. Ribak, N-dimensional grammer for pattern recognition, June 1971.||Y. T. Chien, Bibliography on interactive pattern recognition and related topics, Feb. 1974.||P. M. Lewis, ""The characteristic selection problem in recognition systems"", IRE Trans. Information Theory, vol. IT-8, pp. 171-178, Feb. 1962.||Y. T. Chien and K. S. Fu, ""Solution and ordering of feature observation in a pattern recognition system"", Information and Control, vol. 12, pp. 395-414, 1968.||",Interactive Pattern Recognition: A System and Data Structure
"Per Brinch Hansen&&ONT, USA|",Describes a new programming language for structured programming of computer operating systems. It extends the sequential programming language Pascal with concurrent programming tools called processes and monitors. Section I explains these concepts informally by means of pictures illustrating a hierarchical design of a simple spooling system. Section II uses the same example to introduce the language notation. The main contribution of Concurrent Pascal is to extend the monitor concept with an explicit hierarchy of access rights to shared data structures that can be stated in the program text and checked by a compiler.,10.1109/TSE.1975.6312840,IEEE Transactions on Software Engineering,"Monitoring,Data structures,Programming,Permission,Computer languages,Operating systems,Program processors",,The programming language Concurrent Pascal
"R.D. Gordon&&Digital Systems Research Department, Bell Laboratories, Inc., Murray Hill, NJ, USA|","Several measures of program clarity have been proposed which attempt to assess the clauity of a program as a function of easily measured properties of the code. Such measures include the number of variables or statements, or the density of GO TO's.",10.1109/TSE.1979.234168,IEEE Transactions on Software Engineering,"Impurities,Software measurement,Volume measurement,Computer languages,Programming profession,Density measurement,Purification,Computer science,Digital systems","N. Bulut and M. H. Halstead, ""Impurities found in algorithm implementations"", ACM SIGPLAN Notices, vol. 9, pp. 9-12, Mar. 1974.||L. J. Chmura and H. F. Ledgard, Cobol With Style: Programming Proverbs, NJ, Rochelle Park:Hayden, 1976.||O.-J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||J. L. Elshoff, ""Measuring commercial PL/I programs using Halstead's criteria"", ACM SIGPLAN Notices, vol. 11, pp. 38-46, May 1976.||M. H. Halstead, ""Natural laws controlling algorithm structure?"", ACM SIGPLAN Notices, vol. 7, pp. 19-26, Feb. 1972.||M. H. Halstead, Elements of Software Science, New York:Elsevier, 1977.||I. D. Hill, R. S. Scowen and B. A. Wichmann, ""Writing algorithms in ALGOL 60"", Software Practice and Experience, vol. 5, pp. 223-224, July-Sept. 1975.||B. W. Kernighan and P. J. Plauger, The Elements of Programming Style, New York:McGraw-Hill, 1974.||B. W. Kernighan and P. J. Plauger, ""Programming style: Examples and counterexamples"", ACM Computing Surveys, vol. 6, pp. 303-319, Dec. 1974.||D. E. Knuth, A review of 'structured programming, June 1973.||D. E. Knuth and R. W. Floyd, ""Notes on avoiding GO TO‑statements"", Inform. Process. Lett., vol. 1, pp. 23-31, Feb. 1971.||J. M. Yohe, ""An overview of programming practices"", ACM Computing Surveys, vol. 6, pp. 221-245, Dec. 1974.||",A Qualitative Justification for a Measure of Program Clarity
"C.A. Sunshine&&Information Sciences Institute, University of Southern California|D.H. Thompson&&unknow|R.W. Erickson&&unknow|S.L. Gerhart&&unknow|D. Schwabe&&unknow|",,10.1109/TSE.1983.236302,IEEE Transactions on Software Engineering,"Protocols,Computer science",,"Correction to ""Specification and Verification of Communication Protocols in AFFIRM Using State Transition Models"""
"A.J. Smith&&Computer Science Division, Department of Electrical Engineering and Computer Sciences and the Electronics Research Laboratory, University of California, Berkeley, CA, USA|","Set associative page mapping algorithms have become widespread for the operation of cache memories for reasons of cost and efficiency. We show how to calculate analytically the effectiveness of standard bit-selection set associative page mapping or random mapping relative to fully associative (unconstrained mapping) paging. For two miss ratio models, Saltzer's linear model and a mixed geometric model, we are able to obtain simple, closed-form expressions for the relative LRU fault rates. We also experiment with two (infeasible to implement) dynamic mapping algorithms, in which pages are assigned to sets either in an LRU or FIFO manner at fault times, and find that they often yield significantly lower miss ratios than static algorithms such as bit selection. Trace driven simulations are used to generate experimental results and to verify the accuracy of our calculations. We suggest that as electronically accessed third-level memories composed of electron-beam tubes, magnetic bubbles, or charge-coupled devices become available, algorithms currently used only for cache paging will be applied to main memory, for the same reasons of efficiency, implementation ease, and cost.",10.1109/TSE.1978.231482,IEEE Transactions on Software Engineering,"Associative memory,Solid modeling,Cache memory,Costs,Closed-form solution,Heuristic algorithms,Accuracy,Electron tubes,Magnetic devices,Energy resources","L. Bloom, M. Cohen and S. Porter, ""Considerations in the design of a computer with high logic-to-memory speed ratio"", Proc. Gigacycle Computing Systems, 1962-Jan.||pp. 53-63.||J. S. Liptay, ""Structural aspects of the system/360 model 85 part II: The Cache"", IBM Syst. J., vol. 7, pp. 15-21, 1968.||""IBM Corporation"" in IBM System/360 and System/370 Model 195 Functional Characteristics (GA22-6943-2), NY, Poughkeepsie:IBM Syst. Development Division.||""IBM Corporation"" in IBM System/370 Model 168 Functional Characteristics (GA22-7010), NY, Poughkeepsie:IBM Syst. Products Division, May 1974.||System/370 Model 168. Theory of Operationl Diagrams Manual (vol. 4), May 1975.||A. Kotok, private communication, Jan. 1976.||C. J. Conti, ""Concepts for buffer storage"", IEEE Comput. Group News, pp. 9-13, Mar. 1969.||P. J. Denning, ""The working set model for program behavior"", Commun. Ass. Comput. Mach., vol. 11, pp. 323-333, May 1968.||R. L. Mattson, J. Gecsei, D. R. Slutz and I. L. Traiger, ""Evaluation techniques for storage hierarchies"", IBM Syst. J., vol. 9, pp. 78-117, 1970.||L. A. Belady, ""A study of replacement algorithms for a virtual storage computer"", IBM Syst. J., vol. 5, pp. 78-101, 1966.||K. Maruyama, ""mLRU page replacement algorithm in terms of the reference matrix"", IBM Tech. Disclosure Bulletin, vol. 17, pp. 3101-3103, Mar. 1975.||470V/6 Machine Reference Manual, 1976.||A. J. Smith, Sequential program prefetching in memory hierarchies, Apr. 1977.||A. Bobeck, P. Bonyhard and J. Gecsei, ""Magnetic bubbles-An emerging new memory technology"", Proc. IEEE, vol. 63, pp. 1176-1195, 1975-Aug.||R. B. Clover, ""Limitations of and expectations for magnetic bubble memories"", Proc. IEEE Comput. Soc. Conf., pp. 96-98, 1977-Feb.||G. Amelio, ""Charge-coupled devices for memory applications"", Proc. NCC 1975, pp. 515-522.||D. House, ""CCD vs. RAM for bulk storage applications"", Proc. IEEE Comput. Soc. Conf., pp. 58-61, 1976-Feb.||Economic impact of CCD memory, March 1975.||promotional literature on Fairchild CCD memory CDC 450/450A.||R. J. Spain, J. I. Jauvits and F. T. Ruben, ""DOT memory systems"", Proc. NCC 1974, pp. 841-846.||W. Hughes, C. Lemond, H. Parks, G. Ellis, G. Possin and R. Wilson, ""A semiconductor nonvolatile electron beam accessed mass memory"", Proc. IEEE, vol. 63, pp. 1230-1240, 1975-Aug.||J. Kelly, ""The development of experimental electron-beam‑addressed memory module"", Computer, pp. 32-42, Feb. 1975.||Computer Decisions, pp. 16, July 1975.||J. H. Saltzer, ""A simple linear model of demand paging performance"", Commun. Ass. Comput. Mach., vol. 17, pp. 181-186, Apr. 1974.||B. S. Greenberg, An experimental analysis of program reference patterns in the multics virtual memory.||W. F. King, ""Analysis of demand paging algorithms"", Proc. IFIPS Conference, pp. ta-3-155-ta-3-159, 1971-Aug.||A. J. Smith, A modified working set paging algorithms, Aug. 1974.||IEEE Trans. Comput., vol. C-25, pp. 907-914, Sept. 1976.||A. Aho, P. Denning and J. Ullman, ""Principles of optimal page replacement"", J. Ass. Comput. Mach., vol. 18, pp. 80-93, Jan. 1971.||J. W. Cooley and J. W. Tukey, ""An algorithm for the machine calculation of complex Fourier series"", Math. Computation, vol. 19, pp. 297-301, 1965.||",A Comparative Study of Set Associative Memory Mapping Algorithms and Their Use for Cache and Main Memory
"S.K. Basu&&Department of Computer Sciences, University of Nebraska, Lincolnshire, NE, USA|","A systematic approach to the development of totally correct iterative programs is investigated for the class of accumulation problems. In these problems, the required output information is usually obtained by accumulation during successive passes over input data structures. The development of iterative programs for accumulation problems is shown to involve successive generalizations of the data domain and the corresponding function specifications. The problem of locating these generalizations is discussed. It is shown that not all function specifications can be realized in terms of terminating computations of a stand-alone iterative program. A linear data domain is defined in terms of decomposition and finiteness axioms, and the property of well behavedness of a loop body over a linear data domain is introduced. It is shown that this property can be used to generate loop body specifications from specifically chosen examples of program behavior. An abstract program for an accumulation problem is developed using these considerations. The role of generalizations as an added parameter to the program development process is discussed.",10.1109/TSE.1980.230468,IEEE Transactions on Software Engineering,"Data structures,Iterative methods,Equations,Programming profession,Binary trees,Programmable logic arrays","M. A. Auslander and H. R. Strong, ""Systematic recursion removal"", Commun. Ass. Comput. Mach., vol. 21, pp. 217-233, Feb. 1978.||S. Alagic and M. A. Arbib, The Design of Well Structured and Correct Programs, New York:Springer-Verlag, 1977.||S. K. Basu and J. Misra, ""Proving loop programs"", IEEE Trans. Software Eng., vol. SE-1, pp. 76-85, Mar. 1975.||S. K. Basu and J. Misra, ""Some classes of naturally provable programs"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||R. S. Boyer and J. S. Moore, ""Proving theorems about LISP functions"", J. Ass. Comput. Mach., vol. 22, pp. 129-144, Jan. 1975.||W. A Burkhard, ""Nonrecursive traversal of trees"", Computer J., vol. 18, pp. 227-230, Aug. 1975.||R. M. Burstall and J. Darlington, ""A transformation system for developing recursive programs"", J. Ass. Comput. Mach., vol. 24, pp. 44-67, Jan. 1977.||F. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, pp. 1-82, 1972.||D. E. Knuth, The Art of Computer Programming: Vol. 1/Fundamental Algorithms, New York:Addison-Wesley, 1968.||Z. Manna and R. Waldinger, ""Automatic synthesis of recursive programs"", Proc. SIGART/SIGPLAN Symp. Artif. Intell. Prog. Lang., 1977-Aug.||L. Siklossy, ""The synthesis of programs from their properties and the insane heuristics"", Proc. 3rd Texas Conf. on Comput. Syst., 1974.||P. D. Summers, ""A methodology for LISP program construction from examples"", Proc. 3rd ACM Symp. Prin. Prog. Lang., 1975.||M. Wand, ""A new incompleteness result for Hoare's system"", Proc. ACM Symp. Theory of Comput., 1976-May.||B. Wegbreit, ""Complexity of synthesizing inductive assertions"", J. Ass. Comput. Mach., vol. 24, July 1977.||N. Wirth, ""On the composition of well structured programs"", Comput. Surveys, vol. 6, pp. 247-259, 1974.||",On Development of Iterative Programs from Function Specifications
"Yaohan Chu&&Department of Computer Science, University of Maryland, College Park, MD, USA|R. Cannon&&Department of Computer Science, University of Maryland, College Park, MD, USA|","It is our habit in writing an English composition that, as we write each word, each phrase, each sentence, and each paragraph, we consciously or unconsciously check the syntax and the semantics of the composition just written. Writing a computer program in a high-level language could be made similar to writing a composition in English. In this case, a highly interactive highlevel language system checks the syntax and the semantics of the highlevel language program as each symbol, each expression, and each statement are being entered at the terminal. When the source program is completely entered, the program could have been debugged and could have run once.",10.1109/TSE.1976.233802,IEEE Transactions on Software Engineering,"High level languages,Microprocessors,Interactive systems,Writing,Natural languages,Debugging,Joining processes,Microcomputers,Computer science,Computer errors","B. W. Lampson, ""Interactive machine language programming"", 1965 Fall Joint Comput. Conf. AFIPS Conf. Proc., vol. 27, pp. 473-481, 1965.||Y. Chu, J. C. Yeh and E. R. Cannon, A direct execution interpreter, Feb. 1975.||Y. Chu and E. R. Cannon, Design of an interactive direct‑execution system, June 1975.||L. H. Cooke, ""Programming time vs. running time"", Datamation, pp. 56-58, Dec. 1974.||J. Gibbons, ""When to use high-level-languages in microcomputerbased systems"", Electronics, pp. 107-111, Aug. 1975.||",Interactive High-Level Language Direct-Execution Microprocessor System
"L.G. Shapiro&&Department of Computer Science, Kansas State University, Manhattan, KS, USA|R.J. Baron&&Department of Computer Science, University of Iowa, Iowa, IA, USA|","Extended Snobol picture pattern processor (ESP3) is a programming language and pattern recognition system which was designed for generating, recognizing, and manipulating two-dimensional line drawings. An ESP3 picture pattern describes a class of line drawings just as a Snobol pattern describes a class of strings. During pattern matching, a subject picture is searched for the occurrence of a sub-picture which matches a given picture pattern. The search of the subject picture is ordered left-to-right and top-to-bottom, and the search program uses scanner guidance information found in the picture pattern to limit the area of the subject picture to be searched. An experimental implementation of ESP3 has been developed to test the feasibility of the system. This paper describes the ESP3 picture patterns, the pattern matching operation, and the experimental implementation of ESP
<sup xmlns:mml=""http://www.w3.org/1998/Math/MathML"" xmlns:xlink=""http://www.w3.org/1999/xlink"">3</sup>
.",10.1109/TSE.1977.229910,IEEE Transactions on Software Engineering,"Electrostatic precipitators,Pattern recognition,Pattern matching,Computer graphics,Page description languages,Computer languages,Computer science,Tail,System testing,Image processing","R. A. Kirsch, ""Computer interpretation of English text and picture patterns"", IEEE Trans. Electron. Comput., vol. EC-13, pp. 363-376, Aug. 1964.||M. F. Dacy, ""The syntax of a triangle and some other figures"", Pattern Recognition, vol. 2, pp. 11-13, Jan. 1970.||M. F. Dacy, ""Poly: A two-dimensional language for a class of polygons"", Pattern Recognition, vol. 3, pp. 197-208, July 1971.||A. Rosenfeld and M. Thurston, ""Edge and curve detection for visual scene analysis"", IEEE Trans. Comput., vol. C-20, pp. 562-569, May 1971.||D. L. Milgram and A. Rosenfeld, ""Array automata and array grammars"", Proc. IFIPS Congress, vol. 71, pp. 166-173, 1972.||R. Narasimhan, ""Labeling schemata and syntactic description of pictures"", Inform. Contr., vol. 7, pp. 151-179, June 1964.||R. Narasimhan, ""Syntax-directed interpretation of classes of pictures"", Commun. Ass. Comput. Mach., vol. 9, no. 3, pp. 166-173, Mar. 1966.||R. Narasimhan, ""Picture languages"" in Picture Language Machines, New York:Academic Press, pp. 1-30, 1970.||R. S. Ledley, L. S. Rotolo, T. J. Golab, J. D. Jacobsen, M. D. Ginsberg and J. B. Wilson, ""FIDAC: Film input to digital automatic computers and associated syntax-directed pattern recognition programming system"" in Optical and Electro-Optical Information Processing, MA, Cambridge:MIT Press, pp. 591-613, 1965.||R. H. Anderson, ""Syntax-directed recognition of handprinted two-dimensional mathematics"" in Interactive. Systems for Experimental Applied Mathematics, New York:Academic Press, pp. 436-539, 1968.||T. G. Evans, ""A grammar-controlled pattern analyzer"", Proc. IFIP Congress, vol. 68, 1969.||W. F. Miller and A. C. Shaw, ""Linguistic methods in picture processing-A survey"", Proc. AFIPS Fall Joint Comput. Conf AFIPS Conf Proc., pp. 279-290, 1969.||A. C. Shaw, ""Parsing of graph-representable pictures"", J. Ass. Comput. Mach., vol. 17, no. 3, pp. 453-481, June 1970.||A. C. Shaw, ""Picture graphs grammars and parsing"" in Frontiers of Pattern Recognition, New York:Academic Press, pp. 491-510, 1972.||M. B. Clowes, ""Pictorial relationships-A syntactic approach"" in Machine Intelligence, New York:American Elsevior, vol. 4, pp. 361-384, 1969.||J. Feder, ""Plex languages"", Inform. Sci., vol. 3, pp. 225-241, July 1971.||J. L. Pfaltz and A. Rosenfeld, ""Web grammars"", Proc. Int. Joint Conf. Artificial Intelligence, pp. 609-619, 1969.||K. S. Fu, ""On syntactic pattern recognition and stochastic languages"" in Frontiers of Pattern Recognition, New York:Academic Press, pp. 113-132, 1972.||Y. T. Chien and R. Ribak, ""A new data base for syntax-directed pattern analysis and recognition"", IEEE Trans. Comput., vol. C-21, pp. 790-801, July 1972.||R. B. Stanton, The recovery of descriptions in graphical communications, May 1970.||L. G. Shapiro, ESP3: A Language for the Generation Recognition and Manipulation of Line Drawings, 1974.||L. G. Shapiro, ""ESP3: A high-level graphics language"", Proc. 2nd Annu. Conf. Computer Graphics and Interactive Techniques.||Comput. Graphics, vol. 9, no. 1, pp. 70-77, 1975.||R. E. Grizwold, J. F. Poage and I. P. Polonsky, The Snobol4 Programming Language, NJ, Englewood Cliffs:Prentice-Hall, 1971.||R. B. K. Dewar, SPITBOL Version 2.0, IL, Chicago:Illinois Institute of Technology, 1971.||",ESP<sup>3</sup>: A Language for Pattern Description and a System for Pattern Recognition
"Brian Randell&&Computing Laboratory, University of Newcastle upon Tyne, Newcastle upon Tyne, UK|","Presents and discusses the rationale behind a method for structuring complex computing systems by the use of what is termed `recovery blocks,' `conversations,' and `fault-tolerant interfaces.' The aim is to facilitate the provision of dependable error detection and recovery facilities which can cope with errors caused by residual design inadequacies, particularly in the system software, rather than merely the occasional malfunctioning of hardware components.",10.1109/TSE.1975.6312842,IEEE Transactions on Software Engineering,"Software,Fault tolerance,Fault tolerant systems,Hardware,Complexity theory,Software reliability,Computers",,System structure for software fault tolerance
"D.L. Parnas&&Information Systems Staff, Communications Sciences Division, Naval Research Laboratory, Inc., Washington D.C., USA|","Designing software to be extensible and easily contracted is discussed as a special case of design for change. A number of ways that extension and contraction problems manifest themselves in current software are explained. Four steps in the design of software that is more flexible are then discussed. The most critical step is the design of a software structure called the "" uses"" relation. Some criteria for design decisions are given and illustrated using a small example. It is shown that the identification of minimal subsets and minimal extensions can lead to software that can be tailored to the needs of a broad variety of users.",10.1109/TSE.1979.234169,IEEE Transactions on Software Engineering,"Software design,Software engineering,Programming profession,Data structures,Computer industry,Computer science,Information systems,Software systems,Job shop scheduling,Processor scheduling","E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||D. L. Parnas, ""On the design and development of program families"", IEEE Trans. Software Eng., vol. SE-2, pp. 1-9, Mar. 1976.||2nd Int. Conf. Software Engineering, 1976-Oct.-13-15.||IEEE Trans. Software Eng. (Special Issue), vol. SE-2, Dec. 1976.||D. L. Parnas, G. Handzel and H. Wurges, ""Design and specification of the minimal subset of an operating system family"", 2nd Int. Conf. Software Engineering, 1976-Oct.-13-15.||IEEE Trans. Software Eng. (Special Issue), vol. SE-2, pp. 301-307, Dec. 1976.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., Dec. 1972.||T. A. Linden, ""The use of abstract data types to simplify program modifications"", Proc. Conf. Data: Abstraction Definition and Structure, 1976-Mar.-22-24.||ACM SIGPLAN Notices (Special Issue), vol. II, 1976.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., May 1972.||D. L. Parnas, ""Information distribution aspects of design methodology"", 1971 Proc. IFIP Congr., 1971.||D. L. Parnas, ""The use of precise specifications in the development of software"", 1977 Proc. IFIP Congr., 1977.||D. L. Parnas, Use of abstract interfaces in the development of software for embedded computer systems, June 1977.||D. L. Parnas, Some hypotheses about the 'uses' hierarchy for operating systems, Mar. 1976.||D. L. Parnas, ""On a 'buzzword': Hierarchical structure"", 1974 Proc. IFIP Congr., 1974.||D. L. Parnas and D. L. Siewiorek, ""Use of the concept of transparency in the design of hierarchically structured systems"", Commun. Ass. Comput. Mach., vol. 18, July 1975.||E. W. Dikstra, ""The structure of the THE-multiprogramming system"", Commun. Ass. Comput. Mach., vol. 11, pp. 341-346, May 1968.||B. Liskov, ""The design of the Venus operating system"", Commun. Ass. Comput. Mach., vol. 15, pp. 144-149, Mar. 1972.||P. A. Janson, Using type extension to organize virtual memory mechanisms, MA, Cambridge:Lab. for Comput. Sci., M.I.T., Sept. 1976.||P. A. Johnson, Using type-extension to organize virtual memory mechanisms, August 1977.||P. Brinch Hansen, ""The nucleus of the multiprogramming system"", Commun. Ass. Comput. Mach., vol. 13, pp. 238-241, 250, Apr. 1970.||W. Wulf, E. Cohen, A. Jones, R. Lewin, C. Pierson and F. Pollack, ""HYDRA: The kernel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, pp. 3 37-345, June 1974.||G. J. Popek and C. S. Kline, ""The design of a verified protection system"", Proc. Int. Workshop Prot. In Oper. Syst., pp. 183-196.||A. R. Saxena and T. H. Bredt, ""A structured specification of a hierarchical operating system"", Proc. 1975 Int. Conf. Reliable Software.||",Designing Software for Ease of Extension and Contraction
J.D. Musa&&unknow|,,10.1109/TSE.1983.236455,IEEE Transactions on Software Engineering,"Software engineering,Printers,Indexes,Transaction databases,Network operating systems,Application software,Programming profession,Approximation algorithms,Computer networks,Computer applications","Proceedings-Human Factors in Computer Systems, 1982-Mar.-15-17.||",Guest Editorial: COMPSAC '81 Special Section
"G.D. Ripley&&Department of Computer Science, University of Arizona Tucson, Tucson, AZ, USA|R.E. Griswold&&Department of Computer Science, University of Arizona Tucson, Tucson, AZ, USA|D.R. Hanson&&Department of Computer Science, University of Arizona Tucson, Tucson, AZ, USA|","Results of measuring the performance of the storage management subsystem in an implementation of SNOBOL4 are described. By instrumenting the storage management system, data concerning the size, lifetime, and use of storage blocks were collected. These data, like those obtained from conventional time measurement techniques, were used to locate program inefficiencies. In addition, these measurements uncovered some deficiencies in the storage management system, and provided the basis upon which to judge the heuristics used in the garbage collector.",10.1109/TSE.1978.231483,IEEE Transactions on Software Engineering,"Programming profession,Instruments,Time measurement,Pattern matching,Computer science,High level languages,Runtime,History,Storage automation,Memory management","D. E. Knuth, ""An empirical study of Fortran programs"", Software-Practice and Experience, vol. 1, pp. 105-133, Apr.-June 1971.||D. W. Clark and C. C. Green, ""An empirical study of list structure in Lisp"", Commun. Ass. Comput. Mach., vol. 20, pp. 78-86, Feb. 1977.||J. F. Gimpel, SITBOL Version 3.0, Nov. 1972.||D. R. Hanson, ""Storage management for an implementation of SNOBOL4"", Software-Practice and Experience, vol. 7, pp. 179-192, Mar.-Apr. 1977.||J. F. Gimpel, A Design for SNOBOL4 for the PDP-10, May 1973.||U. Hill, ""Special runtime organization techniques for Algol 68"" in Lecture Notes in Computer Science Vol. 21: Compiler Construction, Berlin:Springer‑Verlag, pp. 222-252, 1974.||R. E. Griswold and D. R. Hanson, ""An Overview of SL5"", SIGPLAN Notices, vol. 12, pp. 40-50, Apr. 1977.||G. D. Ripley, ""Program perspectives: A relational representation of measurement data"", IEEE Trans. Software Eng., vol. SE-3, pp. 296-300, July 1977.||R. E. Griswold, String and List Processing in SNOBOL4 Techniques and Applications, NJ, Englewood Cliffs:Prentice-Hall, pp. 168-191, 1975.||R. O. Anderson and R. E. Griswold, ACOLYTE A Document Formatting Program, Feb. 1976.||W. R. Sears, The Design of SIXBOL: A Fast Implementation of SNOBOL4 for the CDC6000 Series Computers, Nov. 1974.||J. F. Gimpel, ""The minimization of spatially-multiplexed character sets"", Commun. Ass. Comput. Mach., vol. 17, pp. 315-318, June 1974.||J. F. Gimpel and D. R. Hanson, The Design ofELFBOL—A Full SNOBOL4 for the PDP-11, Oct. 1973.||",Performance of Storage Management in an Implementation of SNOBOL4
"D.L. Russell&&Bell Laboratories, Inc., Holmdel, NJ, USA|",In systems of asynchronous processes using messagelists with SEND–RECEIVE primitives for interprocess communication recovery primitives are defined to perform state restoration: MARK saves a particular point in the execution of the program; RESTORE resets the system state to an earlier point (saved by MARK); and PURGE discards redundant information when it is no longer needed for possible state restoration.,10.1109/TSE.1980.230469,IEEE Transactions on Software Engineering,"Hardware,Data structures,Sufficient conditions,Software systems,Aging,Resumes,Database systems,Computer science,System testing","T. Anderson and R. Kerr, ""Recovery blocks in action: A system supporting high reliability"", Proc. 2nd Int. Conf. on Software Eng., pp. 447-457, 1976-Oct.||P. Brinch Hansen, ""The nucleus of a multiprogramming system"", Commun. Assoc. Comput. Mach., vol. 13, pp. 238-241, 250, Apr. 1970.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice‑Hall, 1973.||E. W. Dijkstra, ""Cooperating sequential processes"" in Programming Languages, New York:Academic, 1968.||J. J. Horning, H. C. Lauer, P. M. Melliar-Smith and B. Randell, ""A program structure for error detection and recovery"" in Lecture Notes in Computer Science, New York:Springer-Verlag, vol. 16, pp. 171-187, 1974.||K. H. Kim, ""An approach to programmer-transparent coordination of recovering parallel processes and its efficient implementation rules"", Proc. 1978 Int. Conf. on Parallel Processing, 1978-Aug.||L. Lamport, ""Time clocks and the ordering of events in a disturbed system"", Commun. Assoc. Comput. Mach., vol. 21, pp. 558-565, July 1978.||P. M. Merlin and B. Randell, ""State restoration in distributed systems"", Dig. 8th Int. Conf. on Fault-Tolerant Comput., pp. 129-134, 1978-June.||B. Randell, ""System structure for software fault tolerance"", IEEE Trans. Software Eng., vol. SE-1, pp. 220-232, June 1975.||B. Randell, P. A. Lee and P. C. Treleaven, ""Reliability issues in computing system design"", Comput. Surveys, vol. 10, pp. 123-165, June 1978.||D. L. Russell, State restoration among communicating processes, June 1976.||D. L. Russell, ""Process backup in producer-consumer systems"", Proc. 6th Symp. Operat. Syst. Principles, 1977-Nov.||Operat. Syst. Rev., vol. 11, no. 5, pp. 151-157.||D. L. Russell, The domino effect in producer-consumer state restoration.||D. L. Russell and M. J. Tiedeman, ""Multiprocess recovery using conversations"", Dig. 9th Int. Conf. on Fault-Tolerant Comput., pp. 106-109, 1979-June.||S. K. Shrivastava and J.-P. Banatre, ""Reliable resource allocation between unreliable processes"", IEEE Trans. Software Eng., vol. SE-4, pp. 230-241, May 1978.||",State Restoration in Systems of Communicating Processes
"D.B. Wortman&&Department of Computer Science and the Computer Systems Research Group, University of Toronto, Toronto, ONT, Canada|",This correspondence describes an experimental comparison of timing information provided by a large multiprogramming operating system (OS/360 MVT) with timing information derived directly from a high-resolution hardware clock. The hardware clock was found to be a superior source of timing information.,10.1109/TSE.1976.233803,IEEE Transactions on Software Engineering,"Timing,Clocks,Operating systems,Hardware,Software tools,Time measurement,Processor scheduling,Computer science,Delay systems,Delay effects","W. M. Gentleman and B. A. Wichmann, ""Timing on computers"", Computer Architecture News, vol. 2, Oct. 1973.||C. J. Conti, ""Concepts for buffer storage"", IEEE Computer Group News, Mar. 1969.||""IBM System/360 Operating System Supervisor"", Services and Macro Instructions.||""IBM System/370"", Principles of Operation.||L. L. Pinsonneaut, ""Computer Measurement and Evaluation Newsletter"", SHARE, Feb. 1973.||",A Study of High-Resolution Timing
"S.B. Soffer&&Department of Human Oncology, Biodata Section, Clinical Cancer Center, University of Wisconsin, Madison, Madison, WI, USA|R.B. Friedman&&Department of Human Oncology, Biodata Section, Clinical Cancer Center, University of Wisconsin, Madison, Madison, WI, USA|","Usage of the Touch-Tone telephone as a computer input device has increased dramatically during the past five years. The recent decrease in cost and increase in intelligibility of synthetic voice systems has made it possible to couple voice response systems with Touch-Tone telephones to create a low-cost, highly flexible computer terminal. However, usage is primarily restricted to applications that can be accomplished with a limited character set, do not need an extensive user protocol, consist of relatively short interactive sessions, and do not require immediate hard copy feedback. This paper discusses the first of these limitations: the unambiguous representation of 26 letters, 10 digits, and several special characters by the 12 keys of a Touch-Tone keyboard. Existing input schemes often require multiple keying to represent a single alphanumeric character or table look-up of numeric codes to represent a message. An alternative scheme would permit as-is encoding of alphabetic information. Using a specific application, as-is encoding is examined in detail, and the theory for recognition of encoded English phrases is generalized by two algorithms.",10.1109/TSE.1977.231123,IEEE Transactions on Software Engineering,"Information retrieval,Telephony,Encoding,Costs,Speech synthesis,Computer peripherals,Application software,Protocols,Feedback,Keyboards","A. V. Aho and M. J. Corasick, ""Efficient string matching: An aid to bibliographic search"", Commun. Ass. Comput. Mach., vol. 18, pp. 333-340, June 1975.||S. J. Cheung, R. B. Friedman, S. Entine and J. Huhta, ""Implemantation of a d of a dual computer voice-response system for patient-physician encounter simulation"", Nat. Conf. Ass. for Advancement of Med. Instrumen., 1976-Mar.||E. J. Desautels and S. B. Soffer, ""Touch-Tone input techniques; Data entry using a constrained keyboard"", Proc. Nat. Conf Ass. Comput. Mach., 1974-Nov.||R. B. Friedman, ""A computer program for simulating the patient‑physician encounter"", J. Med. Educ., vol. 48, pp. 92-97, Jan. 1973.||D. E. Knuth, Searching and Sorting. The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 3, 1973.||A. I. Wasserman and D. D. Sherertz, ""A balanced view of MUMPS"", Ass. Comput. Mach. SIGPLAN Notices, vol. 11, pp. 16-25, Apr. 1976.||",Information Retrieval Based on Touch-Tone® Encoded Alphanumeric Keys
"William A. Wulf&&Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|","Deals with the problem of reliability in a hardware/software system. More specifically it deals with the strategy used to achieve reliability in a particular hardware/software system built by the author and his colleagues. Rather than dealing with the myriad details of the reliability aspects of this system, the paper focuses on the design philosophy which aims at keeping the system operational even though the underlying hardware may be malfunctioning. This philosophy is essentially an extension of the `modular' programming methodology to include dynamic error detection and recovery.",10.1109/TSE.1975.6312843,IEEE Transactions on Software Engineering,"Hardware,Software reliability,Program processors,Kernel,Redundancy",,Reliable hardware/software architecture
"G.R. Andrews&&Department of Computer Science, Cornell University, Ithaca, NY, USA|","Modula is a new programming language for implementing dedicated, parallel systems. Following a systematic design technique, this paper illustrates the use of Modula for the design of a message switching communication system. A message switching system poses a number of interesting. problems: a high degree of concurrent activity exists, a variety of I/O devices need to be controlled, messages can have multiple destinations, and messages can be preempted. The strengths and weaknesses of Modula with respect to these specific problems and its utility as a general purpose language are evaluated.",10.1109/TSE.1979.234170,IEEE Transactions on Software Engineering,"Switching systems,Communication switching,Software design,High level languages,Operating systems,Documentation,Communication system control,Control systems,Computer languages,Process design","G. R. Andrews, Modula and the design of a message switching communication system, Jan. 1978.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||B. W. Lampson, ""Report on the programming language Euclid"", Sigplan Notices, vol. 12, pp. 1-79, Feb. 1977.||J. R. McGraw and G. R. Andrews, ""Access control in parallel programs"", IEEE Trans. Software Eng., vol. SE-5, pp. 1-9, Jan. 1979.||Jan. 1978.||S. Owicki and D. Gries, ""An axiomatic proof technique for paraUel programs I"", Acta Informatica, vol. 6, pp. 319-340, 1976.||N. Wirth, ""The programming language Pascal"", Acta Informatica, vol. 1, pp. 35-63, 1971.||N. Wirth, ""Modula: a language for modular multiprogramming"", Software–Practice and Experience, vol. 7, pp. 3-35, 1977.||N. Wirth, ""The use of Modula"", Software–Practice and Experience, vol. 7, pp. 37-65, 1977.||N. Wirth, ""Design and implementation of Modula"", Software–Practice and Experience, vol. 7, pp. 67-84, 1977.||",The Design of a Message Switching System: An Application and Evaluation of Modula
"L.F. Rubin&&Prime Computer, Inc., Framingham, MA, USA|","A language-independent syntax-directed pretty printer has been implemented as the first step towards building a language-independent syntax-directed editor. The syntax-directed pretty printer works in two phases: the grammar processing phase and the program processing phase. In the grammar processing stage, a grammar which contains a context-free grammar and information for the parser and pretty printer is processed and all files needed by the second phase are written. With these files, the syntax-directed pretty printer works for the language of the grammar. The syntax-directed editor would use the same grammar processing phase to construct the files needed to make it work for a specific language. In the program processing phase, programs in the language of the grammar are parsed and parse trees are built. If syntax errors are found, error messages are produced and error recovery is done. The parse trees are pretty printed according to the pretty printer specifications given in the grammar, resulting in well-indented, syntactically clear programs.",10.1109/TSE.1983.236456,IEEE Transactions on Software Engineering,"Printers,Switches,Programming environments,Software tools,Computer languages,Software engineering","T. Teitelbaum, The Cornell programming synthesizer: A tutorial introduction, Jan. 1980.||T. Teitelbaum and T. Reps, The Cornell programming synthesizer: A syntax-directed programming environment, May 1980.||E. Shapiro, G. Collins, L. Johnson and J. Ruttenberg, PASES: A programming environment for Pascal, Dep. Comput. Sci., Yale Univ., Apr. 1980.||P. Feiler and R. Medina-Mora, An incremental programming environment, Dep. Comput. Sci., Carnegie-Mellon Univ., Apr. 1980.||A. Lederman, An abstracted bibliography on programming environments, Dep. Elec. Eng. Comput. Sci., M.I.T., June 1980.||M. N. Wegman, Parsing for structured editors, 1980.||D. Oppen, ""Prettyprinting"", ACM TOPLAS, vol. 2, pp. 465-483, Oct. 1980.||M. E. Lesk, LEX–A lexical analyzer generator, NJ, Murray Hill:Bell Labs., 1975.||S. C. Johnson, YACC–Yet another compiler compiler, NJ, Murray Hill:Bell Labs., 1979.||S. L. Graham and S. P. Rhodes, ""Practical syntactic error recovery"", Commun. Ass. Comput. Mach., vol. 18, pp. 639-650, Nov. 1975.||",Syntax-Directed Pretty Printing—A First Step Towards a Syntax-Directed Editor
"H.S. Stone&&Department of Electrical and Computer Engineering, University of Massachusetts, Amherst, MA, USA|","This paper gives timing comparisons for three sorting algorithms written for the CDC STAR computer. One algorithm is Hoare's Quicksort, which is the fastest or nearly the fastest sorting algorithm for most computers. A second algorithm is a vector version of Quicksort that takes advantage of the STAR's vector operations. The third algorithm is an adaptation of Batcher's sorting algorithm, which makes especially good use of vector operations but has a complexity of N (log N)2 as compared to a complexity of N log N for the Quicksort algorithms. In spite of its worse complexity, Batcher's sorting algorithm is competitive with the serial version of Quicksort for vectors up to the largest that can be treated by STAR. Vector Quicksort outperforms the other two algorithms and is generally preferred. These results indicate that unusual instruction sets can introduce biases in program execution time that counter results predicted by worst-case asymptotic complexity analysis.",10.1109/TSE.1978.231484,IEEE Transactions on Software Engineering,"Sorting,Timing,Concurrent computing,Algorithm design and analysis,Computational complexity,Instruction sets,Counting circuits,Pipelines,Computer science,Books","K. E. Batcher, ""Sorting networks and their applications"", 1968 Spring Joint Comput. Conf. AFIPS Conf Proc., vol. 32, pp. 307-314, 1968.||CDC STAR-100 Instruction Execution Times and Control Data STAR-100 Computer System Hardware Reference Manual, Oct. 1973.||R. W. Floyd, ""Algorithm 245"", Commun. Ass. Comput. Mach., vol. 7, pp. 701, Dec. 1964.||W. D. Frazer and A. C. McKellar, ""Samplesort: A sampling approach to minimal storage tree sorting"", J. Ass. Comput. Mach., vol. 17, pp. 496-507, July 1970.||C. A. R. Hoare, ""Quicksort"", Computer J., vol. 5, no. 1, pp. 10-15, 1962.||D. E. Knuth, The Art of ComputerProgramming Vol. 3 Sorting and Searching, MA, Reading:Addison-Wesley, 1973.||J. J. Lambiotte and R. G. Voigt, ""The solution of tridiagonal linear systems on the CDC STAR-100 computer"", Trans. Math. Software, vol. 1, no. 4, pp. 308-329, Dec. 1975.||R. Loeser, ""Some performance tests of 'quicksort' and descedats"", Commun. Ass. Comput. Mach., vol. 17, no. 3, pp. 143-152, Mar. 1974.||R. Sedgewick, Quicksort, 1974.||H. S. Stone, ""Parallel processing with the perfect shuffle"", IEEE Trans. Comput., vol. C-20, no. 2, pp. 153-161, Feb. 1971.||M. H. van Emden, ""Increasing the efficiency of Quicksort"", Commun. Ass. Comput. Mach., vol. 13, no. 9, pp. 563-567, Sept. 1970.||",Sorting on STAR
"T.W. Mao&&Department of Computer Science, University of Technology, Austin, TX, USA|R.T. Yeh&&Department of Computer Sciences, University of Maryland, College Park, MD, USA|","A new language concept–communication port (CP), is introduced for programming on distributed processor networks. Such a network can contain an arbitrary number of processors each with its own private storage but with no memory sharing. The processors must communicate via explicit message passing. Communication port is an encapsulation of two language properties: ""communication non-determinism"" and ""communication disconnect time."" It provides a tool for progranmers to write well-structured, modular, and efficient concurrent programs. A number of examples are given in the paper to demonstrate the power of the new concepts.",10.1109/TSE.1980.230470,IEEE Transactions on Software Engineering,"Distributed computing,Computer science,Hardware,Application software,Message passing,Encapsulation,Power generation economics,Attitude control,Computer networks,Microcomputers","J. P. Anderson, ""Program structure for parallel processing"", Commun. Ass. Comput. Mach., pp. 786-788, Dec. 1965.||J. L. Baer, ""A survey of some theoretical aspects of multiprocessing"", Computing Surveys, pp. 31-80, Mar. 1973.||P. Brinch Hansen, ""Concurrent programming concepts"", Computing Surveys, pp. 223-245, Dec. 1973.||P. Brinch Hansen, Operating System Principle, NJ, Englewood Cliff:Prentice‑Hall, 1973.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||P. Brinch Hansen, ""Distributed processes: A concurrent programming concept"", Commun. Ass. Comput. Mach., pp. 934-941, Nov. 1978.||O.-J. Dahl, Structured Programming, New York:Academic, 1972.||J. B. Dennis, ""Programming semantics for multiprogrammed computations"", Commun. Ass. Comput. Mach., pp. 143-155, Mar. 1966.||E. W. Dijkstra, ""Co-operating sequential process"" in Programming Languages, New York:Academic, 1968.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., pp. 453-457, Aug. 1975.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., pp. 549-557, Oct. 1974.||C. A. R. Hoare, ""Communicating sequential processes"", Commun. Ass. Comput. Mach., pp. 666-677, Aug. 1978.||J. Howard, ""Proving monitors"", Commun. Ass. Comput. Mach., pp. 273-279, May 1976.||Pascal User Manual and Report, 1974.||G. Kahn, ""The semantics of a simple language for parallel programming"", Proc. IFIP Congr., pp. 471-475, 1974.||L. Lamport, ""Time clocks and the ordering of events in a distributed system"", Commun. Ass. Comput. Mach., pp. 558-565, July 1978.||B. H. Liskov, A note on CLU, MA, Cambridge:M.I.T., 1974.||T. W. Mao and R. T. Yeh, ""An illustration of systematic design of parallel programs for real-time applications"", Proc. COMPSAC, pp. 392-397, 1979.||T. W. Mao, Implementing communication schemes for software components on diffferent hardware configurations.||A. P. Ravn, Device monitors, July 1978.||H. A. Schutz, ""On the design of a language for programming real-time concurrent processes"", IEEE Trans. Software Eng., vol. SE-5, pp. 248-255, May 1979.||H. S. Stone, ""Multiprocessor scheduling with the aid of network flow algorithm"", IEEE Trans. Software Eng., vol. SE-3, pp. 85-94, Jan. 1977.||N. Wirth, ""Modula: A language for modular multiprogramming"", Software-Practice and Experience, vol. 7, pp. 3-35, 1977.||",Communication Port: A Language Concept for Concurrent Programming
"A.W. Biermann&&Department of Computer Science, Computation Center, Duke University, Durham, NC, USA|R. Krishnaswamy&&Department of Computer Science, Ohio State Uinversity, Columbus, OH, USA|","An autoprogrammer is an interactive computer programming system which automatically constructs computer programs from example computations executed by the user. The example calculations are done in a scratch pad fashion at a computer display using a light pen or other graphic input device, and the system stores a detailed history of all of the steps executed in the process. Then the system automatically synthesizes the shortest possible program which is capable of executing the observed examples. The paper describes the computational environment provided by the system, proves that the program synthesis technique is both ""sound"" and ""complete,"" describes the design of the system, and gives some programs it was used to create.",10.1109/TSE.1976.233812,IEEE Transactions on Software Engineering,"Computer graphics,Data structures,Computer science,Programming,Computer displays,History,Concrete,Data visualization,Eyes,Synthesizers","S. Amarel, ""Representations and modelling in problems of program formation"" in Machine Intelligence, New York:American Elsevier, vol. 6, pp. 441-466, 1971.||R. Balzer, ""A global view of automatic programming"", Proc. 3rd Int. Joint Conf. Artificial Intelligence, pp. 494-499, 1973-Aug.-20-24.||A. W. Biermann and Rubinoff, ""Approaches to automatic programming"" in Advances in Computers, New York:Academic, vol. 15, 1976.||A. W. Biermann, R. I. Baum and F. E. Petry, ""Speeding up the synthesis of programs from traces"", IEEE Trans. Comput., vol. C-24, pp. 122-136, Feb. 1975.||A. W. Biermann, R. I. Baum, R. Krishnaswamy and F. E. Petry, ""Autoprogrammer"", ten minute silent movie, Feb. 1974.||L. Blum and M. Blum, ""Inductive inference: a recursion theoretic approach"", Recursion Function Theory Newsletter, no. 6, pp. 15-29, July 1973.||J. A. Feldman, ""Some decidability results on grammatical inference and complexity"", Inform. Contr., vol. 20, pp. 244-262, Apr. 1972.||C. C. Green, R. J. Waldinger, D. R. Barstow, R. Elschlager, D. B. Lenat, B. P. McCune, et al., Progress report on program understanding systems, CA, Stanford:Stanford Artificial Intelligence Lab., Aug. 1974.||M. Gold, ""Language identification in the limit"", Inform. Contr., vol. 10, pp. 447-474, 1967.||C. A. R. Hoare, ""Quicksort"", Computer J., vol. 5, 1962.||R. C. T. Lee, C. L. Chang and R. J. Waldinger, ""An improved program synthesizing algorithm and its correctness"", Commun. Ass. Comput. Mach., vol. 17, pp. 211-217, Apr. 1974.||Z. Manna and R. J. Waldinger, ""Toward automatic program synthesis"", Commun. Ass. Comput. Mach., vol. 14, pp. 151-164, Mar. 1971.||R. J. Waldinger and R. C. T. Lee, ""PROW: A step toward automatic program writing"", Proc. Int. Joint Conf. Artificial Intelligence, pp. 241-252, 1969-May-7-9.||",Constructing Programs from Example Computations
"R.M. Haralick&&Remote Sensing Laboratory, University of Kansas, Lawrence, KS, USA|","During the past decade a number of multiimage picture processing software packages have been put together. However, only a few of the references to picture processing systems discuss image data structure or input/output routines. This correspondence is a first step in a direction toward getting a communication process started by suggesting some specifications for a multiimage data format and standard input/output interface routines to access the image data.",10.1109/TSE.1977.231124,IEEE Transactions on Software Engineering,"Access protocols,Image processing,Image segmentation,Data structures,Spatial resolution,Software packages,Communication standards,Laboratories,Image resolution,Electromagnetic launching","H. Frieden, Image Processing System VICAR Guide to System Use, CA, Pasadena:Jet Propulsion Lab., July 1971.||S. T. Alexander, LADIES Software Description, Univ. California, Los Alamos Scientific Lab.||R. M. Haralick, G. J. Minden, D. R. Johnson, A. Singh, W. F. Bryant and C. A. Paul, ""KANDIDATS Image Processing System"", Proc. 3rd Symp. Machine Process. of Remotely Sensed Data, pp. 1a8-1a17, 1976-June.||J. Adams and G. Peterson.||R. C. Rathja and J. H. Herzog, PIXSYS A Users Manual.||Advanced Multispectral Image Descriptor System Report (AMIDS), Jan. 1975.||F. J. Kriegler, MIDAS Prototype Multivariate Interactive Digital Analysis System–Phase I, Environmental Res. Inst. Michigan, Aug. 1974.||G. Swanland, Experimental Image Exploritation System, Control Data Corp.||Interactive Picture Analysis and Display Laboratory Brochure, CA, Palo Alto:Aeronutronic Ford, Feb. 1976.||Interactive Multispectral Image Analysis System Brochure (Image 100), General Electric Co., Sept. 1973.||J. W. Snively and E. B. Butt, The Pax II Picture Processing System, May 1968.||J. F. O'Callaghan, DISIMP: Device Independent Software for Image Processing, Dec. 1975.||R. M. Hoffer, ADP of Multispectral Scanner Data for Land Use Mapping, IN, Lafayette:Lab. for Applications of Remote Sensing, Purdue Univ., 1973.||L. A. Gambino and M. A. Crombie, ""Digital mapping and digital image processing"", Photogrammetric Eng., vol. XL, pp. 1295-1302, Nov. 1974.||J. D. Turinetti and R. J. Hoffman, ""Pattern analysis equipment and techniques"", Photogrammetric Eng., vol. XL, pp. 1323-1330, Nov. 1974.||D. L. Milgram and K. C. Hayes, Image Processing Software Design and Issues, College Park:Computer Science Cen., Univ. Maryland, 1976.||",Image Access Protocol for Image Processing Software
"F. Terry Baker&&IBM Federal Systems, Gaithersburg, MD, USA|","Discusses how structured programming methodology has been introduced into a large production programming organization using an integrated but flexible approach. It next analyzes the advantages and disadvantages of each component of the methodology and presents some quantitative results on its use. It concludes with recommendations based on this generally successful experience, which could be useful to other organizations interested in improving reliability and productivity.",10.1109/TSE.1975.6312844,IEEE Transactions on Software Engineering,"Programming,DSL,Libraries,Organizations,Encoding,Standards,Guidelines",,Structured programming in a production programming environment
"M.H. Van Emden&&Department of Computer Science, University of Waterloo, Waterloo, ONT, Canada|","This paper contains an exposition of the method of programming with verification conditions. Although this method has much in common with the one discussed by Dijkstra in A Disciplne of Programming, it is shown to have the advantage in simplicity and flexibility. The simplicity is the result of the method's being directly based on Floyd's inductive assertions The method is flexible becasue of the way in which the program is constructed in two stages. In the first stage, a set of verification conditions is collected which corresponds to a program in ""flowgraph"" form. In this stage sequencing control is of no concern to the progmmer. Control is introduced in the second stage, which consists of automatable applications of translation and optimization rules, resulting in conventional code. Although our method has no use for the sequencing primitives of ""structured programming,"" it is highly secure and systematic.",10.1109/TSE.1979.234171,IEEE Transactions on Software Engineering,"Automatic control,Virtual machining,Programming profession,Software engineering,Terrorism,Councils,Computer science,Process design,Terminology","E. W. Dijkstra, ""Concern for correctness as a guiding principle for program composition"" in The Fourth Generation, England, Maidenhead:Infotech, 1971.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, 1972.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice‑Hall, 1976.||M. H. van Emden, Unstructured systematic programming, 1976.||M. H. van Emden, ""Verification conditions as programs"" in Automata Languages and Programming, Scotland, Edinburgh:Edinburgh Univ. Press, 1976.||M. H. van Emden, ""Relational equations grammars and programs"", Conf. on Theoretical Comput. Sci., 1977.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. Appl. Math., vol. XIX, 1967.||E. C. R. Hehner, do considered od: A contribution to the programming calculus, 1976.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-581, 1969.||B. W. Kernighan and P. J. Plauger, The Elements of Programming Style, New York:McGraw-Hill, 1974.||R. A. Kowalski, Algorithm = Logic + Control, England, London:Dep. Computation and Control, Imperial College, 1977.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||J. C. Reynolds, ""Programming with transition diagrams"" in Programming Methodology, Berlin:Springer, 1978.||R. Waldinger, ""Achieving several goals simultaneously"" in Machine Intelligence, New York:Wiley, vol. 8, 1977.||",Programming with Verification Conditions
"J.P. Kearns&&Department of Computer Science, University of Pittsburgh, Pittsburgh, PA, USA|S. DeFazio&&Department of Computer Science, University of Pittsburgh, Pittsburgh, PA, USA|","Localized information referencing is a long-known and much-exploited facet of program behavior. The existence of such behavior in the data accessing patterns produced by database management systems is not currently supported by empirical results. We present experimental results which demonstrate that in certain environments and under certain important applications, locality of reference is an undeniable characteristic of the information accessing behavior of a hierarchical database management system. Furthermore, database locality of reference is in a sense more regular, predictable, and hence, more exploitable than the localized reference activity found in programs in general. The implications of these results for the performance enhancement and workload characterization of database management systems are discussed.",10.1109/TSE.1983.236457,IEEE Transactions on Software Engineering,"Database systems,Memory management,Computer science,Vehicles,Cache memory,Intelligent networks","A. P. Batson and A. W. Madison, ""Measurements of major locality phases in symbolic reference strings"", Proc. Int. Symp. Comput. Performance Modeling Measurement and Evaluation, pp. 75-84, 1976.||A. P. Batson, D. W. E. Blatt and J. P. Kearns, ""Structure within locality intervals"", Proc. Symp. Modeling and Performance Evaluation of Comput. Syst., pp. 221-232, 1977.||L. A. Belady, ""A study of replacement algorithms for a virtual storage computer"", IBM Syst. J., vol. 5, no. 2, pp. 78-101, 1966.||S. DeFazio, Locality of reference in database systems, 1980.||P. J. Denning, ""The working set model for program behavior"", Commun. Ass. Comput. Mach., vol. 11, no. 5, pp. 323-333, 1968.||P. J. Denning, ""Virtual memory"", Comput. Surveys, vol. 2, no. 3, pp. 153-189, 1970.||P. J. Denning, ""On modeling program behavior"", 1972 AFIPS Conf. Proc. Spring Joint Comput. Conf., vol. 40, pp. 937-945, 1972.||P. J. Denning and K. C. Kahn, ""A study of program locality and lifetime functions"", Proc. 5th ACM Symp. Oper. Syst. Principles, pp. 207-216, 1975.||P. J. Denning, ""Working sets past and present"", IEEE Trans. Software Eng., vol. SE-6, no. 1, pp. 64-84, 1980.||M. C. Easton, ""Model for interactive database reference string"", IBM J. Res. Develop., vol. 19, pp. 550-555, 1975.||M. C. Easton, Model for database reference strings based on behavior of reference clusters, 1977.||M. C. Easton, ""Model for database reference strings based on behavior of reference clusters"", IBM J. Res. Develop., vol. 22, pp. 197-202, 1978.||A. W. Madison and A. P. Batson, ""Characteristics of program localities"", Commun. Ass. Comput. Mach., vol. 19, no. 5, pp. 285-294, 1976.||N. Ragaz and J. Rodriguez-Rosell, Empirical studies of storage management in a database system, 1976.||J. Rodriguez-Rosell and D. Hildebrand, A framework for evaluation of database systems, 1975.||J. Rodriguez-Rosell, ""Empirical data reference behavior in database systems"", IEEE Computer, vol. 9, no. 11, pp. 3-13, 1976.||A. J. Smith, Sequentiality and prefetching in database systems, 1976.||W. G. Tuel and J. Rodriguez-Rosell, A methodology for evaluation of database systems, 1975.||",Locality of Reference in Hierarchical Database Systems
"R.A. Ellis&&Computer Systems Laboratory, Washington University, Saint Louis, MO, USA|","A technique is described which uses a general-purpose macroprocessor to interactively generate command streams for an operating system. This technique, although not without disadvantages, permits the easy implementation of new and useful high-evel operating system commands.",10.1109/TSE.1978.231485,IEEE Transactions on Software Engineering,"Operating systems,Microcomputers,Instruments,Control systems,Printers,Interactive systems,Application software,Computer applications,Laboratories","W. M. Waite, ""The mobile programming system: STAGE 2"", Commun. Ass. Comput. Mach., vol. 13, pp. 415, July 1970.||||",On the Interactive Use of a Macroprocessor to Generate Operating System Batch Streams
"Shi-Kuo Chang&&Knowledge Systems Laboratory, University of Illinois, Chicago, IL, USA|Wu-Haung Cheng&&Knowledge Systems Laboratory, University of Illinois, Chicago, IL, USA|","We present a methodology for structured database decomposition based on the relational data model. It is argued that in the distributed database environment, structured database decomposition is attractive both for efficiency and for database security considerations. Techniques for parallel processing and hashed access of structurally decomposed database are presented. Techniques for structured database decomposition to support multiple user views are also described. Structured database decomposition is most advantageous in a query only database environment with stable user views, although dynamic updates can also be handled using techniques described in this paper.",10.1109/TSE.1980.230471,IEEE Transactions on Software Engineering,"Relational databases,Distributed databases,Spatial databases,Transaction databases,Database systems,Parallel processing,Stacking,Rain,Knowledge based systems,Laboratories","M. Adida, J. Y. Caleca and C. Euzet, ""A distributed data base system using logical relational machines"", Proc. 4th Int. Conf. on VLDB, pp. 450-461, 1978-Sept.||S. Y. Bang and R. T. Yeh, ""Notes on relational data structures"" in Current Trends in Programming Methodology: Vol. IV–Data Structuring, NJ, Englewood Cliffs:Prentice‑Hall, pp. 241-262, 1978.||C. Beeri, P. A. Bernstein and N. Goodman, ""A sophisticate's introduction to database normalization theory"", Proc. 4th Int. Conf. on VLDB, pp. 113-124, 1978-Sept.||P. A. Bernstein and D.-M. W. Chiu, Using semi-joins to solve relational queries, 1979.||R. G. Casey, ""Allocation of copies of a file in an information network"", 1972 Proc. Spring Joint Comput. Conf. AFIPS Conf. Proc., vol. 36, pp. 617-625, 1972.||S.-K. Chang, ""Data base decomposition in a hierarchical computer system"", Proc. 1975 SIGMOD Workshop Manag. Data: Description Access and Control, pp. 48-53, 1975-May-14-16.||S.-K. Chang, Implementation of a relational data base system with structured decomposition of relations, July 1975.||S.-K. Chang, ""A model for distributed computer system design"", IEEE Trans. Syst. Man Cybern., vol. SMC-6, pp. 344-359, May 1976.||S.-K. Chang, ""Design considerations of a data base system in a clinical network environment"", Proc. Nat. Comput. Conf., pp. 277-286, 1976-June-6-10.||S.-K. Chang, ""Intelligent coupling of the user to medical information systems"", Proc. 3rd Illinois Conf. Med. Inform. Syst., pp. 29-46, 1976-Nov.-4-5.||S.-K. Chang and J. S. Ke, ""An approach to data validation and query translation in the medical information system environment"", Proc. IEEE 1977 Comput. Software and Appl. Conf., pp. 197-202, 1977-Nov.-8-11.||S.-K. Chang and W.-H. Cheng, ""Data base skeleton and its application to logical data base synthesis"", IEEE Trans. Software Eng., vol. SE-4, pp. 18-30, Jan. 1978.||S.-K. Chang and J. S. Ke, ""Data base skeleton and its application to fuzzy query translation"", IEEE Trans. Software Eng., vol. SE-4, pp. 31-44, Jan. 1978.||S.-K. Chang and C. N. Liu, ""Design and modeling of distributed information systems"", Advances in Information Systems Sciences, vol. 7, pp. 157-231, 1978.||S.-K. Chang and J. C. Dorng, Clustering techniques for data base decomposition, Apr. 1979.||W.-H. Cheng, Optimization techniques in designing relational data base systems, Mar. 1978.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass. Comput. Mach., vol. 13, pp. 377-387, June 1970.||E. F. Codd, ""Further normalization of the data base relational model"", Courant Computer Science Symp. No. 6 Data Base System (New York), pp. 33-64, 1971-May.||E. F. Codd, ""Relational completeness of data base sublanguages"", Courant Computer Science Symp. No. 6 Data Base System (New York), pp. 65-98, 1971-May.||E. F. Codd, ""A data base sublanguage founded on the relational calculus"", Proc. ACM-SIGFIDET Workshop on Data Access and Control (San Diego CA), pp. 35-68, 1971.||H. M. Dreizen, Interprocess communication for the UNIX operating system–The UWEB network, May 1978.||M. J. Eisner and D. G. Severance, ""Mathematical techniques for efficient record segmentation in large shared data bases"", J. Ass. Comput. Mach., vol. 23, pp. 619-635, Oct. 1976.||R. Fagin, Extendible hashing–A fast access method for dynamic files, July 1978.||S. P. Ghosh, ""Distributing a data base with logical associations on a computer network for parallel searching"", IEEE Trans. Software Eng., vol. SE-2, pp. 106-113, Jan. 1976.||J. A. Hoffer, A clustering approach to the generation of sub‑files for the design of a computer data base, 1975.||D. E. Knuth, The Art of Computer Programming: Sorting and Searching, MA, Reading:Addison-Wesley, vol. 3, 1973.||R. A. Larson, ""Dynamic hashing"", BIT, vol. 18, pp. 184-201, 1978.||D. Ries and R. Epstein, Specification of the distribution criteria for a distributed data base system, CA, Berkeley:ERL, Univ. of California.||J. B. Rothnie and N. Goodman, ""An overview of the preliminary design of SDD-1: A system for distributed data bases"", Proc. 2nd Berkeley Workshop on Distributed Data Bases and Computer Networks, 1977-May.||J. B. Rothnie and N. Goodman, ""A survey of research and development in distributed data base management"", Proc. VLDB Conf., 1977-Oct.||M. Schkolnick, ""A clustering algorithm for hierarchical structures"", ACM Trans. Database Syst., vol. 2, pp. 27-44, Mar. 1977.||M. Schkolnick, ""Physical data base design techniques"", Proc. NYU Symp. Data Base Design, pp. 99-109, 1978-May-18-19.||J. M. Smith and D. C. P. Smith, ""Database abstractions: Aggregation and generalization"", ACM Trans. Database Syst., vol. 2, pp. 105-133, June 1977.||M. Stonebraker, ""Concurrency control and consistency of multiple copies of data in distributed INGRES"", Proc. 3rd Berkeley Workshop on Distributed Data Management and Computer Networks, 1978-Aug.||C. C. Yang and S.-K. Chang, ""Encoding techniques for efficient similarity retrieval from pictorial data base"", Proc. IEEE Conf. Pattern Recognition and Image Processing, pp. 422-426, 1978-June-2.||C. T. Yu, K. Lam and M. Z. Ozsogoshu, Distributed query optimization for tree queries, Oct. 1979.||",A Methodology for Structured Database Decomposition
"A. Ralston&&Department of Computer Science, State University of New York, University at Buffalo, Buffalo, NY, USA|J.L. Wagener&&Department of Computer Science, State University of New York, Brockport, Brockport, NY, USA|","Fortran is 21 years old; many would say that it has not reached adulthood but senility. Yet it remains the language of use in the overwhelming majority of scientific applications of computers and no end to this situation is in sight. Moreover, its evolution through the standards process is very slow, too slow to give any hope that Fortran will ever in this way become a language in which structured programs can be easily and effectively written.",10.1109/TSE.1976.233813,IEEE Transactions on Software Engineering,"Natural languages,Computer languages,Surgery,Computer science,Application software,Computer applications,Vehicles,Genetic programming,Data structures,Standards publication","American Standard Fortran American Standards Association, NY:American National Standards Institute, 1966.||FLECS User's Manual (Rev.).||S. Charmonman and A. Ralston, ""Structured Fortran and the first course in computer science"", Proc. 2nd World Conf. Computers in Education, 1975.||S. Charmonman and J. L. Wagener, ""On structured programming in Fortran"", SIGNUM Newsletter, vol. 10, pp. 21-23, Jan. 1975.||A. J. Cook, ""Mortran 2"", Abstracts of the Workshop on Fortran Preprocessors for Numerical Software, 1974.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, 1972.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, 1975.||Fortran: Working Document of Committee X3J3 of the American National Standards Institute, NY, October 1974.||A. N. Habermann, ""Critical comments on the programming language Pascal"", Acta Informatica, vol. 3, pp. 47-57, 1973.||C. A. R. Hoare, ""Notes on data structuring"" in Structured Programming, New York:Academic, 1972.||E. Horowitz, ""Fortran-Can It Be Structured and Should It Be?"" in Development of Software Systems, MA, Reading:Addison‑Wesley, 1975.||T. E. Hull, ""Would you believe structured Fortran?"", SIGNUM Newsletter, vol. 8, pp. 13-16, Oct. 1973.||Jet Propulsion Laboratory Abstracts of the Workshop on Fortran Preprocessors for Numerical Software, 1974.||D. E. Knuth, ""Structured programming with GO TO statements"", Computing Surveys, vol. 6, pp. 261-301, 1974.||D. E. Knuth and C. T. Zahn, ""Ill-chosen use of 'event"", Commun. Ass. Comput. Mach., vol. 18, pp. 360, 1975.||O. Lecarme, ""Structured programming programming teaching and the language Pascal"", SIGCSE Bulletin, vol. 6, pp. 9-15, June 1974.||O. Lecarme, ""Reply to a paper by A. N. Habermann on the programming language Pascal"", SIGPLAN Notices, vol. 9, pp. 21-27, Oct. 1974.||A. Ralston, ""The future of higher level languages (for teaching)"", Proc. Int. Computing Symposium, 1973.||L. Shustek and C. T. Zahn, ""Records and references in Mortran 2"", Abstracts of the Workshop on Fortran Preprocessors for Numerical Software, 1974.||N. Wirth, ""The programming language Pascal"", Acta Informatica, vol. 1, pp. 35-63, 1971.||N. Wirth, Systematic Programming: An Introduction, NJ, Englewood Cliffs:Prentice-Hall, 1973.||N. Wirth, ""On the design of programming languages"", Proc. IFIP Congress 1974, pp. 386-393, 1974.||N. Wirth, ""On the composition of well-structured programs"", Computing Surveys, vol. 6, pp. 247-259, 1974.||",Structured Fortran—An Evolution of Standard Fortran
"B. Wegbreit&&Xerox Palo Alto Research Center, Palo Alto, CA, USA|","Most current approaches to mechanical program verification transform a program and its specifications into first-order formulas and try to prove these formulas valid. Since the first-order predicate calculus is not decidable, such approaches are inherently limited. This paper proposes an alternative approach to program verification: correctness proofs are constructively established by proof justifications written in an algorithmic notation. These proof justifications are written as part of the program, along with the executable code and correctness specifications. A notation is presented in which code, specifications, and justifications are interwoven. For example, if a program contains a specification 3x P(x), the program also contains a justification that exhibits the particulat value of x that makes P true. Analogously, justifications may be used to state how universally quantified formulas are to be instantiated when they are used as hypotheses. Programs so justifiled may be verified by proving quantifier-free formulas. Additional classes of justifications serve related ends. Formally, justifications reduce correctness to a decidable theory. Informally, justifications establish the connection between the executable code and correctness specifications, documenting the reasoning on which the correctness is based.",10.1109/TSE.1977.231129,IEEE Transactions on Software Engineering,"Calculus,Logic programming,Computer languages,Programming profession,Logic design,Specification languages,Writing,Testing","L. P. Deutsch, An interactive program verifier, 1973.||R. W. Floyd, ""Assigning meanings to programs"", Mathematical Aspects of Computer Science, pp. 19-32.||D. I. Good, R. L. London and W. W. Bledsoe, ""An interactive program verification system"", IEEE Trans. Software Eng., vol. SE-1, pp. 59-67, Mar. 1975.||C. A. R. Hoare, ""Procedures and parameters: An axiomatic approach"", Symp. Semantics of Algorithmic Languages, pp. 102-116, 1970.||Pascal User Manual and Report, 1975.||J. C. King, A program verifier, 1969.||D. E. Knuth, J. H. Morris and V. R. Pratt, Fast pattern matching in strings, Aug. 1914.||Z. Manna, ""The correctness of programs"", J. Comput. Syst. Sci., vol. 3, pp. 119-127, 1969.||J. H. Morris and B. Wegbreit, ""Subgoal induction"", Commun. Ass. Comput. Mach., vol. 20, no. 3, Mar. 1977.||J. R. Shoenfield, Mathematical Logic, CA, Menlo Park:Addison‑Wesley, 1967.||N. Suzuki, ""Verifying programs by algebraic and logical reduction"", Proc. Int. Conf Reliable Software, pp. 473-481, 1975-Apr.||Interlisp Reference Manual, 1975.||R. W. Topor, Interactive program verification using virtual Programs, 1975.||B. Wegbreit, ""The synthesis of loop predicates"", Commun. Ass. Comput. Mach., vol. 17, pp. 102-112, Feb. 1974.||S. Igarashi, R. London and D. Luckham, Automatic program verification I, CA, Stanford:Stanford University, May 1973.||E. Marmier, ""A program verifier for Pascal"", 1974 Proc. IFIP Congr., pp. 177-181.||F. W. von Henke and D. C. Luckham, ""A methodology for verifying programs"", Proc. Int. Conf. Reliable Software, pp. 156-164, 1975-Apr.||",Constructive Methods in Program Verification
"William C. Lynch&&Department of Computing and Information Sciences, Case Western Reserve University, Cleveland, OH, USA|John W. Langner&&Hitachi Corporation Limited, Cleveland, OH, USA|Marvin S. Schwartz&&Hitachi Corporation Limited, Cleveland, OH, USA|","The Chi/OS operating system, the latest large-scale software effort of Chi Corporation, has had an excellent reliability record since its installation in November 1973. Although the system design is vital to the reliability of Chi/OS, several environmental factors are equally vital. After a brief presentation of the substantial work load supported by Chi/OS, this paper deals with those environmental factors which contribute to the reliability of the software.",10.1109/TSE.1975.6312845,IEEE Transactions on Software Engineering,"Operating systems,Registers,Software reliability,Educational institutions,Computers",,Reliability experience with Chi/OS
"W.C. Lin&&Institute of Applied Mathematics, National Tsing Hua University, Hsinchu, Taiwan|R.C.T. Lee&&Institute of Computer and Decision Sciences, National Tsing Hua University, Hsinchu, Taiwan|H.C. Du&&Department of Computer Science, University of Washington, Seattle, WA, USA|","This paper results from an attempt to unify several different file system design theories. We define a term ""partial match pattern"" and show that in order to produce file systems optimal with respect to partial match patterns, both the multikey hashing (MKH) method [16] and the multidimensional directory (MDD) method [11] must be in such a form that the number of subdivisions is the same for all domains of keys. We show the conditions for the string homomorphism hashing (SHH) method [15], the MKH method, and the MDD method to be equivalent to one another. We define the so-called Cartesian product files and show that if all records are present, the records in a Cartesian product file form a shortest spanning path in which the Hamming distance between every pair of consecutive records is 1. Thus the SHH method, the MKH method, the MDD method, and the multikey sorting (MKS) method [10] are linked together. Finally, we show that for both partial and best match queries, the file systems exhibit a common characteristic: similar records are grouped together.",10.1109/TSE.1979.234172,IEEE Transactions on Software Engineering,"File systems,Pattern matching,Multidimensional systems,Sorting,Error correction codes,Mathematics,Hamming distance,Councils,Computer science","J. L. Bentley, ""Multidimensional binary search threes used for associative searching"", Commun. Ass. Comput. Mach., vol. 18, pp. 509-516, Sept. 1975.||W. A. Burkhard and R. M. Keller, ""Some approaches to best‑match file searching"", Commun. Ass. Comput. Mach., vol. 16, pp. 230-236, Apr. 1973.||R. Duda and P. Hart, Pattern Recognition and Scene Analysis, New York:Wiley, 1973.||J. H. Friedman, F. Baskett and L. J. Shustek, ""An algorithm for finding nearest neighbors"", IEEE Trans. Comput., vol. C-24, pp. 1000-1006, Oct. 1975.||J. H. Friedman, J. L. Bentley and R. A. Finkel, ""An algorithm for finding best matches in logarithmic expected time"", ACM Trans. Mathematical Software, vol. 3, pp. 209-226, Sept. 1977.||K. Fukunaga, Introduction to Statistical Pattern Recognition, New York:Academic, 1972.||K. Fukunaga and P. M. Narendra, ""A branch and bound algorithm for computing k-nearest neighbors"", IEEE Trans. Comput., vol. C-24, pp. 750-753, July 1975.||C. T. Hsieh and R. C. T. Lee, ""Application of symbolic error correcting code for nearest neighbor searching"", 1976 Proc. Nat. Comput. Symp. Republic of China, pp. 6.7-6.14.||R. C. T. Lee, Y. H. Chin and S. C. Chang, ""Application of principal component analysis to multi-key searching"", IEEE Trans. Software Eng., vol. SE-2, pp. 185-193, Sept. 1976.||R. C. T. Lee and S. H. Tseng, ""Multi-key sorting"", 1977 Proc. Int. Comput. Symp., vol. 2, pp. 737-753.||J. H. Liou and S. B. Yao, ""Multi-dimensional clustering for data base organizations"", Inf. Syst., vol. 2, pp. 187-198, 1977.||W. S. Meisel, Computer-Oriented Approaches to Pattern Recognition, New York:Academic, 1972.||N. J. Nilsson, Learning Machines, New York:McGraw-Hill, 1965.||R. L. Rivest, Analysis of associative retrieval algorithms, 1974.||R. L. Rivest, ""Partial-match retrieval algorithms"", SIAM J. Comput., vol. l5, pp. 19-50, Mar. 1976.||J. B. Rothnie and T. Lozano, ""Attribute based file organization in a paged memory environment"", Commun. Ass. Comput. Mach., vol. 17, pp. 63-69, Feb. 1974.||J. R. Slagle, C. L. Chang and S. Heller, ""A clustering and data‑reorganization algorithm"", IEEE Trans. Syst. Man and Cybernetics, pp. 121-128, Jan. 1975.||J. R. Slagle, C. L. Chang and R. C. T. Lee, ""Experiments with some clustering analysis algorithm"", Pattern Recognition, vol. 6, pp. 181-187, 1974.||J. Martin, Computer Data-Base Organization, NJ, Englewood Cliffs:Prentice-Hall, 1975.||",Common Properties of Some Multiattribute File Systems
"M.Y.L. Ip&&Datatron Processing & Systems Ltd.|L.V. Saxton&&Department of Computer Science, University of Regina, Regina, SAS, Canada|V.V. Raghavan&&Department of Computer Science, University of Regina, Regina, SAS, Canada|","A problem of considerable interest in the design of a database is the selection of indexes. In this paper, we present a probabilistic model of transactions (queries, updates, insertions, and deletions) to a file. An evaluation function, which is based on the cost saving (in terms of the number of page accesses) attributable to the use of an index set, is then developed. The maximization of this function would yield an optimal set of indexes. Unfortunately, algorithms known to solve this maximization problem require an order of time exponential in the total number of attributes in the file. Consequently, we develop the theoretical basis which leads to an algorithm that obtains a near optimal solution to the index selection problem in polynomial time. The theoretical result consists of showing that the index selection problem can be solved by solving a properly chosen instance of the knapsack problem. A theoretical bound for the amount by which the solution obtained by this algorithm deviates from the true optimum is provided. This result is then interpreted in the light of evidence gathered through experiments.",10.1109/TSE.1983.236458,IEEE Transactions on Software Engineering,"Indexes,Transaction databases,Computer science,Cost function,Polynomials,Degradation,Database systems,Councils,Context modeling,Software algorithms","R. Bayer and E. McCreight, ""Organization and maintenance of large ordered indices"", Acta Informatica, vol. 1, pp. 173-189, 1972.||D. Comer, ""The difficulty of optimum index selection"", ACM TODS, vol. 3, pp. 440-445, Dec. 1978.||M. Hammer and A. Chan, ""Index selection in a self-adaptive database management system"", Proc. 1976 ACM-SIGMOD Conf..||M. Y. L. Ip, An approximation algorithm for the index selection problem, 1981.||W. F. King, On the selection of indices for a file, 1974.||K. Lam and C. T. Yu, ""An approximation algorithm for a file‑allocation problem in a hierarchical distributed system"", Proc. ACM-SIGMOD 1980 Int. Conf. Management of Data, pp. 125-132.||V. Lum and H. Ling, ""An optimum problem on the selection of secondary keys"", Proc. ACM 1971 Annu. Conf., pp. 349-356.||F. P. Palermo, A quantitative approach to the selection of secondary indices, 1970.||E. Horowitz and S. Sahni, Fundamentals of Computer Algorithms (Comput. Software Eng. Series), Comput. Sci. Press, 1978.||M. Schkolnick, ""The optimal selection of secondary indices for files"", Inform. Syst., vol. 1, pp. 141-146, 1975.||M. Stonebraker, ""The choice of partial inversions and combined indices"", Int. J. Comput. Inform. Sci., vol. 3, pp. 167-188, 1974.||",On the Selection of an Optimal Set of Indexes
"P.A. Bernstein&&Department of Computer Science, Harvard University, Cambridge, MA, USA|J.B. Rothnie&&Computer Corporation of America, Cambridge, MA, USA|N. Goodman&&Computer Corporation of America, Cambridge, MA, USA|C.A. Papadimitriou&&Department of Computer Science, Harvard University, Cambridge, MA, USA|","SDD-1, A System for Distributed Databases, is a distributed database system being developed by Computer Corporation of America (CCA), Cambridge, MA. SDD-1 permits data to be stored redundantly at several database sites in order to enhance the reliability and responsiveness of the system and to facilitate upward scaling of system capacity. This paper describes the method used by SDD-1 for updating data that are stored redundantly.",10.1109/TSE.1978.231494,IEEE Transactions on Software Engineering,"Concurrency control,Distributed databases,Computer aided software engineering,Transaction databases,Database systems,Delay,Distributed computing,Computer science,Costs,Cities and towns","P. A. Alsberg and J. D. Day, A principle for resilient sharing of distributed resources, 1976.||Proc. 2nd Int. Conf. Software Eng..||P. A. Bernstein and D. W. Shipman, ""A formal model of concurrency control mechanisms for database systems"", 1978 Berkeley Workshop on Distributed Data Management and Computer Networks, 1978-Aug.||P. A. Bernstein, N. Goodman, J. B. Rothnie and C. A. Papadimitriou, ""Analysis of serializability in SDD-1: A system for distributed databases (the fully redundant case)"", Proc. 1st Int. Conf. Computer Software and Applications (COMPSAC '77), 1977-Nov.||||P. A. Bernstein, D. W. Shipman, J. B. Rothnie and N. Goodman, The SDD-1 redundant update algorithm (the general case), Dec. 1977.||D. D. Chamberlin, R. F. Boyce and I. L. Traiger, ""A deadlock‑free scheme for resource locking in a database environment"", 1974 IFIPS Conf. Proc., 1974.||D. D. Chamberlin, J. N. Gray and I. L. Traiger, ""Views authorization and locking in a relational database system"", AFIPS Nat. Comput. Conf. Proc., vol. 44, 1975.||W. W. Chu, ""Optimal file allocation in a computer network"" in Computer Communication Networks, NJ, Englewood Cliffs:Prentice-Hall, 1973.||C. A. Ellis, ""A robust algorithm for updating duplicate databases"", Proc. 1977 Berkeley Workshop on Distributed Data Management and Computer Networks, 1977-May.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, Nov. 1976.||J. N. Gray, R. A. Lorie, G. R. Putzolu and I. L. Traiger, Granularity of locks and degrees of consistency in a shared database, 1975.||I. Greif, Semantics of communicating parallel processes, Sept. 1975.||A. N. Haberman, ""Prevention of system deadlock"", Commun. Ass. Comput. Mach., vol. 12, pp. 373-377, July 1969.||M. M. Hammer and D. J. McLeod, ""Semantic integrity in a relational database system"", Proc. Int. Conf. Very Large Data Bases, 1975-Sept.||C. E. Hewitt, Protection and synchronization in actor systems, Cambridge:Artificial Intelligence Lab., Mass. Inst. Tech., Nov. 1974.||C. Hewitt, P. Bishop and R. Steiger, ""A universal actor formulation for artificial intelligence"", Proc. Int. Joint Conf Artificial Intelligence (IJCAI), 1973-Aug.||R. C. Holt, On deadlocks in computer systems, Apr. 1971.||L. Lamport, Time clocks and ordering of events in a distributed system, Mar. 1976.||Commun. Ass. Comput. Mach..||||K. D. Levin and H. L. Morgan, Dynamic file assignment in computer networks under varying access request patterns, Apr. 1975.||S. Mahmoud and J. S. Riordan, ""Optimal allocation of resources in distributed information networks"", ACM Trans. Database Systems, vol. 1, pp. 66-78, Mar. 1976.||C. A. Papadimitriou, P. A. Bernstein and J. B. Rothnie, ""Some computational problems related to database concurrency control"", Proc. Conf. Theoretical Comput. Sci., 1977-Aug.||D. J. Rosenkrantz, R. E. Stearns and P. M. Lewis, ""A system level concurrency control for distributed database systems"", Proc. 1977 Berkeley Workshop on Distributed Data Management and Computer Networks, 1977-May.||J. B. Rothnie and N. Goodman, A study of updating in a redundant distributed database environment, Feb. 1977.||J. B. Rothnie and N. Goodman, ""An overview of the preliminary design of SDD-1: A System for Distributed Databases"", Proc. 1977 Berkeley Workshop on Distributed Data Management and Computer Networks, 1977-May.||||J. B. Rothnie and N. Goodman, ""A survey of research and development in distributed database systems"", Proc. 3rd Int. Conf. Very Large Data Bases, 1977-Oct.||J. B. Rothnie, N. Goodman and P. A. Bernstein, ""The redundant update algorithm of SDD-1: A System for Distributed Databases (the fully redundant case)"", Proc. 1st Int. Conf. Comput. Software and Applications (COMPSAC '77), 1977-Nov.||||R. E. Stearns, P. M. Lewis and D. J. Rosenkrantz, ""Concurrency controls for database systems"", IEEE Proc. 17th Annu. Symp. Foundations Comput. Sci., pp. 19-32, 1976.||M. Stonebraker and E. Neuhold, ""A distributed database version of INGRES"", Proc. 1977 Berkeley Workshop on Distributed Data Management and Computer Networks, 1977-May.||R. H. Thomas, ""A solution to the concurrency control problem for multiple copy data bases"", Proc. 16th IEEE Comput. Soc. Int. Conf. (COMPCON), 1978.||E. Wong, ""Retrieving dispersed data from SDD-1: A System for Distributed Databases"", Proc. 1977 Berkeley Workshop on Distributed Data Management and Computer Networks, 1977-May.||||",The Concurrency Control Mechanism of SDD-1: A System for Distributed Databases (The Fully Redundant Case)
"Pei Hsia&&Department of Computer Science, University of Alabama, Huntsville, AL, USA|F.E. Petry&&Department of Computer Science, University of Alabama, Huntsville, AL, USA|","Programmers, even in well-organized software environments which utilize some modern software engineering practices, are often lacking of a discipline in their individual programming effort. There has not been an emphasis on discipline in progamming practice, as is traditional in other engineering and scientific fields' instruction. A framework organized to be suitable for early presentation and developing usage is presented and evaluated. It integrates the notions of top-down design, stepwise refinement, structured flowcharting, test case description, and analysis in the context of a framework for systematically developing and concurrently documenting programs. The framework was evaluated in actual usage during introductory programming instruction by comparing it to a typical conventional approach. A comparison of programming effort showed only a 16 percent increase in time required in the disciplined approach, which certainly makes it feasible for introductory instruction. Program quality comparisons were carried out by a comprehensive testing for logic errors in the completed projects. The results were impressively favorable for the disciplined approach.",10.1109/TSE.1980.234479,IEEE Transactions on Software Engineering,"Programming profession,Software engineering,System testing,Software testing,Project management,Production,Documentation,Process planning,Software development management,Functional programming","F. P. Brooks, The Mythical Man-Month, MA, Reading:Addison-Wesley, 1975.||C. H. Reynolds, ""What's wrong with computer programming management?"" in On the Management of Computer Programming, PA, Philadelphia:Auerbach, pp. 35-36, 1971.||M. Alford, P. Hsia and F. Petry, ""Software engineering approach to introductory programming courses"", SIGCSE Bull., vol. 9, pp. 157-162, Feb. 1977.||M. Alford, P. Hsia and F. Petry, ""Use of software engineering methodologies in a computer science curriculum"", Proc. 15th Annu. S. E. Regional ACM Conf., pp. 470-482, 1977-Apr.-18-20.||M. Alford, P. Hsia and F. Petry, Reliable Programming in FORTRAN: An Introductory Text.||F. S. Ingrassia, The unit development folder (UDF): An effective management tool for software development, Oct 1976.||M. Hamilton and S. Zeldin, ""Higher order software–A methodology for defining software"", IEIE Trans. Software Eng., vol. SE-2, pp. 9-32, Mar. 1976.||H. D. Mills, Mathematical foundations for structured programming, Feb. 1972.||O. J. Dahl, E. W. Dijkstra and C. A. Hoare, Structured Programming, New York:Academic, 1972.||F. T. Baker, ""Chief programmer team management of production programming"", IBM Syst. J., vol. 11, no. 1, 1972.||D. H. Sanders, Computers in Society, New York:McGraw‑Hill, 1977.||W. J. Chen, S. Graves, P. Hsia and F. Petry, Use of a programming methodology in introductory courses, Sept. 1978.||International Mathematical & Statistical Library, July 1977.||",A Framework for Discipline in Programming
"L.L. Rose&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|H. Hellerman&&State University of New York, Binghamton, NY, USA|","Many languages, including Fortran, and machines such as most minicomputers have little or no built-in character manipulation capability and yet are often required to process character information. This paper discusses the programming of character processing in such integer environments. Character representation, string-to-word coordinate transformation, packing, and unpacking using several arithmetic schemes are discussed with special attention to program portability. Several Fortran subroutines are presented culminating in BYTRAN, a set of portable Fortran subroutines that simulate the string structures and operators of the PL/I language.",10.1109/TSE.1976.225947,IEEE Transactions on Software Engineering,"Algorithms,Arithmetic,Program processors,Microcomputers,Information science,Computer languages,Data processing,Packaging machines,Assembly systems,High level languages","M. J. Bailey, M. P. Barnett and P. B. Burleson, ""Symbol manipulation in FORTRAN-SASPI subroutines"", CACM, vol. 7, pp. 339-346, June 1964.||R. J. Baron and J. Golini, Strings: Some FORTRAN callable string processing routines, 1972.||D. G. Bobrow and B. Raphael, ""A comparison of list-processing computer language"", CACM, vol. 7, pp. 231-240, Apr. 1964.||H. J. Bowlden, ""A list-type storage technique for alphanumeric information"", CACM, vol. 6, pp. 433-434, Aug. 1963.||D. R. Hanson, ""A simple technique for representing strings in FORTRAN IV"", CACM, vol. 17, pp. 646-647, Nov. 1974.||M. C. Harrison, ""Implementation of the substring test by hashing"", CACM, vol. 14, pp. 777-779, Dec. 1971.||H. Hellerman, Digital Computer Systems Principles, New York:McGraw-Hill, 1973.||J. K. Hughes, PL/I Programming, New York:Wiley, 1973.||S. E. Madnick, ""String Processing Techniques"", CACM, vol. 10, pp. 420-424, July 1967.||C. A. Oster, ""Limited bit manipulation using FORTRAN II"", CACM, vol. 7, pp. 719-721, Dec. 1974.||E. F. Storm, ""CHAMP-Character manipulation procedures"", CACM, vol. 11, pp. 561-566.||American Standard Basic FORTRAN, American Standards Ass., Mar. 1966.||American Standard FORTRAN, American Standards Ass., Mar. 1966.||D. A. Whitten and P. A. D. deMaine, ""A machine and configuration independent Fortran: Portable Fortran (PFortran)"", IEEE Trans. Software Engineering, vol. SE-1, pp. 111-124, Mar. 1975.||",Portable Character Processing in Fortran and Fixed Integer Environments
"A. Silberschatz&&Department of Computer Science, State University of New York, Stony Brook, NY, USA|R.B. Kieburtz&&Department of Computer Science, State University of New York, Stony Brook, NY, USA|A.J. Bernstein&&Department of Computer Science, State University of New York, Stony Brook, NY, USA|","In Concurrent Pascal, the syntactic and semantic definition of the language prevents the inadvertent definition of a program that might violate the integrity of a shared data object. However, the language also does not allow the dynamic allocation of reusable resources among processes, and this restriction seems unnecessarily stingent. This paper proposes the addition to Concurrent Pascal of a new type of program component, to be called a resource manager. By this means, dynamic resource allocation can be accomplished both safely and efficiently. The notion that a process holds access rights to a resource is generalized to the notion that it holds capability rights, but the capability to atually make use of a resource is granted dynamically. The anonymity of dynamically allocatable resources is also guaranteed.",10.1109/TSE.1977.231130,IEEE Transactions on Software Engineering,"Resource management,Monitoring,Programming profession,Protection,Dynamic programming,Computer languages,Permission,Parallel programming,Utility programs,Mechanical factors","B. Liskov and S. Zilles, ""Programming with abstract data types"", Proc. ACM SIGPLAN Conf. on Very High Level Languages SIGPLAN Notices, 1974-Apr.||B. Liskov, A note on CLU, MA, Cambridge:Project MAC, M.I.T., Nov. 1974.||W. A. Wulf, ALPHARD: Towards a language to support structured programs, PA, Pittsburgh:Carnegie Mellon Univ., Computer Science Department, Apr. 1974.||P. Brinch Hansen, Concurrent Pascal A programming language for operating systems design, Apr. 1974.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Engineering, vol. 1, pp. 199-207, June 1975.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Clfffs:Prentice‑Hall, 1973.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., Oct. 1974.||",Extending Concurrent Pascal to Allow Dynamic Resource Management
"Yaohan Chu&&Departments of Computer Science and Electrical Engineering, University of Maryland, College Park, MD, USA|","The paper presents a methodology for software engineering. This methodology recognizes the existence of two separate and distinctive phases (architecture and implementation) of a software engineering task. These two phases are interfaced by a formalized but descriptive design specification described by a language called ADL (architectural design language). This ADL description would serve a similar purpose as that served by the blueprint. Implementation can then be accomplished from the `software blueprint' in any of three possibilities: software, hardware, or microwave. Design of a lexical scanner is chosen as an example to illustrate this methodology.",10.1109/TSE.1975.6312851,IEEE Transactions on Software Engineering,"Data structures,Software engineering,Computer languages,Software design,Syntactics,Buffer storage",,A methodology for software engineering
"A.R. Hevner&&Department of Computer Science, Purdue University, West Lafayette, IN, USA|S.B. Yao&&Department of Computer Science, Purdue University, West Lafayette, IN, USA|","Query processing in a distributed system requires the transmission f data between computers in a network. The arrangement of data transmissions and local data processing is known as a distribution strategy for a query. Two cost measures, response time and total time are used to judge the quality of a distribution strategy. Simple algorithms are presented that derive distribution strategies which have minimal response time and minimal total time, for a special class of queries. These optimal algorithms are used as a basis to develop a general query processing algorithm. Distributed query examples are presented and the complexity of the general algorithm is analyzed. The integration of a query processing subsystem into a distributed database management system is discussed.",10.1109/TSE.1979.234179,IEEE Transactions on Software Engineering,"Query processing,Database systems,Distribution strategy,Delay,Computer networks,Distributed computing,Data communication,Data processing,Costs,Time measurement","E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass. Comput. Mach., vol. 13, pp. 377-387, June 1970.||A distributed database management system for command and control applications: Semiannual technical report 2, Jan. 1978.||R. Epstein, M. Stonebraker and E. Wong, ""Distributed query processing in a relational data base system"", Proc. ACM 1978 SIGMOID Conf., pp. 169-180, 1978-June.||A. R. Hevner and S. B. Yao, Optimization of data access in distributed systems, July 1978.||J. B. Rothnie and N. Goodman, ""An overview of the preliminary design of SDD-1: A system for distributed databases"", Proc. 1977 Berkeley Workshop on Distributed Data Management and Computer Networks, pp. 39-57, 1977-May.||J. B. Rothnie and N. Goodman, ""A survey of research and development in distributed database management"", 1977 Proc. Very Large Data Bases, pp. 48-62, 1977-Oct.||M. Stonebraker and E. Neuhold, ""A distributed database version of INGRES"", Proc. 1977 Berkeley Workshop on Distributed Data Management and Computer Networks, pp. 19-36, 1977-May.||E. Wong, ""Retrieving dispersed data from SDD-1: A system for distributed databases"", Proc. 1977 Berkeley Workshop on Distributed Data Management and ComputerNetworks, pp. 217-235, 1977-May.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notion of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, pp. 624-633, Nov. 1976.||E. Wong and K. Youssefi, ""Decomposition–A strategy for query processing"", ACM Trans. on Database Systems, vol. 1, pp. 223-241, Sept. 1976.||S. B. Yao, ""Optimization of query evaluation algorithms"", ACM Trans. on Database Systems, vol. 4, June 1979.||",Query Processing in Distributed Database System
"Duen-Ping Tsay&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|M.T. Liu&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|","This paper presents the framework and model of a network operating system (NOS) called MIKE for use in distributed systems in general and for use in the Distributed Double-Loop Computer Network (DDLCN) in particular. MIKE, which stands for Multicomputer Integrator KErnel, provides system-transparent operation for users and maintains cooperative autonomy among local hosts.",10.1109/TSE.1983.236459,IEEE Transactions on Software Engineering,"Network operating systems,Computer networks,Protocols,Resource management,Kernel,Protection,Distributed computing,Information science,Read-write memory,Message passing","C. P. Chou, Design of the distributed loop data base system (DLDBS), June 1981.||D. D. Clark and L. Svobodova, ""Design of distributed systems supporting local autonomy"", Proc. COMPCON'80 Spring, pp. 438-444, 1980-Feb.||J. B. Dennis and E. C. Van Horn, ""Programming semantics for multiprogrammed computations"", Commun. Ass. Comput. Mach., vol. 9, pp. 143-155, Mar. 1966.||P. J. Denning, ""Fault tolerant operating systems"", ACM Comput. Surveys, vol. 8, pp. 361-486, Dec. 1976.||J. E. Donnelley and J. G. Fletcher, ""Resource access control in a network operating system"", Proc. ACM Pacific'80 Conf., 1980-Nov.||P. H. Enslow, ""What is a 'distributed' data processing system?"", IEEE Computer, vol. 11, pp. 13-21, Jan. 1978.||R. S. Fabry, ""Capability-based addressing"", Commun. Ass. Comput. Mach., vol. 17, pp. 403-412, July 1974.||J. G. Fletcher and R. W. Watson, ""Service support in a network operating system"", Proc. COMPCON'80 Spring, pp. 415-424, 1980-Feb.||G. S. Graham and P. J. Denning, ""Protection–Principles and practice"", AFIPS Conf. Proc. Spriing Joint Comput. Conf., pp. 417-429, 1972.||A. K. Jones, ""The object model: A conceptual tool for structuring software"" in Lecture Notes in Computer Science, Berlin:Springer‑Verlag, vol. 60, pp. 8-18, 1978.||A. K. Jones, ""StarOS–A multiprocessor operating system for the support of task forces"", Proc. 7th Symp. Operating Syst. Principles, pp. 117-127, 1979-Dec.||K. C. Kahn and F. Pollack, ""An extensible operating system for the Intel 432"", Proc. COMPCON'81 Spring, pp. 398-404, 1981-Feb.||C. M. Li, Communicating distributed processes: A programming language concept for distributed systems, Mar. 1981.||T. A. Linden, ""Operating systems structures to support security and reliable software"", ACM Comput. Surveys, vol. 8, pp. 409-445, Dec. 1976.||M. T. Liu, ""System design of the distributed double-loop computer network (DDLCN)"", Proc. 1st Int. Conf. Distributed Comput. Syst., pp. 95-105, 1979-Oct.||M. T. Liu, ""Design of the distributed double-loop computer network (DDLCN)"", J. Digital Syst., vol. 5, pp. 3-37, 1981.||J. K. Ousterhout, ""Medusa: An experiment in distributed operating system structure"", Commun. Ass. Comput. Mach., vol. 23, pp. 92-105, Feb. 1980.||R. Pardo, M. T. Liu and G. Babic, ""An N-process communication protocol for distributed processing"", Proc. Symp. Comput. Network Protocols, pp. d7.1-10, 1978-Feb.||R. Pardo, Interprocess communication and synchronization for distributed systems, Aug. 1979.||R. Peebles and T. Dopirak, ""ADAPT: A guest system"", Proc. COMPCON'80 Spring, pp. 445-454, 1980-Feb.||J. Rattner and G. Cox, ""Object-based computer architecture"", ACM SIGARCH Comput. Architecture News, vol. 8, pp. 4-11, Oct. 1980.||C. C. Reames and M. T. Liu, ""A loop network for simultaneous transmission of variable-length messages"", Proc. 2nd Annu. Symp. Comput. Architecture, pp. 7-12, 1975-Jan.||Distributed Processing, pp. 3.31-3.36, Sept. 1977.||M. H. Solomon and R. A. Finkel, ""The Roscoe distributed operating system"", Proc. 7th Symp. Oper. Syst. Principles, pp. 108-114, 1979-Dec.||J. A. Stankovic and A. Van Dam, ""Research directions in (cooperative) distributed processing"" in Research Directions in Software Technology, MA, Cambridge:MIT Press, pp. 611-638, 1979.||L. Svobodova, B. Liskov and D. Clark, Distributed computer systems: Structure and semantics, Apr. 1979.||A. S. Tanenbaum, Computer Networks, NJ, Englewood Cliffs:Prentice-Hall, 1981.||D. P. Tsay and M. T. Liu, ""Interface design for the distributed double-loop computer network (DDLCN)"", Proc. 1979 Nat. Telecommun. Conf., pp. 31.4.1-6, 1979-Dec.||D. P. Tsay and M. T. Liu, ""Design of a reconfigurable front-end processor for computer networks"", Proc. 1980 Int. Symp. Fault-Tolerant Comput., pp. 369-371, 1880-Oct.||D. P. Tsay and M. T. Liu, ""Design of a robust network front-end for the distributed double-loop computer network (DDLCN)"", Proc. Distributed Data Acquisition Comput. Contr. Symp, pp. 141-155, 1980-Dec.||D. P. Tsay, MIKE: A network operating system for distributed double-loop computer network, June 1981.||S. A. Ward, ""TRIX: A network-oriented operating system"", Proc. COMPCON'80 Spring, pp. 344-349, 1980-Feb.||R. W. Watson and J. G. Fletcher, ""An architecture for support of network operating system services"", Comput. Networks, vol. 4, pp. 33-49, Feb. 1980.||L. D. Wittie and A. M. Van Tilborg, ""MICROS–A distributed operating system for MICRONET a reconfigurable network computer"", IEEE Trans. Comput., vol. C-29, pp. 1133-1144, Dec. 1980.||J. J. Wolf, M. T. Liu, B. W. Weide and D. P. Tsay, ""Design of a distributed fault-tolerant loop network"", Proc. 1979 Int. Symp. Fault-Tolerant Comput., pp. 17-24, 1979-June.||W. A. Wulf, R. Levin and S. Harbison, Hydra/Crmmp: An Experimental ComputerSystem, New York:McGraw-Hill, 1981.||S. Zeigler, ""The Intel 432 Ada programming environment"", Proc. COMPCON'81 Spring, pp. 405-410, 1981-Feb.||",MIKE: A Network Operating System for the Distributed Double-Loop Computer Network
"U.R. Kodres&&Department of Computer Science, Naval Postgraduate School, Monterrey, CA, USA|",The concept of a data flowgraph is formalized as a bipartite directed graph. Each execution sequence of a computer program has a corresponding data flowgraph which describes functionally what happens to the data if that execution sequence is followed.,10.1109/TSE.1978.231495,IEEE Transactions on Software Engineering,"Real time systems,Flowcharts,Data analysis,Algorithm design and analysis,Data flow computing,Hardware,Computer graphics,Information analysis,Parallel processing,Testing","F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Ass. Comput. Mach., vol. 19, pp. 137-147, Mar. 1976.||Design Automation of Digital Systems: Theory and Techniques, NJ, Englewood Cliffs:Prentice-Hall, 1972.||D. D. McCracken and W. S. Dorn, Numerical Methods and Fortran Programming, New York:Wiley, 1964.||L. R. Ford and D. R. Fulkerson, Flows in Networks, NJ, Princeton:Princeton Univ. Press, 1962.||S. L. Hantler and J. C. King, ""An introduction to proving correctness of programs"", Computing Surveys, vol. 8, pp. 331-353, Sept. 1976.||H. E. Koenig, Y. Tokad and H. K. Kesavan, Analysis of Discrete Physical Systems, New York:McGraw-Hill, 1967.||U. R. Kodres, ""Discrete systems and flowcharts"", IEEE Trans. Software Eng..||U. R. Kodres, ""Logic circuit layout"", Proc. Joint Conf. on Mathematical and Computer Aids to Design, pp. 165-191, 1969-Oct.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||B. Shneiderman, R. Mayer, J. McKay and P. Heller, ""Experimental investigation of the utility of detailed flowcharts in programming"", Commun. Ass. Comput. Mach., vol. 20, pp. 373-381, June 1977.||",Analysis of Real-Time Systems by Data Flowgraphs
B. Chandrasekaran&&unknow|,"THIS special collection had its genesis at the IEEE Computer Society Workshop on Software Testing and Test Documentation, held in Fort Lauderdale, Florida, during December 18-20, 1978. This collection is devoted to selected papers on program testing that were presented at the Workshop. It contains six papers whose concerns span a wide range: theoretical issues, practical expenence With particular strategies, extension of a class of techniques to new classes of language constructs, and building integrated test tools. In the next section, we present an overview of the papers in the collection.",10.1109/TSE.1980.234484,IEEE Transactions on Software Engineering,"Software testing,Error correction,Societies,Conferences,Concrete,Buildings,Terminology,Input variables,Shape","J. B. Goodenough and S. L. Gerhart, ""Toward a theory of testing: Data selection criteria"" in Current Trends in Programming Methodology, NJ, Englewood Cliffs:Prentice-Hall, vol. 2, pp. 44-79, 1977.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-215, Sept. 1976.||L. J. Osterweil, Allegations as aids to static program testing.||",Guest Editorial Special Collection on Program Testing
"R.C.T. Lee&&Institute of Applied Mathematics, National Tsing Hua University, Hsinchu, Taiwan|Y.H. Chin&&Department of Computer Science, Northwestern University, Evanston, IL, USA|S.C. Chang&&Department of Mathematics, National Tsing Hua University, Hsinchu, Taiwan|","In this paper, we shall introduce a concept widely used by statisticians, the principal component analysis technique. We shall show that this principal component analysis technique can be used to create new keys from a set of old keys. These new keys are very useful in narrowing down the search domain. We shall also show that the projections on the first principal component direction can be viewed as hashing addresses for the best-match searching problem.",10.1109/TSE.1976.225946,IEEE Transactions on Software Engineering,"Principal component analysis,Pattern recognition,Information security,Data security,Mathematics,Computer science,Information retrieval,Personnel,Books,Statistics","W. A. Burkhard and R. M. Keller, ""Some-approaches to best‑match file searching"", Commun. Ass. Comput. Mach., vol. 16, pp. 230-236, Apr. 1973.||C. L. Chang and R. C. T. Lee, ""A heuristic relaxation method for nonlinear mapping in cluster analysis"", IEEE Trans. Syst. Man Cybern., vol. SMC-3, pp. 197-200, Mar. 1973.||Y. T. Chien and K. S. Fu, ""On the generalized Karhunen-Loeve expansion"", IEEE Trans. Inform. Theory, vol. IT-13, pp. 518-520, 1967.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass. Comput. Mach., vol. 13, pp. 377-387, June 1970.||W. H. Cooley and P. R. Lohnes, Multivariate Data Analysis, New York:Wiley, 1971.||C. J. Date, An Introduction to Data Base Systems, MA, Reading:Addison-Wesley, 1975.||R. Duda and P. E. Hart, Pattern Classification and Scene Analysis, New York:Wiley, 1973.||R. A. Fisher, ""The use of multiple measurements in taxonomic problems"", Ann. Eugen., vol. 7, pp. 178-188, 1936.||J. H. Friedman, F. Baskett and L. J. Shustek, ""An algorithm for finding nearest neighbors"", IEEE Trans. Comput., vol. C-24, pp. 1000-1006, Oct. 1975.||K. S. Fu, Sequential Methods in Pattern Recognition and Machine Learning, New York:Academic, 1968.||M. G. Kendall, A Course in Multivariate Analysis, New York:Hefner, 1968.||R. C. T. Lee, ""Applications of information theory to select relevant variables"", Math Biosci., vol. 11, pp. 153-164, 1971.||R. C. T. Lee and R. C. Tsai, ""Application of short spanning path technique to multi-key searching"" in Inst. Appl. Math., Republic of China, Taiwan, Hsinchu:Nat. Tsing Hua Univ., 1976.||J. Martin, Computer Data-Base Organization, NJ, Englewood Cliffs:Prentice-Hall, 1975.||G. Salton, Automatic Information Organization and Retrieval, New York:McGraw-Hill, 1968.||J. R. Slagle and R. C. T. Lee, ""Applications of tree searching to sequential pattern recognition"", Comm. Ass. Comput. Mach., vol. 14, pp. 103-110, Feb. 1971.||",Application of Principal Component Analysis to Multikey Searching
"P. Reisner&&IBM Research Laboratory, San Jose, CA, USA|","This paper describes a series of psychological experiments used to test a new data base query language. The intent is to make psychological testing of a language part of the design and development process. By testing a language while it is still under development, features that require changing can bs identified and the changes made.",10.1109/TSE.1977.231131,IEEE Transactions on Software Engineering,"Psychology,Database languages,Programming profession,Writing,Process design,Software testing,Feedback,Educational institutions,Frequency,Human factors","R. J. Rubey, R. C. Wick, W. J. Stoner and L. Bentley, PL/I Comparative Evaluation, MI, Detroit:American Data Processing, vol. 1, 1969.||J. D. Gould and R. N. Ascher, Use of an IQF-like query language by non-programmers, Feb. 1975.||J. C. Thomas and J. D. Gould, ""A psychological study of query by example"", Proc. 1975 Nat. Comput. Conf., pp. 439-445, 1975-May.||P. Reisner, R. F. Boyce and D. D. Chamberlin, ""Human factors evaluation of two data base query languages: SQUARE and SEQUEL"", Proc. 1975 Nat. Comput. Conf., pp. 447-452, 1975-May.||B. Shneiderman, ""Exploratory experiments in programmer behavior"", Int. J. Comput. Inf. Sci., vol. 5, pp. 123-143, June 1976.||M. E. Sime, T. R. G. Green and D. J. Guest, ""Psychological evaluation of two conditional constructions used in computer languages"", Int. J. Man-Machine Studies, vol. 5, pp. 105-113, 1973.||L. A. Miller, ""Programming by non-programmers"", Int. J. Man‑Machine Studies, vol. 6, pp. 237-260, 1974.||J. D. Gould, ""Some psychological evidence on how people debug computer programs"", Int. J. Man-Machine Studies, vol. 7, pp. 151-182.||E. A. Youngs, ""Human errors in programming"", Int. J. Man‑Machine Studies, vol. 6, pp. 361-376.||L. Weissman, ""Psychological complexity of computer programs: an experimental methodology"", SIGPLAN Notices, pp. 25-35, June 1974.||G. M. Weinberg and E. L. Schulman, ""Goals and performance in computer programming"", Human Factors, vol. 16, no. 1, pp. 70-77, 1974.||D. D. Chamberlin and R. F. Boyce, ""SEQUEL: A structured English query language"", Proc. ACM SIGMOD Workshop, pp. 242-264, 1974-May.||M. M. Astrahan, ""System R: A relational approach to data base management"", ACM Trans. on Data Base Systems, vol. 1, no. 2, pp. 97-137, June 1976.||R. F. Boyce, D. D. Chamberlin, W. F. King and M. M. Hammer, ""Specifying queries as relational expressions: SQUARE"", Commun. Ass. Comput. Mach., Nov. 1975.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass. Comput. Mach., vol. 15, pp. 337-387, June 1970.||D. D. Chamberlin, J. N. Gray and I. L. Traiger, ""Views authorization and locking in a relational data base system"", Proc. 1975 Nat. Comput. Conf., pp. 425-430, 1975-May.||K. P. Eswaran and D. D. Chamberlin, ""Functional specifications of a subsystem for data base integrity"", Proc. Int. Conf. Very Large Data Bases, 1975-Sept.||D. D. Chamberlin, ""SEQUEL 2: A unified approach to data definition manipulation and control"", IBM J. Res. Develop., vol. 20, pp. 560-575, Nov. 1976.||E. F. Codd, ""A data base sublanguage founded on the relational calculus"", Proc. 1971 ACM SIGFIDET Workshop on Data Description Access and Control, 1971-Nov.||N. Chomsky, Syntactic Structures, The Hague:Mouton and Co., 1964.||G. Birkhoff and T. C. Bartee, Madern Applied Algebra, New York:McGraw-Hill, pp. 117-122, 1970.||M. D. Wang, ""The role of syntactic complexity as a determiner of comprehensibility"", J. Verbal Learning and Verbal Behavior, vol. 9, no. 4, pp. 398-404, Aug. 1970.||",Use of Psychological Experimentation as an Aid to Development of a Query Language
"Ben Wegbreit&&Xerox Palo Alto Research Center, Palo Alto, CA, USA|","To carry out significant program optimization, it is necessary to know what properties hold at each program unit. Frequently the properties of interest form a partially ordered set with a minimum condition (i.e., well-founded). When this occurs, it is possible to directly compute the properties that can be attached to program units and, optionally, to expand the program text to obtain a strong assignment of properties. Techniques are presented for property computation in iterative and recursive programs. Application to a variety of property sets is discussed.",10.1109/TSE.1975.6312852,IEEE Transactions on Software Engineering,"Optimization,Junctions,Software engineering,Vectors,Indexes,Flowcharts,Periodic structures",,Property extraction in well-founded property sets
"M. Stonebraker&&Electronics Research Laboratory, University of California, Berkeley, CA, USA|","This paper contains algorithms for ensuring the consistency of a distributed relational data base subject to multiple, concurrent updates. Also included are mechanisms to correctly update multiple copies of objects and to continue operation when less than all machines in the network are operational. Together with [4] and [12], this paper constitutes the significant portions of the design for a distributed data base version of INGRES.",10.1109/TSE.1979.234180,IEEE Transactions on Software Engineering,"Concurrency control,Computer crashes,System recovery,Partitioning algorithms,Proposals,Computer network reliability,Distributed control,Heart,Centralized control,Environmental management","P. A. Alsberg and J. D. Day, ""A principle for resilient sharing of distributed resources"" in Center for Advanced Computation, IL, Urbana:University of Illinois, 1976.||M. M. Astrahan, ""System R: A relational approach to database management"", TODS, vol. 2, June 1976.||P. A. Bernstein, The concurrency control mechanism of SSD-1: A system for distributed data bases, MA, Cambridge:Comput. Corp. of America, Dec. 1977.||R. S. Epstein, ""Distributed query processing in a relational data base system"", Proc. 1978 ACM-SIGMOD Conf on Management of Data, 1978-May.||J. Gray, Granularity of locks and degrees of consistency in a shared data base, CA, San Jose:IBM Research, July 1976.||||B. Lampson and H. Sturgis, Crash recovery in a distributed system, 1976.||D. A. Menasce, ""A locking protocol for resource coordination in distributed systems"", Proc. 1978 ACM-SIGMOD Conf. on Management ofData, 1978-May.||R. M. Metcalfe and D. R. Bogs, ""Ethernet: Distributed packet switching for local computer networks"", Commun. Ass. Comput. Mach., vol. 19, no. 7, July 1976.||L. Roberts and B. Wessler, ""Computer network development to achieve resource sharing"", Proc. 1970 Spring Joint Comput. Conf., 1970.||D. Ries and M. Stonebraker, ""A study of the effect of locking granularity in a relational data base system"", TODS, vol. 3, no. 3, Sept. 1977.||D. Ries and R. Epstein, Specification of the distribution criteria for a distributed data base system, CA, Berkeley:Electron. Res. Lab., University of California.||D. J. Rosenkrantz, ""A system level concurrency control for distributed database systems"", Proc. 2nd Berkeley Workshop on Distributed Data Bases and Comput. Networks, 1977-May.||J. B. Rothnie and N. Goodman, ""An overview of the preliminary design of SDD-1: A system for distributed data bases"", Proc. 2nd Berkeley Workshop on Distributed Data Bases and Comput. Networks, 1977-May.||J. B. Rothnie, The redundant update methodology of SDD-1: A system for distributed databases, MA, Cambridge:Computer Corporation of America, June 1977.||M. Stonebraker, ""The design and implementation of INGRES"", TODS, vol. 2, no. 3, Sept. 1976.||M. Stonebraker and E. Neuhold, ""A distributed data base version of INGRES"", Proc. 2nd Berkeley Workshop on Distributed Data Bases and Comput. Networks, 1977-May.||R. H. Thomas, A solution to the update problem for multiple copy data bases which use distributed control, July 1975.||E. Wong, ""Retrieving dispersed data from SSD-1: A system for distributed data bases"", Proc. 2nd Berkeley Workshop on Distributed Data Bases and Comput. Networks, 1977-May.||",Concurrency Control and Consistency of Multiple Copies of Data in Distributed Ingres
"V.Y. Shen&&Department of Computer Sciences, Purdue University, West Lafayette, IN, USA|S.D. Conte&&Department of Computer Sciences, Purdue University, West Lafayette, IN, USA|H.E. Dunsmore&&Department of Computer Sciences, Purdue University, West Lafayette, IN, USA|","The theory of software science was developed by the late M. H. Halstead of Purdue University during the early 1970's. It was first presented in unified form in the monograph Elements of Software Science published by Elsevier North-Holland in 1977. Since it claimed to apply scientific methods to the very complex and important problem of software production, and since experimental evidence supplied by Halstead and others seemed to support the theory, it drew widespread attention from the computer science community.",10.1109/TSE.1983.236460,IEEE Transactions on Software Engineering,"Software measurement,Software metrics,Books,Production,Programming profession,Military computing,Software tools,Computer science,Software engineering,Engineering management","C. T. Bailey and W. L. Dingee, ""A software study using Halstead metrics"", ACM Sigmetrics, vol. 10, pp. 189-197, 1981-Mar.||A. L. Baker and S. H. Zweben, ""A comparison of measures of control flow complexity"", IEEE Trans. Software Eng., vol. SE-6, pp. 506-512, Nov. 1980.||V. R. Basili and R. W. Reiter, ""An investigation of human factors in software development"", IEEE Computer, vol. 12, pp. 21-38, Dec. 1979.||V. Basili and T. Phillips, ""Evaluating and comparing the software metrics in the Software Engineering Laboratory"", ACM Sigmetrics, vol. 10, pp. 95-106, 1981-Mar.||B. W. Boehm, ""Software life cycle factors"", TRW Software Series.||K. Christensen, G. Fitsos and C. P. Smith, ""A perspective on software science"", IBM Syst. J., vol. 20, pp. 372-387, 1981.||D. Comer and M. H. Halstead, ""A simple experiment in top-down design"", IEEE Trans. Software Eng., vol. 5, pp. 105-109, Mar. 1979.||S. D. Conte, The software science language level metric, 1981.||N. S. Coulter, Software science and cognitive psychology, pp. 166-171.||B. Curtis, S. B. Sheppard, P. M. Milliman, M. A. Borst and T. Love, ""Measuring the psychological complexity of software maintenance tasks with the Halstead and McCabe metrics"", IEEE Trans. Software Eng., vol. SE-5, pp. 96-104, Mar. 1979.||B. Curtis, S. B. Sheppard and P. Milliman, ""Third time charm: Stronger replication of the ability of software complexity metrics to predict programmer performance"", Proc. 4th Int. Conf. Software Eng., pp. 356-360, 1979-Sept.||E. W. Dijkstra, ""Go to statement considered harmful"", (letter to the editor) Commun. Ass. Comput. Mach., vol. 11, pp. 147-148, Mar. 1968.||J. D. Donahoo, A review of software maintenance technology, Feb. 1980.||H. E. Dunsmore, ""Software metrics: An overview of an evolving methodology"", Symp. Empirical Foundations of Inform. and Software Sci., 1982-Nov.-3-5.||Inform. Processing and Management, 1983.||J. L. Elshoff, ""An investigation into the effect of the counting method used on software science measurements"", ACM SIGPLAN Notices, vol. 13, pp. 30-45, Feb. 1978.||L. Farr and H. Zagorski, ""Quantitative analysis of programming cost factors: A progress report"", Int. Computat. Cent. Symp. Proc.: Economics of Automatic Data Processing, pp. 167-177, 1965.||R. Fenichel, ""Heads I win tails you lose"", ACMComput. Surveys, vol. 11, pp. 277, Sept. 1979.||A. R. Feuer and E. B. Fowlkes, ""Some results from an empirical study of computer software"", Proc. 4th Int. Conf. Software Eng., pp. 351-355, 1979-Sept.||G. P. Fitsos, Software science counting rules and tuning methodology, Sept. 1979.||G. P. Fitsos, Vocabulary effects in software science, Jan. 1980.||A. B. Fitzsimmons and L. T. Love, ""A review and evaluation of software science"", ACM Comput. Surveys, vol. 10, pp. 3-18, Mar. 1978.||J. E. Gaffney, ""Software metrics: A key to improved software development management"", Proc. Comput. Sci. Statist. 13th Annu. Symp. on the Interface, pp. 211-220, 1981-Mar.||R. D. Gordon, ""Measuring improvements in program clarity"", IEEE Trans. Software Eng., vol. SE-5, pp. 79-90, Mar. 1979.||M. H. Halstead, Elements of Software Science, New York:Elsevier, North-Holland, 1977.||P. G. Hamer and G. D. Frewin, ""M. H. Halstead's software science–A critical examination"", Proc. 6th Int. Conf. Software Eng., pp. 197-206, 1982-Sept.||W. E. Hick, ""On the rate of gain of information"", Quart. J. Experimental Psychol., vol. 4, pp. 11-26, 1952.||T. James, ""Software cost estimating methodology"", IEEE Proc. Nat. Aerosp. Electron. Conf., pp. 22-28, 1977.||B. W. Kernighan and P. J. Plauger, The Elements ofProgramming Style, New York:McGraw-Hill, 1978.||J. Lassez, D. Van Der Knijff and J. Shepherd, ""A critical examination of software science"", J. Syst. Software, vol. 2, pp. 105-112, Dec. 1981.||A. M. Lister, ""Software science-The emperor's new clothes?"", Australian Comput. J., vol. 14, pp. 66-70, May 1982.||J. P. Malenge, Critique de la physique du logiciel (Critique of software science), Universite de Nice, France, Pub. Inform., Oct. 1980.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||S. N. Mohanty, ""Models and measurements for quality assessment of software"", ACM Comput. Surveys, vol. 11, pp. 251-275, Sept. 1979.||S. N. Mohanty, ""Software cost estimation: present and future"", Software‑Practice and Experience, vol. 11, pp. 103-121, 1981.||P. B. Moranda, ""Is software science hard?"", ACM Comput. Surveys, vol. 10, pp. 503-504, Dec. 1978.||Software Metrics. An Analysis and Evaluation. Cambridge, MA:MIT Press, 1981.||V. Schneider, ""Prediction of software effort and project duration: Four new formulas"", ACM SIGPLAN Notices, vol. 13, pp. 49-59, June 1978.||V. Y. Shen and H. E. Dunsmore, Analyzing Cobol programs via software science, Aug. 1980.||C. P. Smith, Practical applications of software science, June 1979.||C. P. Smith, ""A software science analysis of programming size"", Proc. ACM Nat. Comput. Conf., pp. 179-185, 1980-Oct.||J. M. Stroud, ""The fine structure of psychological time"", Ann. NY Acad. Sci., vol. 138, pp. 623-631, 1967.||C. E. Walston and C. P. Felix, ""A method of programming measurement and estimation"", IBM Syst. J., vol. 16, pp. 54-73, 1977.||A. S. Wang and H. E. Dunsmore, ""Back-to-front programming effort prediction"", Symp. Empirical Foundations of Inform. and Software Sci., 1982-Nov.-3-5.||Inform. Processing and Management, 1983.||R. W. Wolverton, ""The cost of developing large scale software"", IEEE Trans. Comput., vol. C-23, pp. 615-636, 1974.||S. N. Woodfield, Enhanced effort estimation by extending basic programming models to include modularity factors, Dec. 1980.||S. N. Woodfield, H. E. Dunsmore and V. Y. Shen, ""The effect of modularization and comments on program comprehension"", Proc. 5th Int. Conf. Software Eng., pp. 215-223, 1981-Mar.||S. N. Woodfield, V. Y. Shen and H. E. Dunsmore, ""A study of several metrics for programming effort"", J. Syst. Software, vol. 2, pp. 97-103, Dec. 1981.||S. H. Zweben, ""Response to Fenichel's comment"", ACM Comput. Surveys, vol. 11, pp. 277, Sept. 1979.||",Software Science Revisited: A Critical Analysis of the Theory and Its Empirical Support
"T.S. Chow&&Bell Laboratories, Inc., Naperville, IL, USA|","We propose a method of testing the correctness of control structures that can be modeled by a finite-state machine. Test results derived from the design are evaluated against the specification. No ""executable"" prototype is required. The method is based on a result in automata theory and can be applied to software testing. Its error-detecting capability is compared with that of other approaches. Application experience is summarized.",10.1109/TSE.1978.231496,IEEE Transactions on Software Engineering,"Software testing,Software design,Software systems,Automata,System testing,Automatic testing,Automatic control,Mathematical model,Switches,Process control","B. H. Barnes, ""An automata theoretic approach to interactive computer graphics command languages"" in Applied Computation Theory: Analysis Design Modeling, NJ, Englewood Cliffs:Prentice-Hall, 1976.||D. M. Birke, ""State-transition programming techniques and their use in producing teleprocessing device-control programs"", IEEE Trans. Commun., vol. COM-20, pp. 569-575, June 1972.||A. Gill, Introduction to the Theory of Finite-State Machines, New York:McGraw-Hill, 1962.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", Int. Conf. Reliable Software, 1975.||D. Gries, Compiler Construction for Digital Computers, New York:Wiley, 1971.||M. A. Harrison, Introduction to Switching and Automata Theory, New York:McGraw-Hill, 1965.||F. C. Hennie, ""Fault detecting experiments for sequential circuits"", Proc. 5th Annu. Symp. Switching Circuit Theory gnd Logic Design, pp. 95-110, 1964-Nov.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-560, May 1975.||J. C. Huang, ""An approach to program testing"", ACM Comput. Survey, vol. 7, no. 3, Sept. 1975.||Z. Kohavi, Switching and Finite Automata Theory, New York:McGraw-Hill, 1970.||H. G. Mendelbaum and F. Madaule, ""Automata as structured tools for real-time programming"", Proc. 1975 IFAC-IFIP Workshop Real-Time Programming.||S. Pimont and J. C. Rault, ""A software reliability assessment based on a structural behavioral analysis of programs"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-215, Sept. 1976.||K. G. Salter, ""A methodology for decomposing system requirements into data requirements"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||M. P. Vasilevskii, ""Failure diagnosis of automata"", Kibernetika, pp. 98-108, July-Aug. 1973.||J. H. Howard and W. P. Alexander, ""Analyzing sequences of operations performed by programs"" in Program Test Methods, NJ, Englewood Cliffs:Prentice-Hall, 1973.||W. H. Jessop, J. R. Kane, S. Roy and J. M. Scanlon, ""ATLAS–An automated software testing system"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||",Testing Software Design Modeled by Finite-State Machines
"E.J. Weyuker&&Courant Institute of Mathematical Sciences, New York University, New York, NY, USA|T.J. Ostrand&&Software Research Group, Sperry Univac, Blue Bell, PA, USA|","The theory of test data selection proposed by Goodenough and Gerhart is examined. In order to extend and refine this theory, the concepts of a revealing test criterion and a revealing subdomain are proposed. These notions are then used to provide a basis for constructing program tests.",10.1109/TSE.1980.234485,IEEE Transactions on Software Engineering,"Software testing,Software reliability","R. M. Burstall, ""Program proving as hand simulation with a little induction"", Proc. IFIP Congr. 74, pp. 308-312, 1974.||R. A. DeMillo, R. J. Lipton and F. G. Sayward, ""Hints on test data selection: Help for the practicing programmer"", Computer, vol. 11, pp. 34-41, Apr. 1978.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, pp. 1-81, 1972.||M. Geller, ""Test data as an aid in proving program correctness"", Commun. Ass. Comput. Mach., vol. 21, pp. 368-375, May 1978.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of testing: Data selection criteria"" in Current Trends in Programming Methodology, NJ, Englewood Cliffs:Prentice-Hall, vol. 2, pp. 44-79, 1977.||W. E. Howden, ""An evaluation of the effectiveness of symbolic testing"", Software–Practice and Experience, vol. 8, pp. 381-397, 1978.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-215, Sept. 1976.||W. E. Howden, ""Symbolic testing and the DISSECT symbolic evaluation system"", IEEE Trans. Software Eng., vol. SE-3, pp. 266-278, July 1977.||R. E. Keirstead and D. B. Parker, ""On the feasability of formal certification"" in Program Test Methods, NJ, Englewood Cliffs:Prentice-Hall, pp. 291-301, 1973.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||C. V. Raminamoorthy, S. F. Ho and W. T. Chen, ""On the automated generation of program test data"", IEEE Trans. Software Eng., vol. SE-2, pp. 293-300, Dec. 1976.||E. J. Weyuker, Program Schemas with Semantic Restrictions, June 1977.||E. J. Weyuker, ""The applicability of program schema results to programs"", Int. J. Comput. Inform. Sci., vol. 8, pp. 387-403, Oct. 1979.||",Theories of Program Testing and the Application of Revealing Subdomains
"S.L. Gerhart&&Department of Computer Science, Duke University, Durham, NC, USA|L. Yelowitz&&Department of Computer Science, University of Pittsburgh, Pittsburgh, PA, USA|","Errors, inconsistencies, or confusing points are noted in a variety of published algorithms, many of which are being used as examples in formulating or teaching principles of such modern programming methodologies as formal specification, systematic construction, and correctness proving. Common properties of these points of contention are abstracted. These properties are then used to pinpoint possible causes of the errors and to formulate general guidelines which might help to avoid further errors. The common characteristic of mathematical rigor and reasoning in these examples is noted, leading to some discussion about fallibility in mathematics, and its relationship to fallibility in these programming methodologies. The overriding goal is to cast a more realistic perspective on the methodologies, particularly with respect to older methodologies, such as testing, and to provide constructive recommendations for their improvement.",10.1109/TSE.1976.233815,IEEE Transactions on Software Engineering,"Education,Formal specifications,Guidelines,Mathematical programming,Testing,Computer science,Mathematics,Error correction,Frequency,Data structures","B. H. Liskov and S. N. Zilles, ""Specifications techniques for data abstractions"", IEEE Trans. Software Engineering, vol. SE-1, pp. 7-19, Mar. 1975.||J. C. King, A program verifier, 1969.||B. Wegbreit, ""The synthesis of loop predicates"", Commun. Ass. Comput. Mach., vol. 17, pp. 102-112, 1974.||L. P. Deutsch, An interactive program verifier, June 1973.||H. D. Mills, ""How to write correct programs and know it"", Proc. Int. Conf. Reliable Software, pp. 363-370, 1975-Apr.||C. L. McGowan and J. R. Kelly, Top-Down Structured Programming Techniques, New York:Petrocelli Charter, 1975.||R. London, ""Software reliability through proving programs correct"", Proc. 1971 IEEE Conf. Fault-Tolerant Computing, pp. 125-129.||C. A. R. Hoare, ""Proof of a program: Find"", Commun. Ass. Comput. Mach., vol. 14, pp. 39-45, 1971.||S. L. Gerhart, Verification of APL programs, 1972.||D. Oppen, On logic and program verification, Apr. 1975.||S. Cook and D. Oppen, ""An assertion language for data structure"", Proc. Second Symp. Principles of Programming Languages, pp. 160-166, 1975.||||D. E. Knuth, The Art of Computer Programming Vol. 1 Fundamental Algorithms, MA, Reading:Addison-Wesley, 1973.||A. T. Berztiss, Data Structures: Theory and Practice, New York:Academic, 1975.||N. Wirth, Systematic Programming, NJ, Englewood Cliffs:Prentice-Hall, 1972.||P. Naur, ""Programming by action clusters"", BIT, vol. 9, pp. 250-258, 1969.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Engineering (Special Issue on Reliable Software), vol. SE-1, pp. 156-173, June 1975.||R. E. Noonan, ""Structural programming and formal specifications"", IEEE Trans. Software Engineering (Special Issue on the First National Conference on Software Engineering), vol. SE-1, pp. 421-425, 1975-Dec.||P. Henderson and R. Snowden, ""An experiment in structured programming"", BIT, vol. 12, pp. 38-53, 1972.||H. Ledgard, ""The case for structured programming"", BIT, vol. 13, pp. 45-57, 1973.||N. Wirth, ""PL360 A programming language for the 360 computer"", J. Ass. Comput. Mach., vol. 15, pp. 37-74, 1968.||N. Wirth, ""Program development by stepwise refinement"", Commun. Ass. Comput. Mach., vol. 14, pp. 221-227, 1971.||W. A. Wulf, ALPHARD: Toward a language to support structured programs, Apr. 1974.||C. A. R. Hoare, ""Notes on data structuring"" in Structured Programming, New York:Academic, pp. 83-174, 1972.||G. A. Lanzarone and M. Ornaghi, ""Program construction by refinements preserving correctness"", Comput. J., vol. 18, pp. 55-62, 1975.||K. A. Redish, ""Comments of London's certffication of algorithm 245"", Commun. Ass. Comput. Mach., vol. 14, pp. 50-51, 1971.||Scientific American, Dec. 1975.||P. J. Davis, ""Fidelity in mathematical discourse: Is one and one really two?"", Amer. Math. Mon., pp. 252-263, 1972.||J. A. Schwartz, ""An overview of bugs"" in Debugging Techniques in Large Systems, NJ, Englewood Cliffs:Prentice-Hall, pp. 1-16, 1971.||||W. Howden, Reliability of the path testing strategy, pp. 208-215.||",Observations of Fallibility in Applications of Modern Programming Methodologies
"E.B. Daly&&GTE Automatic Electric Laboratories, Inc., Northlake, IL, USA|","This paper describes four major aspects of software management: development statistics, development process, development objectives, and software maintenance. The control of both large and smal software projects is included in the analysis.",10.1109/TSE.1977.231132,IEEE Transactions on Software Engineering,"Software development management,Programming,Software maintenance,Costs,Hardware,Statistics,Software design,Real time systems,Documentation,Standards development",,Management of Software Development
"Michael R. Paige&&Sperry Rand Corporate Research Center, Sudbury, Mass; Science Applications, San Francisco, Calif. 94621|","Program graphs have been used as a vehicle to focus attention on the structure of a program. A systematic methodology for partitioning a program graph (digraph) to highlight the relationships between program elements is introduced along with an attendant notation. This notation is described in purely mathematical terms in the first section, and then the programming-related implications of this approach are addressed in the second section.",10.1109/TSE.1975.6312853,IEEE Transactions on Software Engineering,"Programming,Computers,Complexity theory,Indexes,Software engineering,Systematics,Flowcharts",,"Program graphs, an algebra, and their implication for programming"
"D.A. Menasce&&Department of Computer Science, University of California, Los Angeles, CA, USA|R.R. Muntz&&Department of Computer Science, University of California, Los Angeles, CA, USA|","This paper descrbes two protocols for the detection of deadlocks in distributed data bases–a hierarchically organized one and a distributed one. A graph model which depicts the state of execution of all transactions in the system is used by both protocols. A cycle in this graph is a necessary and sufficient condition for a deadlock to exist. Nevertheless, neither protocol requires that the global graph be built and maintained in order for deadlocks to be detected. In the case of the hierarchical protocol, the communications cost can be optimized if the topology of the hierarachy is appropriately chosen.",10.1109/TSE.1979.234181,IEEE Transactions on Software Engineering,"System recovery,Protocols,Sufficient conditions,Cost function,Topology,Graph theory,Multiprocessing systems,Concurrent computing,Computer science,Tin","A. N. Haberman, ""Prevention of system deadlocks"", Commun. Ass. Comput. Mach., vol. 12, no. 7, pp. 373-377, July 1969.||A. Shoshani and E. G. Coffman, ""Sequencing tasks in multiprocess multiple resource systems to avoid deadlocks"", Proc. 1lth Annual Symp. on Switching and Automata Theory, pp. 225-233, 1970-Oct.||E. G. Coffman, M. J. Elphick and A. Shoshani, ""System deadlocks"", ACM Comput. Surveys, vol. 3, no. 2, pp. 67-78, June 1971.||P. F. King and A. J. Collmeyer, ""Database sharing–An efficient mechanism for supporting concurrent processes"", Proc. AFIPS Nat. Comput. Conf., 1973.||J. N. Gray, ""Notes on database operating systems"" in Operating Systems and Advanced Course, Heidelberg, Berlin:Springer‑Verlag, pp. 394-481, 1978.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The motions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, no. 11, Nov. 1976.||",Locking and Deadlock Detection in Distributed Data Bases
"N.S. Coulter&&Department of Computer and Information Systems, Florida Atlantic University, Boca Raton, FL, USA|","Halstead proposed a methodology for studying the process of programming known as software science. This methodology merges theories from cognitive psychology with theories from computer science. There is evidence that some of the assumptions of software science incorrectly apply the results of cognitive psychology studies. HAlstead proposed theories relative to human memory models that appear to be without support from psychologists. Other software scientists, however, report empirical evidence that may support some of those theories. This anomaly places aspects of software science in a precarious position. The three conflicting issues discussed in this paper are 1) limitations of short-term memory and number of sub-routine parameters, 2) searches in human memory and programming effort, and 3) psychological time and programming time.",10.1109/TSE.1983.236461,IEEE Transactions on Software Engineering,"Psychology,Humans,Software measurement,Algorithms,Vocabulary,Computer science,Differential equations,Information systems,Measurement units","R. C. Atkinson and J. F. Juola, ""Search and decision processes in recognition memory"" in Contemporary Development in Mathematical Psychology, San Francisco:Freeman, vol. 1, pp. 242-293, 1974.||R. C. Atkinson and R. M. Shriffin, ""Human memory: A proposed system and its control processes"", The Psychology of Learning and Motivation: Advance Research and Theory, pp. 85-195, 1968.||J. P. Cavanagh, ""Relation between the immediate memory span and the memory search rate"", Psychological Rev., vol. 79, pp. 525-530, 1973.||D. Comer and M. H. Halstead, ""A simple experiment in top-down design"", IEEE Trans. Software Eng., vol. SE-5, pp. 105-109, Mar. 1979.||M. C. Corballis, J. Kirby and A. Miller, ""Access to elements of a memorized list"", J. Experimental Psychol., vol. 94, pp. 185-190, 1972.||F. Craik and R. S. Lockhart, ""Levels of processing: A framework for memory research"", J. Verbal Learning and Verbal Behavior, pp. 671-684, 1972.||B. Curtis, S. B. Sheppard, P. Milliman, M. A. Borst and T. Love, ""Measuring the psychological complexity of software maintenance tasks with the Halstead and McCabe metrics"", IEEE Trans. Software Eng., vol. SE-5, pp. 96-104, Mar. 1979.||A. Fitzsimmons and T. Love, ""A review and evaluation of software science"", ACM Comput. Surveys, vol. 10, pp. 3-18, Mar. 1978.||R. D. Gordon, ""Measuring improvement in program clarity"", IEEE Trans. Software Eng., vol. SE-5, pp. 79-90, Mar. 1979.||M. H. Halstead, ""Guest editorial on software science"", IEEE Trans. Software Eng., vol. SE-5, pp. 24-25, Mar. 1979.||M. H. Halstead, Elements ofSoftware Science, New York:Elsevier, 1977.||M. H. Halstead and V. Schneider, ""Self-assessment procedure VII"", Commun. Ass. Comput. Mach., vol. 23, pp. 475-480, Aug. 1980.||W. Kintsch, MemoryandCognition, NewYork:Wiley, 1977.||L. T. Love and A. B. Bowman, ""An independent test of software physics"", SIGPLAN Notices, vol. 11, pp. 42-49, 1976.||T. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||A. W. Melton, ""Implications of short-term memory for a general theory of memory"", J. Verbal Learning and Verbal Behavior, vol. 2, pp. 1-21, 1963.||G. A. Miller, ""The magical number seven plus or minus two. Some limits on our capacity for processing information"", Psychological Rev., vol. 63, pp. 81-97, 1956.||S. N. Mohanty, ""Models and measurements for quality assessment of software"", ACM Comput. Surveys, vol. 11, pp. 251-275, 1979.||B. B. Murdock, Human Memory: Theory and Data, NJ, Hillsdale:Eribaum, 1974.||B. B. Murdock, ""A parallel processing model for scanning"", Perception and Psychophys., vol. 10, pp. 289-291, 1971.||L. M. Ottenstein, ""Quantitative estimates of debugging requirements"", IEEE Trans. Software Eng., vol. SE-5, pp. 505-514, Sept. 1979.||B. Shneiderman, Software Psychology, MA, Cambridge:Winthrop, 1980.||H. A. Simon, ""How big is a chunk?"", Science, vol. 183, pp. 482-488, Feb. 1974.||S. Sternberg, ""High speed scanning in human memory"", Science, vol. 153, pp. 652-654, 1966.||J. M. Stroud, ""The fine structure of psychological time"" in Information Theory in Psychology, IL, Glencoe:Free Press, 1955.||J. M. Stroud, ""The fine structure of psychological time"", Ann. NY Acad. Sci., vol. 138, pp. 623-631, 1967.||P. B. Moranda, A. Fitzsimmons and T. Love, ""Surveyor's Forum"", ACM Comput. Surveys, vol. 10, pp. 503-505, Dec. 1978.||R. Fenichel and S. H. Zweben, ""Surveyor's Forum"", ACM Comput. Surveys, vol. 11, pp. 277-278, Sept, 1978.||J. Theios, ""Reaction time measurements in the study of memory processes: Theory and data"" in The Psychology of Learning and Motivation, New York:Academic, vol. 7, pp. 43-85, 1973.||S. N. Woodfield, ""An experiment in unit increase in problem complexity"", IEEE Trans. Software Eng., vol. SE-5, pp. 76-79, Mar. 1979.||S. H. Zweben and A. L. Baker, ""A comparison of measures of control flow complexity"", Proc. 3rd Int. Comput. Software & Applications Conf., pp. 695-701, 1979.||S. H. Zweben and K. Fung, ""Exploring software science relations in COBOL and APL"", Proc. 3rd Int. Comput. Software & Applications Conf., pp. 702-707, 1979.||",Software Science and Cognitive Psychology
"E.T. Chen&&Computer Science Division, Travelers Insurance Companies, Hartford, CT, USA|",This paper proposes a measure of program control complexity from an information theory viewpoint. A set of empirical data showing programmer productivity as a function of program control complexity is also presented. The data reveals a step-function-like contour to programmer productivity with increasing program control complexity.,10.1109/TSE.1978.231497,IEEE Transactions on Software Engineering,"Programming profession,Productivity,Logic programming,Information theory,Entropy,Computer languages,Memory management,Logic devices,Communication system control,Flowcharts","H. D. Mills, Mathematical foundations for structured programming.||E. T. Chen, A mathematical theory of program control complexity and productivity.||GUIDE Project on productivity measurement, Nov. 1974.||E. T. Chen, N. H. White, J. A. Fisher, P. E. Brown and M. A. Sweeney, A style of programming in COBOL, 1975.||J. Hartmanis and J. E. Hopcroft, ""An overview of the theory of computational complexity"", J. Ass. Comput. Mach., vol. 18, pp. 444-475, July 1971.||C. Jones, Program quality and programmer productivity.||E. W. Dijkstra, ""GOTO statement considered harmful"", Commun. Ass. Comput. Mach., Mar. 1968.||F. P. Brooks, The Mythical Man-Month, MA, Reading:Addison-Wesley, 1975.||A. M. Pietrasanta, Program system estimating: An evaluation of the System Development Corporation research.||M. H. Halstead, ""Natural laws controlling algorithm structure?"", Sigplan Notices, Feb. 1972.||E. Yourdon and L. L. Constantine, Structured Design, New York:Yourdon, 1975.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||C. E. Walston and C. P. Felix, ""A method of programming measurement and estimation"", IBM Syst. J., vol. 16, no. 1, 1977.||J. D. Aron, The Program Development Process, MA, Reading:Addison-Wesley, 1974.||O.-J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, pp. 1-82, 1972.||C. E. Shannon and W. Weaver, The Mathematical Theory of Communication, IL, Urbana:Univ. Illinois Press, 1971.||""AUXCO-Project Management System"", Estimating Guidelines.||J. D. Aron, Estimating resources for large programming systems.||H. D. Mills, ""The complexity of programs"", Program Test Methods, 1973.||",Program Complexity and Programmer Productivity
"L.J. White&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|E.I. Cohen&&Poughkeepsie Programming Center, IBM, Corporation, Poughkeepsie, NY, USA|","This paper presents a testing strategy desiged to detect errors in the control flow of a computer program, and the conditions under which this strategy is reliable are given and characterized. The control flow statements in a computer progam partition the input space into a set of mutually exclusive domains, each of which corresponds to a particular program path and consists of input data points which cause that path to be executed. The testing strategy generates test points to examine the boundaries of a domain to detect whether a domain error has occurred, as either one or more of these boundaries will have shifted or else the corresponding predicate relational operator has changed. If test points can be chosen within e of each boundary, under the appropriate assumptions, the strategy is shown to be reliable in detecting domain errons of magnitude greater than ∈. Moreover, the number of test points required to test each domain grows only linearly with both the dimensionality of the input space and the number of predicates along the path being tested.",10.1109/TSE.1980.234486,IEEE Transactions on Software Engineering,"Computer errors,Error correction,Software testing,Automatic testing,Data flow computing,Software reliability,Automatic control,Military computing,Information science,System testing","R. S. Boyer, B. Elspas and K. N. Levitt, ""SELECT–A formal system for testing and debugging programs by symbolic execution"", Proc. 1975 Int. Conf Rel. Software, pp. 234-245, 1975-Apr.||L. A. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept. 1976.||E. I. Cohen and L. J. White, A finite domain-testing strategy for computer program testing, Aug. 1977.||E. I. Cohen, A finite domain-testing strategy for computer program testing, June 1978.||J. L. Elshoff, A numerical profile of commercial PL/I programs, Sept. 1975.||J. L. Elshoff, ""An analysis of some commercial P/ I programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 113-120, June 1976.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, pp. 156-173, June 1975.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-560, May 1975.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-215, Sept. 1976.||D. E. Knuth, ""An empirical study of FORTRAN programs"", Software–Practice and Experience, vol. 1, pp. 105-133, Apr.-June 1971.||C. V. Ramamoorthy, S. F. Ho and W. T. Chen, ""On the automated generation of program test data"", IEEE Trans. Software Eng., vol. SE-2, pp. 293-300, Dec. 1976.||L. J. White, F. C. Teng, H. C. Kuo and D. W. Coleman, An error analysis of the domain testing strategy, Sept. 1978.||L. J. White, E. I. Cohen and B. Chandrasekaran, A domain strategy for computer program testing, Aug. 1978.||",A Domain Strategy for Computer Program Testing
"W.E. Howden&&Department of Applied Physics and Information Science, University of California, San Diego, La Jolla, CA, USA|",A set of test data T for a program P is reliable if it reveals that P contains an error whenever P is incorrect. If a set of tests T is reliable and P produces the correct output for each element of T then P is a correct program. Test data generation strategies are procedures for generating sets of test data. A testing strategy is reliable for a program P if it produces a reliable set of test data for P. It is proved that an effective testing strategy which is reliable for all programs cannot be constructed. A description of the path analysis testing strategy is presented. In the path analysis strategy data are generated which cause different paths in a program to be executed. A method for analyzing the reliability of path testing is introduced. The method is used to characterize certain classes of programs and program errors for which the path analysis strategy is reliable. Examples of published incorrect programs are included.,10.1109/TSE.1976.233816,IEEE Transactions on Software Engineering,"Testing,Data analysis,Programming profession,Upper bound,Costs,Physics,Information science","B. W. Boehm, R. K. McClean and D. B. Urfrig, ""Some experience with automated aids to the design of large-scale reliable software"", IEEE Trans. Software Eng., vol. SE-1, pp. 125-133, Mar. 1975.||R. S. Boyer, B. Elspas and K. N. Levitt, ""SELECT-A formal system for testing and debugging programs by symbolic execution"", Proc. Int. Conf. Reliable Software, 1975-Apr.||W. S. Brainerd and L. H. Landweber, Theory of Computation, New York:Wiley, 1974.||R. M. Burstall, ""Proving correctness as hand simulation with a little induction"", Proc. IFIPS 1974, 1974.||L. Clarke, A system to generate test data and symbolically execute programs, Feb. 1975.||L. P. Deutsch, An interactive program verifier, May 1973.||A. Endres, ""An analysis of errors and their causes in system programs"", Proc. Int. Conf. Reliable Software, 1975-Apr.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", Proc. Int. Conf. Reliable Software, 1975-Apr.||R. H. Hoffman, ""NASA/Johnson Space Center approach to automated test data generation"", Proc. Computer Science and Statistics: 8th Annu. Symp. on the Interface, 1975-Feb.||W. E. Howden, ""Automatic generation of program test data and proofs of program correctness"", Workshop on the Attainment of Reliable Software, 1974-Apr.||W. E. Howden and J. Laub, ""Automatic case analysis of programs"", Proc. Computer Science and Statistics: 8th Annu. Symp. on the Interface, 1975-Feb.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Computers, vol. C-24, pp. 554-560, May 1975.||B. W. Kernighan and P. J. Plauger, The Elements of Programming Style, New York:McGraw-Hill, 1974.||J. C. King, ""A new approach to program testing"", Proc. Int. Conf Reliable Software, 1975-Apr.||E. F. Miller, ""RXVP: An automated verification system for FORTRAN"", Proc. Computer Science and Statistics: 8th Annu. Symp. on the Interface, 1975-Feb.||L. J. Osterweil and L. D. Fosdick, Data flow analysis as an aid in documentation assertion generation validation and error detection, Sept. 1975.||M. L. Shooman and M. I. Bolsky, ""Types distribution and test and correction times for programming errors"", Proc. Int. Conf. Reliable Software, 1975-Apr.||ALGOL W Reference Manual, 1971.||L. G. Stucki, ""Automatic generation of self-metric software"", Proc. IEEE Symp. Computer Software Reliability, 1973.||T. A. Thayer, Software reliability study, June 1974.||",Reliability of the Path Analysis Testing Strategy
"W.H. Harrison&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","Programs can be analyzed to determine bounds on the ranges of values assumed by variables at various points in the program. This range information can then be used to eliminate redundant tests, verify correct operation, choose data representations, select code to be generated, and provide diagnostic information. Sophisticated analyses involving the proofs of complex assertions are sometimes required to derive accurate range information for the purpose of proving programs correct. The performance of such algorithms may be unacceptable for the routine analysis required during the compilation process. This paper presents a discussion of mechanical range analysis employing techniques practical for use in a compiler. This analysis can also serve as a useful adjunct to the more sophisticated techniques required for program proving.",10.1109/TSE.1977.231133,IEEE Transactions on Software Engineering,"Testing,Algorithm design and analysis,Information analysis,Performance analysis,Flow graphs,Optimizing compilers,Tracking loops,Tires,Data flow computing","F. E. Allen, ""Control flow analysis"", Proc. ACM SIGPLAN Symp. Compiler Optimization SIGPLAN Notices, vol. 5, pp. 1-19, 1970-July.||F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Ass. Comput. Mach., vol. 19, pp. 137-147, Mar. 1976.||R. L. Sites, Proving that programs terminate cleanly, May 1974.||J. C. King, ""A new approach to program testing"", Proc. Int. Conf. on Reliable Software, 1975-Apr.||M. S. Hecht and J. D. Ullman, ""Characterizations of reducible flow graphs"", J. Ass. Comput. Mach., vol. 21, pp. 367-375, July 1974.||",Compiler Analysis of the Value Ranges for Variables
"Thomas Porter&&Department of Computer Science, University of Stanford, Stanford, CA, USA|Istvan Simon&&Department of Computer Science, University of Stanford, Stanford, CA, USA|",The average number of levels that a new element moves up when inserted into a heap is investigated. Two probabilistic models under which such an average might be computed are proposed. A `Lemma of Conservation of Ignorance' is formulated and used in the derivation of an exact formula for the average in one of these models. It is shown that this average is bounded by a constant and its asymptotic behaviour is discussed. Numerical data for the second model are also provided and analyzed.,10.1109/TSE.1975.6312854,IEEE Transactions on Software Engineering,"Binary trees,Numerical models,Computational modeling,Analytical models,Data models,Educational institutions,Probability distribution",,Random insertion into a priority queue structure
"P.A. Bernstein&&Aiken Computation Laboratory, Harvard University, Cambridge, MA, USA|D.W. Shipman&&Computer Corporation of America, Cambridge, MA, USA|W.S. Wong&&Harvard University, Cambridge, MA, USA|","An arbitrary interleaved execution of transactions in a database system can lead to an inconsistent database state. A number of synchronization mechanisms have been proposed to prevent such spurious behavior. To gain insight into these mechanisms, we analyze them in a simple centralized system that permits one read operation and one write operation per transaction. We show why locking mechanisms lead to correct operation, we show that two proposed mechanisms for distributed environments are special cases of locking, and we present a new version of lockdng that alows more concurrency than past methods. We also examine conflict graph analysis, the method used in the SDD-1 distributed database system, we prove its correctness, and we show that it can be used to substantially improve the performance of almost any synchronization mechanisn.",10.1109/TSE.1979.234182,IEEE Transactions on Software Engineering,"Concurrency control,Transaction databases,Database systems,Concurrent computing,Performance analysis,Control systems,Interleaved codes,Proposals,Monitoring,Distributed databases","A. V. Aho, J. Hopcroft and J. Ullman, The Design and Analysis of Computer Algorithms, MA, Reading:Addison-Wesley, 1975.||P. A. Bernstein, N. Goodman, J. B. Rothnie and C. H. Papadimitriou, ""Analysis of serialization in SDD-1: A system for distributed databases"", Proc. 1977 IEEE COMPSAC Conf., 1977-Nov.||P. A. Bernstein, D. W. Shipman, J. B. Rothnie and N. Goodman, The concurrency control mechanism of SDD-1: A system for distributed databases, Dec. 1977.||P. A. Bernstein, J. B. Rothnie, N. Goodman and C. H. Papadimitriou, ""The concurrency control mechanism of SDD-1: A system for distributed databases (the fully redundant case)"", IEEE Trans. Software Eng., vol. SE-4, pp. 154-168, May 1978.||P. A. Bernstein and D. W. Shipman, A new analysis of concurrency control in SDD-1; A system for distributed databases, June 1978.||D. D. Chamberlin, R. F. Boyce and I. L. Traiger, ""A deadlock‑free scheme for resource allocation in a data-base environment"", 1974 IFIPS Conf. Proc., pp. 340-343, 1974.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, pp. 624-633, Nov. 1976.||J. N. Gray, R. A. Lorie, G. R. Putzolu and I. L. Traiger, Granularity of locks and degrees of consistency in a shared data base, Sept. 1975.||L. Lamport, Towards a theory of correctness of multi-user data base systems, Oct. 1976.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||C. H. Papadimitriou, P. A. Bernstein and J. B. Rothnie, ""Some computational problems related to database concurrency control"", Proc. Conf. Theoretical Computer Science, 1977-Aug.||C. H. Papadimitriou, ""Serializability of concurrent updates"", J. Ass. Comput. Mach..||D. J. Rosenkrantz, R. E. Stearns and P. M. Lewis, ""System level concurrency control for distributed database systems"", ACM Trans. Database Syst., vol. 3, pp. 178-198, June 1978.||J. B. Rothnie, N. Goodman and P. A. Bernstein, ""The redundant update methodology of SDD-1: A system for distributed data"", Proc. 1977 IEEE COMPSAC Conf., 1977-Nov.||R. C. Stearns, P. M. Lewis and D. J. Rosenkrantz, ""Concurrency control for database systems"", Proc. Conf Foundations of Computer Science, pp. 19-32, 1976.||R. H. Thomas, A solution to the update problem for multiple copy databases which uses distributed control, July 1975.||",Formal Aspects of Serializability in Database Concurrency Control
"R.M. Negrini&&Dipartimento di Elettronica, Politecnico di Milano, Milan, Italy|M. Sami&&Dipartimento di Elettronica, Politecnico di Milano, Milan, Italy|","It is considered interesting to identify, from the structure of control flow and of relationships among variables in a program, some properties allowing to point out possible sources of errors or of faulty behavior. In particular, it is found that information about termination of loops and about meaningfulness of acceptance tests in recopery block strategy can be extracted from such structural analysis. Criteria for applying this analysis to programs with arbitrary structures are presented.",10.1109/TSE.1983.236462,IEEE Transactions on Software Engineering,"Circuit testing,Fault diagnosis,Circuit faults,Error correction,Data mining,Information analysis,Performance analysis,Performance evaluation,Runtime,Software reliability","T. Anderson, P. A. Lee and S. K. Shrivastava, ""A model of recoverability in multilevel systems"", IEEE Trans. Software Eng., vol. SE-4, pp. 486-494, Nov. 1978.||R. L. Kleir and C. V. Ramamoorthy, ""Optimization strategies for microprograms"", IEEE Trans. Comput., vol. C-20, pp. 783-794, July 1971.||B. Martin and G. Estrin, ""Models of computations and systems: Evaluation of vertex probabilities in graph models of computations"", J. Ass. Comput. Mach., vol. 14, pp. 281-299, Apr. 1967.||J. B. Dennis, ""Data flow supercomputers"", IEEE Computer, vol. 13, pp. 48-56, Nov. 1980.||L. A. Clarke, ""Testing: Achievements and frustrations"", Proc. COMPSAC, pp. 310-314, 1978.||M. G. Sami and R. Stefanelli, ""On structural termination of programs and microprograms"", Proc. 1st EUROMICRO Symp. on Microprocessing and Microprogramming, pp. 233-239, 1975.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. on Appl. Math., pp. 19-32, 1967.||Z. Manna and A. Pnueli, ""An axiomatic basis of computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||B. Randell, ""System structure for software fault tolerance"", IEEE Trans Software Eng., vol. SE-1, pp. 220-232, July 1975.||R. Book, S. Even, S. Greibach and G. Ott, ""Ambiguity in graphs and expressions"", IEEE Trans. Comput., vol. C-20, pp. 149-153, Feb. 1971.||T. Anderson, P. A. Lee and S. K. Shrivastava, ""A model of recoverability in multilevel systems"", IEEE Trans. Software Eng., vol. SE-4, pp. 486-494, Nov. 1978.||J. L. Becerril, J. Bondia, R. Casajuana and F. Valer, ""Grammar characterization of flow-graphs"", IBM J. Res. Develop., vol. 24, pp. 756-763, Nov. 1980.||R. Negrini, M. G. Sami and R. Stefaneili, ""Verification of complex programs and microprograms"" in Designing and Programming Modern Computer Systems, NJ, Englewood Cliffs:Prentice-Hall, vol. 1, 1982.||",Some Properties Derived from Structural Analysis of Program Graph Models
"P.B. Hansen&&Department of Computer Science, University of Southern California, Los Angeles, CA, USA|","This paper explores the problems of implementing arbitrary forms of process communication on a multiprocessor network. It develops a Concurrent Pascal program that enables distributed processes to communicate on virtual channels. The channels cannot deadlock and will deliver all messages within a finite time. The operation, structure, text, and performance of this program are described. It was written, tested, and described in two weeks and it worked immediately.",10.1109/TSE.1978.231498,IEEE Transactions on Software Engineering,"System recovery,Testing,Computer displays,Multiprocessing systems,Real time systems,Operating systems,Hardware,Computer networks,Programming profession,Application software","P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, July 1973.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||P. Brinch Hansen, ""The Solo operating system"", Software–Practice and Experience, vol. 6, pp. 141-205, Apr.-June 1976.||P. Brinch Hansen, ""Experience with modular concurrent programming"", IEEE Trans. Software Eng., vol. SE-3, pp. 156-159, Mar. 1977.||P. Brinch Hansen, The Architecture of Concurrent Programs, NJ, Englewood Cliffs:Prentice-Hall, July 1977.||",Network: A Multiprocessor Program
"K.A. Foster&&GTE Sylvania, Inc., Needham Heights, MA, USA|","A hardware failure analysis technique adapted to software yielded three rules for generating test cases sensitive to code errors. These rules, and a procedure for generating these cases, are given with examples. Areas for further study are recommended.",10.1109/TSE.1980.234487,IEEE Transactions on Software Engineering,"Computer aided software engineering,Hardware,Arithmetic,Displays,Software testing,Computer errors,Error correction,Assembly,Logic testing,Failure analysis","J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Engineering, vol. SE-1, June 1975.||Current Trends in Programming Methodology Vol. II Program Validation, NJ, Englewood Cliffs:Prentice-Hall, pp. 44-78, 1977.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, Sept. 1976.||P. Naur, ""Programming by action clusters"", BIT, vol. 9, pp. 250-258, 1969.||J. B. Goodenough and S. L. Gerhart, ""Correction to 'Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, Dec. 1975.||R. J. Lipton and F. G. Sayward, ""The status of research on program mutation"", Dig. Workshop on Software Testing and Test Documentation, 1978-Dec.-18-20.||W. E. Howden, ""Symbolic testing and the dissect symbolic evaluation system"", IEEE Trans. Software Eng., vol. SE-3, July 1977.||",Error Sensitive Test Cases Analysis (ESTCA)
"L.A. Clarke&&Department of Computer and Information Science, University of Massachusetts, Amherst, MA, USA|","This paper describes a system that attempts to generate test data for programs written in ANSI Fortran. Given a path, the system symbolically executes the path and creates a set of constraints on the program's input variables. If the set of constraints is linear, linear programming techniques are employed to obtain a solution. A solution to the set of constraints is test data that will drive execution down the given path. If it can be determined that the set of constraints is inconsistent, then the given path is shown to be nonexecutable. To increase the chance of detecting some of the more common programming errors, artificial constraints are temporarily created that simulate error conditions and then an attempt is made to solve each augmented set of constraints. A symbolic representation of the program's output variables in terms of the program's input variables is also created. The symbolic representation is in a human readable form that facilitates error detection as well as being a possible aid in assertion generation and automatic program documentation.",10.1109/TSE.1976.233817,IEEE Transactions on Software Engineering,"System testing,Humans,Programming profession,Input variables,Linear programming,Documentation,Software reliability,Software testing,Automatic testing,Computer errors","Program Test Method, NJ, Englewood Cliffs:Prentice-Hall, 1973.||R. London, ""A view of program verification"", Proc. Int. Conf. Reliable Software, pp. 534-545, 1975-Apr.||R. S. Boyer, B. Elspas and K. N. Levitt, ""SELECT–A formal system for testing and debugging programs by symbolic execution"", Proc. Int. Conf. Reliable Software, pp. 234-244, 1975-Apr.||L. J. Osterweil and L. D. Fosdick, Data flow analysis as an aid in documentation assertion generation validation and error detection, Sept. 1974.||L. G. Stucki, ""Automatic generation of self-metric software"", Rec. 1973 IEEE Symp. Software Reliability, pp. 94-100.||C. V. Ramamoorthy, R. E. Meeker and J. Turner, ""Design and construction of an automated software evaluation system"", Rec. 1973 IEEE Symp. Software Reliability, pp. 28-37.||J. C. King, ""A new approach to program testing"", Proc. Int. Conf. Reliable Software, pp. 228-233, 1975-Apr.||S. L. Sites, Proving that computer programs terminate clearly, CA, Stanford:Dept. Comput. Sci., Stanford Univ.||M. Davis, ""Hilbert's tenth problem is unsolvable"", Amer. Math. Mon., vol. 80, pp. 233-269, Mar. 1973.||D. C. Knuth, ""An empirical study of FORTRAN programs"", Software—Practice and Experience, vol. 1, pp. 105-133, 1971.||B. Elspas, M. Green, A. Korsak and P. Wong, Solving non linear inequalities associated with computer program paths, Stanford Res. Inst.||R. M. Balzer, ""EXDAMS—Extendable debugging and monitoring system"", 1969 Spring Joint Computer Conf. AFIPS Conf. Proc., vol. 34, pp. 567-580, 1969.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-559, May 1975.||E. F. Miller and R. A. Melton, ""Automated generation of test case datasets"", Proc. Int. Conf. Reliable Software, pp. 51-58, 1975-Apr.||J. C. Huang, Program testing, TX, Houston:Dep. Comput. Sci., Univ. Houston, May 1974.||K. W. Krause, R. W. Smith and M. A. Goodwin, ""Optimal software test planning through automated network analysis"", Rec. 1973 IEEE Symp. Software Reliability, pp. 18-22.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", Proc. Int. Conf. Reliable Software, pp. 493-510, 1975-Apr.||J. Cocke and J. T. Schwartz, Programming Languages and Their Compilers, New York Univ., Courant Inst. Math. Sci.||Altran User's Manual, 1973.||F. Glover, private communications.||G. B. Dantzig, Linear Programming and Extensions, NJ, Princeton:Princeton Univ. Press, 1963.||",A System to Generate Test Data and Symbolically Execute Programs
"S.H. Zweben&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|",A theory of the structural composition of an algoithm is presented which allows the frequencies of occurrence of the individual operators and operands to be estimated. It provides justification for some recent hypotheses which suggest certain functional relationships between properties of algorithms.,10.1109/TSE.1977.231134,IEEE Transactions on Software Engineering,"Frequency estimation,Natural languages,Predictive models,Physics,Testing,Computer languages,Equations,Programming profession,Statistical analysis","M. H. Halstead, ""Natural laws controlling algorithm structures?"", Aus. Comput. Mach. SIGPLAN Notices, vol. 7, pp. 19-26, Feb. 1972.||M. H. Halstead and R. Bayer, ""Algorithm dynamics"", Proc. Ass. Comput. Mach. 73 Annu. Conf..||N. Bulut, Invariant properties of algorithms, Aug. 1973.||N. Bulut, M. H. Halstead and R. Bayer, ""Experimental validation of a structural property of FORTRAN algorithms"", Proc. Ass. Comput. Mach. 74 Annu. Conf., pp. 207-211.||J. Elshoff, ""Measuring PL/1 programs using Halstead's criteria"", Ass. Comput. Mach. SIGPLAN Notices, vol. 11, pp. 38-46, May 1976.||R. Bayer, A theoretical study of Halstead's software phenomenon, May 1972.||G. K. Zipf, Human Behavior and the Principle of Least Effort., MA, Reading:Addison-Wesley, 1949.||D. Clark, ""Algorithm 5 Bessel function I series expansion"", Commun. Ass. Comput. Mach., vol. 3, pp. 240, Apr. 1960.||B. Mandelbrot, Contribution à la théorie mathematique des jeux de communication, fasc. 1953.||",A Study of the Physical Structure of Algorithms
"David E. Morgan&&Computer Communications Networks Group and the Department of Applied Analysis and ComputerScience, University of Waterloo, Waterloo, ONT, Canada|Walter Banks&&Computer Communications Networks Group and the Department of Applied Analysis and ComputerScience, University of Waterloo, Waterloo, ONT, Canada|Dale P. Goodspeed&&Computer Communications Networks Group and the Department of Applied Analysis and ComputerScience, University of Waterloo, Waterloo, ONT, Canada|Richard Kolanko&&Computer Communications Networks Group and the Department of Applied Analysis and ComputerScience, University of Waterloo, Waterloo, ONT, Canada|","In order to help satisfy an apparent need for tools for monitoring the activities of a computer network, a system of special hardware and software, called a Computer Network Monitoring System (CNMS) is being implemented in the University of Waterloo Computer Communications Networks Group (CCNG). The paper discusses the motivation and derivation of the CNMS, then provides functional descriptions of most of the major hardware and software components, illustrates use of the CNMS, and lists experiments and applications. The CNMS consists of: 1) a set of hybrid monitors, each of which is controlled by a locally or remotely located computer; 2) monitor control and data analysis software; 3) a network traffic generator; 4) measurement software in each computer monitored. Each computer to be monitored is attached to a monitor. Telephone lines, possibly different from those of the network, connect the monitors to the controlling computer.",10.1109/TSE.1975.6312855,IEEE Transactions on Software Engineering,"Monitoring,Computers,Software,Hardware,Computer networks,Computer architecture,Generators",,A computer network monitoring system
"B.G. Ryder&&Department of Computer Science, Rutgers University, New Brunswick, NJ, USA|","The proliferation of large software systems written in high level programming languages insures the utility of analysis programs which examine interprocedural communications. Often these analysis programs need to reduce the dynamic relations between procedures to a static data representation. This paper presents one such representation, a directed, acyclic graph named the call graph of a program. We delineate the programs representable by an acyclic call graph and present an algorithm for constructing it using the property that its nodes may be linearly ordered. We prove the correctness of the algorithm and discuss the results obtained from an implementation of the algorithm in the PFORT Verifier [1].",10.1109/TSE.1979.234183,IEEE Transactions on Software Engineering,"Algorithm design and analysis,Data mining,Software systems,Computer languages,Computer science,Communication system control,Flow graphs,Information analysis","B. G. Ryder, ""The PFORT Verifier"", Software Practice and Experience, vol. 4, pp. 359-377, Oct.-Dec. 1974.||F. E. AUlen, ""Interprocedural data flow analysis"", 1974 Proc. IFIPS Conf (Software), pp. 398-402, 1974.||American National Standard FORTRAN, New York:American National Standards Institute, 1966.||""Clarifications of FORTRAN standards-initial progress"", Commun. Ass. Comput. Mach., vol. 12, pp. 289-294.||""Clarifications of FORTRAN standards-second report"", Commun. Ass. Comput. Mach., vol. 14, pp. 628-642.||T. C. Spillman, ""Exposing side–Effects in a PL/I optimizing compiler"", 1971 Proc. IFIPS Conf. (Computer Software), pp. 56-60, 1971.||L. J. Osterweil and L. D. Fosdick, Data flow analysis in software reliability, May 1976.||D. B. Lomet, Data flow analysis in the presence of procedure calls, Nov. 1975.||B. K. Rosen, Data flow analysis for recursive PL-I programs, Jan. 1975.||||A. D. Hall, FDS: A FORTRAN debugging system–Overview and installer's guide, Apr. 1975.||N. L. Schryer, A user's guide to DODES a double precision ordinary differential equation solver, Aug. 1975.||B. D. Eldredge and D. D. Warner, An implementation of the differential correction algorithm.||J. M. Barth, Interprocedural data flow analysis based on transitive closure, Sept. 1976.||",Constructing the Call Graph of a Program
"S.L. Getz&&Department of Computer Science, University of Cape Town, Rondebosch, South Africa|G. Kalligiannis&&Department of Computer Science, University of Cape Town, Rondebosch, South Africa|S.R. Schach&&Department of Computer Science, University of Cape Town, Rondebosch, South Africa|","A very high-level trace for data structures is one which displays a data structure in the shape in which the user conceptualizes it, be it a tree, an array, or a graph. GRAPHTRACE is a system that facilitates the very high-level graphic display of interrelationships among dynamically allocated Pascal records. It offers the user a wide range of options to enable him to ""see"" the data structures on a graphics screen in a format as close as possible to that in which he visualizes it, thereby providing a useful display capability when the user's conceptual model is a directed graph or tree.",10.1109/TSE.1983.236595,IEEE Transactions on Software Engineering,"Data structures,High level languages,Displays,Tree data structures,Programming profession,Africa,Shape,Tree graphs,Graphics,Core dumps","A. M. Addyman, ""A draft proposal for Pascal"", SIGPLAN Notices, vol. 15, pp. 1-67, 1980.||R. I. Becker and S. R. Schach, ""Drawing labelled directed binary graphs on a grid"", Proc. ACM 20th Southeast Regional Conf., 1982.||C. M. Geschke, J. H. Morris and E. H. Satterthwaite, ""Early experiences with Mesa"", Commun. Ass. Comput. Mach., vol. 20, pp. 540-553, 1977.||Pascal User Manual and Report, 1974.||B. A. Myers, Displaying data structures for interactive debugging, 1980.||K. V. Nori, U. Ammann, K. Jensen, H. H. Nageli and C. Jacobi, ""PASCAL-P Implementation Notes"" in Pascal–The Language and its Implementation, New York:Wiley, 1981.||PLOT-10 Terminal Control System User's Manual 062-1475-00, 1974.||S. R. Schach, ""A portable trace for the Pascal heap"", Software–Practice and Experience, vol. 10, pp. 421-426, 1980.||S. R. Schach, ""An interactive graphical array trace"", Quaestiones Informaticae, vol. 2, pp. 23-26, 1982.||C. Wetherell and A. Shannon, ""Tidy drawing of trees"", IEEE Trans. Software Eng., vol. SE-5, pp. 515-519, 1979.||",A Very High-Level Interactive Graphical Trace for the Pascal Heap
"Z. Manna&&Stanford Artificial Intelligence Laboratory, University of Stanford, Stanford, CA, USA|R. Waldinger&&Artificial Intelligence Center, SRI International, Inc., Menlo Park, CA, USA|","Techniques derived from mathematical logic promise to provide an alternative to the conventional methodology for constructing, debugging, and optimizing computer programs. Ultimately, these techniques are intended to lead to the automation of many of the facets of the programming process.",10.1109/TSE.1978.231499,IEEE Transactions on Software Engineering,"Logic programming,Computer errors,Contracts,Mathematics,Artificial intelligence,Debugging,Optimization methods,Automation,Automatic programming,Laboratories","A. V. Aho and J. D. Ullman, The Theory of Parsing Translation and Compiling Vol. 2: Compiling, NJ, Englewood Cliffs:Prentice-Hall, 1973.||E. A. Ashcroft, ""Proving assertions about parallel programs"", J. Comput. Syst. Sci, vol. 10, no. 1, pp. 110-135, Feb. 1975.||E. A. Ashcroft, M. Clint and C. A. R. Hoare, ""Remarks on 'Program proving: Jumps and functions by M. Clint and C. A. R. Hoare'"", Acta Informatica, vol. 6, pp. 317-318, 1976.||E. A. Ashcroft and W. Wadge, ""Lucid a nonprocedural language with iteration"", Commun. Assoc. Comput. Mach., vol. 20, no. 7, pp. 519-526, July 1977.||R. M. Balzer, Automatic programming, Sept. 1972.||A. W. Biermann, ""Approaches to automatic programming"" in Advances in Computers, New York:Academic Press, vol. 15, pp. 1-63, 1976.||A. W. Biermann and R. Krishnaswamy, ""Constructing programs from example computations"", IEEE Trans. Software Eng., vol. 2, pp. 141-153, Sept. 1976.||R. Bird, Programs and Machines–An Introduction to the Theory of Computation, England, London:Wiley, 1976.||R. S. Boyer, B. Elspas and K. N. Levitt, ""SELECT–A formal system for testing and debugging programs by symbolic execution"", Proc. Int. Conf. Reliable Software, pp. 234-245, 1975-Apr.||R. S. Boyer and J S. Moore, ""Proving theorems about LISP functions"", J. Assoc. Comput. Mach., vol. 22, pp. 129-144, Jan. 1975.||R. P. Brent, ""Analysis of the binary Eucidean algorithm"" in New Directions and Recent Results in Algorithms and Complexity, New York:Academic Press, 1976.||J. R. Buchanan and D. C. Luckham, On automating the construction of programs, May 1974.||R. M. Burstall, ""Proving properties of programs by structural induction"", Comput. J., vol. 12, no. 1, pp. 41-48, Feb. 1969.||R. M. Burstall, ""Program proving as hand simulation with a little induction"", 1974 Proc. IFIP Congr., pp. 308-312.||R. M. Burstall and J. Darlington, ""A transformation system for developing recursive programs"", J. Assoc. Comput. Mach., vol. 24, pp. 44-67, Jan. 1977.||E. M. Clarke, ""Programming language constructs for which it is impossible to obtain good Hoare-like axiom systems"", Proc. 4th Symp. Principles of Programming Languages, pp. 10-20, 1977-Jan.||M. Clint and C. A. R. Hoare, ""Program proving: jumps and functions"", Acta Informatica, vol. 1, pp. 214-224, 1972.||S. A. Cook, Soundness and completeness of an axiom system for program verification, June 1976.||O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic Press, 1972.||J. Darlington, ""Applications of program transformation to program synthesis"", Proc. IRIA Symp. Proving and Improving Programs, pp. 133-144, 1975-July.||J. Darlington and R. M. Burstall, ""A system which automatically improves programs"", Acta Informatica, vol. 6, no. 1, pp. 41-60, 1976.||||R. A. DeMillo, R. J. Lipton and A. J. Perlis, ""Social processes and proofs of theorems and programs"", Proc. 4th Symp. Principles of Programming Languages, pp. 206-214, 1977-Jan.||N. Dershowitz and Z. Manna, ""On automating structured programming"", Proc. IRIA Symp. Proving and Improving Programs, pp. 167-193, 1975-July.||N. Dershowitz and Z. Manna, ""The evolution of programs: A system for automatic program modification"", IEEE Trans. Software Eng., vol. 3, pp. 377-385, Nov. 1977.||L. P. Deutsch, An interactive program verifier, May 1973.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Assoc. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||E. W. Dijkstra, ""Programming: From craft to scientific discipline"", Int. Computing Symposium, pp. 23-30, 1977.||J. Earley, ""Toward an understanding of data structures"", Commun. Assoc. Comput. Mach., vol. 14, no. 10, pp. 617-627, Oct. 1971.||B. Elspas, K. N. Levitt and R. J. Waldinger, An interactive system for the verification of computer programs, Sept. 1973.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. Applied Math., vol. 19, pp. 19-32, 1967.||N. Francez and A. Pnueli, A proof method for cyclic programs, Nov. 1975.||S. L. Gerhart, ""Correctness-preserving program transformations"", Proc. 2nd Symp. on Principles of Programming Languages, pp. 54-66, 1975-Jan.||S. L. Gerhart and L. Yelowitz, ""Observations of fallibility in applications of modern programming methodologies"", IEEE Trans. Software Eng., vol. 2, pp. 195-207, Sept. 1976.||S. M. German and B. Wegbreit, ""A synthesizer of inductive assertions"", IEEE Trans. Software Eng., vol. 1, pp. 68-75, Mar. 1975.||D. I. Good, R. L. London and W. W. Bledsoe, ""An interactive program verification system"", IEEE Trans. Software Eng., vol. 1, pp. 59-67, Mar. 1975.||C. Green, ""The design of PSI program synthesis system"", Proc. 2nd Int. Conf. Software Eng., pp. 4-18, 1976-Oct.||S. A. Greibach, Theory of Program Structures: Schemes Semantics Verification, Germany, Berlin:Springer-Verlag, 1975.||J. V. Guttag, E. Horowitz and D. R. Musser, Abstract data types and software validation, Aug. 1977.||S. Hardy, ""Synthesis of LISP programs from examples"", Proc. 4th Int. Joint Conf. on Artificial Intelligence, pp. 240-245, 1975-Sept.||C. A. R. Hoare, ""An axiomatic basis of computer programming"", Commun. Assoc. Comput. Mach., vol. 12, pp. 583, Oct. 1969.||C. A. R. Hoare, ""Proof of correctness of data representations"", Acta Informatica, vol. 1, no. 4, pp. 271-281, 1972.||C. A. R. Hoare, ""Parallel programming: An axiomatic approach"", Comput. Languages, vol. 1, no. 2, pp. 151-160, June 1975.||T. E. Hull, W. H. Enright and A. E. Sedgwick, ""The correctness of numerical algorithms"", Proc. Conf. Proving Assertions about Programs, pp. 66-7 3, 1972-Jan.||S. Igarashi, R. L. London and D. C. Luckham, ""Automatic program verification 1: A logical basis and its implementation"", Acta Informatica, vol. 4, no. 2, pp. 145-182, May 1975.||S. M. Katz and Z. Manna, ""Logical analysis of programs"", Commun. Assoc. Comput. Mach., vol. 19, no. 4, pp. 188-206, Apr. 1976.||J. C. King, A program verifier, 1969.||J. C. King, ""Symbolic execution and program testing"", Commun. Assoc. Comput. Mach., vol. 19, no. 7, pp. 385-391, July 1976.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 1, 1968.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 2, 1969.||D. E. Knuth, ""Structured programming with go to statements"", Comput. Surveys, vol. 6, no. 4, pp. 261-301, Dec. 1974.||B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell and G. J. Popek, ""Report on the programming language EUCLID"", SIGPLAN Notices, vol. 12, no. 2, Feb. 1976.||B. H. Liskov, ""An introduction to CLU"" in New Directions in Algorithmic Languages, France, Paris:Institut de Recherche D'Informatique et d'Automatique, pp. 139-156, 1976.||J. R. Low, Automatic Coding: Choice of Data Structures, Switzerland, Basle:Birkhauser Verlag, 1976.||D. C. Luckham and N. Suzuki, ""Proof of termination within a weak logic of programs"", Acta Informatica, vol. 8, no. 1, pp. 21-36, 1977.||Z. Manna, ""Mathematical theory of partial correctness"", J. Comput. Syst. Sci, vol. 5, no. 3, pp. 239-253, June 1971.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||Z. Manna and A. Pnueli, ""Formalization of properties of functional programs"", J. Assoc. Comput. Mach., vol. 17, no. 3, pp. 555-569, July 1970.||Z. Manna and R. Waldinger, ""Knowledge and reasoning in program synthesis"", Artificial Intelligence, vol. 6, no. 2, pp. 175-208, 1975.||Z. Manna and R. Waldinger, ""Is 'sometime' sometimes better than 'always'? Intermittent assertions in proving program correctness"", Commun. Assoc. Comput. Mach., vol. 21, no. 2, pp. 159-172, Feb. 1978.||J. McCarthy, ""Towards a mathematical science of computation"", Proc. of IFIP Congress 1962, pp. 21-28, 1962.||J. McCarthy, ""A basis for a mathematical theory of computation"" in Computer Programming and Formal Systems, The Netherlands, Amsterdam:North-Holland, pp. 33-70, 1963.||J. H. Morris, ""Another recursion induction principle"", Commun. Assoc. Comput. Mach., vol. 14, no. 5, pp. 351-354, May 1971.||J. H. Morris and B. Wegbreit, ""Subgoal induction"", Commun. Assoc. Comput. Mach., vol. 20, no. 4, pp. 209-222, Apr. 1977.||D. C. Oppen and S. A. Cook, ""Proving assertions about programs that manipulate data structures"", Proc. 7th Annu. Symp. Theory of Computing, pp. 107-116, 1975-May.||S. Owicki and D. Gries, ""Verifying properties of parallel programs: An axiomatic approach"", Commun. Assoc. Comput. Mach., vol. 19, no. 5, pp. 279-285, May 1976.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. Assoc. Comput. Mach., vol. 15, no. 5, pp. 330-336, May 1972.||M. S. Paterson and C. E. Hewitt, ""Comparative schematology"", Rec. Proj. MAC Conf. Concurrent Systems and Parallel Computation, pp. 119-228, 1970-Dec.||V. Pratt, ""Semantical considerations on Floyd-Hoare Logic"", Proc. 17th Annu. Symp. Foundations of Computer Science, pp. 109-121, 1976-Oct.||J. T. Schwartz, ""Automatic and semiautomatic optimization of SETL"", Proc. Symp. on Very High Level Languages, pp. 43-49, 1974-Mar.||J. Schwarz, ""Event-based reasoning–a system for proving correct termination of programs"", Proc. 3rd Int. Colloqu. Automata Languages and Programming, pp. 131-146, 1976-July.||L. Siklossy, ""The synthesis of programs from their properties and the insane heuristic"", Proc. 3rd Texas Conf. Computing Systems, 1974.||R. L. Sites, Proving that computer programs terminate cleanly, May 1974.||J. Spitzen, K. N. Levitt and L. Robinson, ""An example of hierarchical design and proof"", Commun. Assoc. Comput. Mach..||T. A. Standish, D. C. Harriman, D. F. Kibler and J. M. Neighbors, Improving and refining programs by program manipulation, Feb. 1976.||P. D. Summers, ""A methodology for LISP program construction from examples"", J. Assoc. Comput. Mach., vol. 24, no. 1, pp. 161-175, Jan. 1977.||G. J. Sussman, A Computer Model of Skill Acquisition, New York:American Elsevier, 1975.||N. Suzuki, ""Verifying programs by algebraic and logical reduction"", Proc. Int. Conf. Reliable Software, pp. 473-481, 1975-Apr.||J. W. Ulrich and R. Moll, ""Program synthesis by analogy"", Proc. SIGART-SIGPLAN Conf. Artificial Intelligence and Programming Languages, pp. 22-28, 1977-Aug.||F. W. von Henke and D. C. Luckham, ""A methodology for verifying programs"", Proc. Int. Conf. Reliable Software, pp. 156-164, 1975-Apr.||R. J. Waldinger, ""Achieving several goals simultaneously"" in Machine Intelligence 8: Machine Representations of Knowledge, England, Chichester:Ellis Horwood, pp. 94-136, 1977.||R. J. Waldinger and K. N. Levitt, ""Reasoning about programs"", Artificial Intelligence, vol. 5, no. 3, pp. 235-316, 1974.||A. Wang, ""An axiomatic basis for proving total correctness of goto-programs"", BIT, vol. 16, pp. 88-102, 1976.||B. Wegbreit, ""Goal-directed program transformation"", Proc. 3rd Symp. Principles of Programming Languages, pp. 153-170, 1976-Jan.||N. Wirth, ""On the composition of well-structured programs"", Comput. Surveys, vol. 6, no. 4, pp. 247-259, Dec. 1974.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of ALPHARD programs"", IEEE Trans. Software Eng., vol. 2, pp. 25 3-265, Dec. 1976.||",The Logic of Computer Programming
"R.N. Taylor&&Space and Military Applications Division, Boeing Computer Services, Inc., Seattle, WA, USA|L.J. Osterweil&&Department of Computer Science, University of Colorado, Boulder, CO, USA|","Algorithms are presented for detecting errors and anomalies in programs which use synchronization constructs to implement concurrency. The algorithms employ data flow analysis techniques. First used in compiler object code optimization, the techniques have more recently been used in the detection of variable usage errors in dngle process programs. By adapting these existing algorithms, the sane classes of variable usage errors can be detected in concurrent process programs. Important classes of errors unique to concurrent process programs are also described, and algorithms for their detection are presented.",10.1109/TSE.1980.234488,IEEE Transactions on Software Engineering,"Data analysis,Concurrent computing,Computer languages,Military computing,Displays,Algorithm design and analysis,Program processors,Optimizing compilers,Object detection,Error analysis","L. J. Osterweil and L. D. Fosdick, ""DAVE–A validation error detection and documentation system for FORTRAN programs"", Software–Practice and Experience, vol. 6, pp. 473-486, 1976.||P. Brinch Hansen, ""The programming language concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||N. Wirth, ""Modula: A language for modular multiprogramming"", Sbftware–Practice and Experience, vol. 7, pp. 3-35, Jan. 1977.||""DoD Requirements for High Order Computer Programming Languages"", STEELMAN, June 1978.||F. H. Martin, ""HAL/S–The avionics programming system for shuttle"", Proc. AIAA Conf Computers in Aerospace, pp. 308-318, 1977-Nov.||T. A. Straeter, ""Research flight software engineering and MUST–An integrated system of support tools"", proc. COMPSAC 77, pp. 392-396, 1977-Nov.||L. D. Fosdick and L. J. Osterweil, ""Data flow analysis in software reliability"", Computing Surveys, vol. 8, pp. 305-330, Sept. 1976.||R. N. Taylor and L. J. Osterweil, ""A facility for verification testing and documentation of concurrent process software"", Proc. COMPSAC 78, pp. 36-41, 1978-Nov.||F. E. Allen, ""Program optimization"" in Annu. Rev. Automatic Programming, New York, pp. 239-307, 1969.||F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Ass. Comput. Mach., vol. 19, pp. 137-147, Mar. 1976.||M. S. Hecht and J. D. Ullman, ""A simple algorithm for global data flow analysis problems"", SIAM J. Computing, vol. 4, pp. 519-532, Dec. 1975.||L. J. Osterweil, The detection of unexecutable program paths through static data flow analysis, 1977.||W. Riddle, G. Bristow, C. Drey and B. Edwards, ""Anomaly detection in concurrent programs"", Proc. 4th Int. Conf. Software Eng., 1979-Sept.||J. L. Peterson, ""Petri nets"", Computing Surveys, vol. 9, pp. 223-252, Sept. 1977.||J. H. Reif, ""Data flow analysis of communicating processes"", Proc. 6th Annu. ACM Symp. Principles of Programming Languages, 1979-Feb.||J. M. Barth, ""A practical interprocedural data-flow analysis algorithm"", Commun. Ass. Comput. Mach., vol. 21, pp. 724-736, Sept. 1978.||",Anomaly Detection in Concurrent Software by Static Data Flow Analysis
"W. Miller&&Department of Computer Science, Pennsylvania State University, University Park, PA, USA|D.L. Spooner&&Department of Computer Science, Pennsylvania State University, University Park, PA, USA|","For numerical programs, or more generally for programs with floating-point data, it may be that large savings of time and storage are made possible by using numerical maximization methods instead of symbolic execution to generate test data. Two examples, a matrix factorization subroutine and a sorting method, illustrate the types of data generation problems that can be successfully treated with such maximization techniques.",10.1109/TSE.1976.233818,IEEE Transactions on Software Engineering,"Automatic testing,Computer science,Algorithms,Software testing,System testing,Software systems,Roundoff errors,Sorting,Arithmetic,Iterative methods","T. Hull, ""The correctness of numerical algorithms"", Proc. ACM Conf. Proving Assertions about Programs, 1972-Jan.-6-7.||A. Tarski, A Decision Method for Elementary Algebra and Geometry, CA, Berkeley:University of California Press, 1951.||W. Miller, ""Software for roundoff analysis"", Ass. Comput. Mach. Trans. Math. Software, vol. 1, pp. 108-128, 1975.||W. Miller and D. Spooner, ""Software for roundoff analysis II"", Ass. Comput. Mach. Trans. Math. Software.||W. Kahan, ""One numerical analyst's experience with one symbol manipulator"", SIAM Rev., vol. 16, pp. 129, 1974.||D. Stoutemyer, Automatic error analysis using computer algebraic manipulation.||C. Ramamoorthy and S.-B. Ho, ""Testing large software with automated software evaluation systems"", IEEE Trans. Software Eng., vol. 1, pp. 46-58, 1975.||C. Moler, ""Algorithm 423 linear equation solver"", Commun. Ass. Comput. Mach., vol. 15, pp. 274, Apr. 1972.||R. Boyer, B. Elspas and K. Levitt, ""SELECT–A formal system for testing and debugging programs by symbolic execution"", Proc. 1975 Int. Conf. Reliable Software.||SIGPLAN Notices, vol. 10, pp. 234-245, June 1975.||L. Clarke, A system to generate test data and symbolically execute programs, Feb. 1975.||J. King, Symbolic execution and program testing.||Numerical Methods for Constrainted Optimization, New York:Academic, 1974.||W. Swann, ""Direct search methods"" in Numerical Methods for Unconstrained Optimization, New York:Academic, pp. 13-28, 1972.||W. Swann, ""Constrained optimization by direct search"" in Numerical Methods for Unconstrained Optimization, New York:Academic, pp. 191-217, 1972.||A. Aho, J. Hopcroft and J. Ullman, The Design and Analysis of Computer Algorithms, MA, Reading:Addison-Wesley, 1974.||",Automatic Generation of Floating-Point Test Data
"W.V. Camp&&Department of Computer Science, Oregon State University, Corvallis, OR, USA|T.G. Lewis&&Department of Computer Science, Oregon State University, Corvallis, OR, USA|","Three contemporary pseudorandom number generators: Tausworthe, GFSR, and Lehmer are implemented on a 16-bit minicomputer. Practical comparisons are made in terms of 1) ease of implementation, 2) length of period, 3) execution speed, 4) program storage space, and 5) statistical quality. Although the results are conjectured to apply to any 16-bit word, limited memory capacity, and limited instruction set computer, the results for a PDP-11/05 indicate that the Lehmer generator satisfies criterion 5) but is slow and difficult to implement. The GFSR generator satisfies criteria 2) and 3) but is large, and the Tausworthe generator satisfies criteria 1) and 4) but can be statistically marginal.",10.1109/TSE.1977.231135,IEEE Transactions on Software Engineering,"Microcomputers,Random number generation,Shift registers,Polynomials,Ash,Computer aided instruction,Testing,Computer science,Feedback","R. C. Tausworthe, ""Random numbers generated by linear recurrence modulo two"", Math. Comput., vol. 19, pp. 201-209, 1965.||T. G. Lewis and W. H. Payne, ""Generalized feedback shift register pseudorandom number algorithm"", J. Ass. Comput. Mach., vol. 20, pp. 456-468, July 1973.||T. E. Hull and A. R. Dobell, ""Random number generators"", SIAM Rev., vol. 4, pp. 230-254, July 1962.||D. W. Hutchinson, ""A new uniform pseudo-random number generator"", Commun. Ass. Comput. Mach., vol. 9, pp. 432-433, June 1966.||F. R. B. Whittlesey, ""Comparison of the correlational behavior of random number generators for the IMB 360"", Commun. Ass. Comput. Mach., vol. 11, pp. 641-644, Sept. 1968.||W. V. Camp, Generating and testing pseudorandom numbers, May 1974.||M. G. Kendall and B. B. Smith, ""Randomness and the random sampling numbers"", Royal Statistical Society London J., vol. 101, pp. 147-166, 1938.||R. C. White, ""Experiments with digital computer simulations of pseudorandom noise generators"", IEEE Trans. Electron. Comput., vol. 16, pp. 355-357, June 1967.||D. E. Knuth, The Art of Computer Programming Vol. 2/Seminumerical Algorithms, New York:Addison-Wesley, 1969.||G. U. Yule, ""A test of Tippett's random sampling numbers"", Royal Statistical Society London J., vol. 101, pp. 167-172, 1938.||F. Gruenberger and A. M. Mark, ""The d2 test of random digits"", Math. Tables Other Aids Comput., vol. 5, pp. 109-110, 1951.||P. A. W. Lewis, A. S. Goodman and J. M. Miller, ""A pseudorandom number generator for the system/360"", IBM Syst. J., no. 2, pp. 136-146, 1969.||M. D. MacLaren and G. Massaglia, ""Uniform random number generator"", J. Ass. Comput. Mach., vol. 12, pp. 83-89, Jan. 1965.||PDP 11/05 Processor Handbook, Digital Equipment Corporation, 1973.||E. J. Watson, ""Primitive polynomials (mod 2)"", Math. Comput, vol. 16, pp. 368-369, 1962.||D. Y. Downham and F. D. F. Roberts, ""Multiplicative congruential pseudo-random number generator"", Comput. J., vol. 10, pp. 74-77, 1961.||H. Hellerman, Digital Computer System Principles, New York:McGraw-Hill, pp. 301-310, 1967.||T. G. Lewis, Distribution Sampling for Computer Simulation, MA, Lexington:Lexington Books, 1975.||S. Gorenstein, ""Testing a random number generator"", Ann. Math. Stat., vol. 15, pp. 58-59, 1944.||R. K. Pathria, ""A statistical study of randomness among the first 10000 digits of Π"", Math. Comput., vol. 16, pp. 188-197, Apr. 1962.||R. P. Chambers, ""Random number generation on digital computers"", IEEE Spectrum, pp. 48-56, Feb. 1967.||M. Greenbuger, ""An a priori determination of serial correlation in computer generated random numbers"", Math. Comput., vol. 15, pp. 383-389, 1961.||R. D. Carmichael, Bull. Amer. Math. Soc., vol. 16, pp. 232-238, 1910.||J. P. R. Tootill, W. D. Robinson and P. Griese, ""The runs up-and‑down performance of Tausworthe pseudo-random number generator"", J. Ass. Comput. Mach., pp. 381-399, 1971.||",Implementing a Pseudorandom Number Generator on a Minicomputer
"John D. Musa&&Bell Laboratories, Whippany, NJ, USA|","The theory permits the estimation, in advance of a project, of the amount of testing in terms of execution time required to achieve a specified reliability goal [stated as a mean time to failure (MTTF)]. Execution time can then be related to calendar time, permitting a schedule to be developed. Estimates of execution time and calendar time remaining until the reliability goal is attained can be continually remade as testing proceeds, based only on the length of the execution time intervals between failures. The current MTTF and the number of errors remaining can also be estimated. Maximum likelihood estimation is employed, and confidence intervals are also established. The foregoing information is obviously very valuable in scheduling and monitoring the progress of program testing. A program has been implemented to compute the foregoing quantities. The reliability model that has been developed can be used in making system tradeoffs involving software or software and hardware components. It also provides a soundly based unit of measure for the comparative evaluation of various programming techniques that are expected to enhance reliability. The model has been applied to four medium-sized software development projects, all of which have completed their life cycles.",10.1109/TSE.1975.6312856,IEEE Transactions on Software Engineering,"Software reliability,Testing,Software,Computational modeling,Calendars,Error correction",,A theory of software reliability and its application
"J.C. Huang&&Department of Computer Science, University of Houston, Houston, TX, USA|","A data flow anomaly in a program iB an indication that a programming error might have been committed. This paper descibes a method for detecting such an anomiay by means of program instrumentation. The method is conceptually simple, easy to use, easy toimplement on a computer, and can be applied in conjunction with a conventional program test to achieve increased error-detection capability.",10.1109/TSE.1979.234184,IEEE Transactions on Software Engineering,"Instruments,Testing,Computer errors,Data analysis,Error analysis,Computer science,Information analysis,Performance analysis","L. D. Fosdick and L. J. Osterweil, ""Data flow analysis in software reliability"", ACM Computing Surveys, vol. 8, pp. 305-330, Sept. 1976.||A. V. Aho and J. D. Ullman, The Theory ofParsing Translation and Compiling Vol. II: Compiling, NJ, Englewood Cliffs:Prentice-HalL, 1972.||M. Schafer, A Mathematical Theory of Global Program Optimization, NJ, Englewood Cliffs:Prentice-HalL, 1973.||M. S. Hecht and J. D. Ullman, ""A simple algorithm for global data flow analysis problems"", SIAM J. Computing, vol. 4, pp. 519-532, Dec. 1975.||K. Kennedy, ""A global flow analysis algorithm"", Int J. Comput. Math., vol. 3, pp. 5-15, 1971.||G. A. KildaLl, ""A unified approach to global program optimization"", Conf. Record ACM Symp. on Principles of Programming Languages, pp. 194-206, 1973.||J. D. Ullman, ""Fast algorithm for the elimination of common subexpressions"", Acta Informatica, vol. 2, pp. 191-213, 1973.||F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. ACM, vol. 19, pp. 137-147, Mar. 1976.||A. V. Aho and J. D. Ullman, The Theory ofParsing Translation and Compiling Vol. I: Parsing, NJ, Englewood Cliffs:Prentice‑Hall, 1973.||M. A. Harrison, Introduction to Switching and Automata Theory, NY, New York:McGraw-Hill, 1965.||T. L. Booth, Sequential Machines and Automata Theory, NY, New York:Wiley, 1967.||N. J. A. Sloane, ""On fmding the paths through a network"", Bell Syst. Tech. J., vol. 51, pp. 371-390, Feb. 1972.||A. G. Lunts, ""A method of analysis of finite automata"", Soviet Physics–Doklady, vol. 10, pp. 102-103, 1965.||C. Berge, Theory of Graphs and Its Applications, NY, New York:Wiley, 1962.||F. Harary, Graph Theory, MA, Reading:Addison-Wesley, 1969.||J. C. Huang, ""An approach to program testing"", ACM Computing Surveys, vol. 7, pp. 113-128, Sept. 1975.||L. Clarke, ""A system to generate test data and symbolically execute program"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept 1976.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-559, May 1975.||L. J. Osterweil and L. D. Fosdick, ""DAVE–A Fortran program analysis system"", Proc. Comput. Sci. and Statistics 8th Annual Symp. on the Interface, pp. 329-335, 1975.||L. J. Osterweil and L. D. Fosdick, ""DAVE–A validation error detection and documentation system for Fortran programs"", Software-Practice and Experience, vol. 6, pp. 473-486, 1976.||E. C. RusseLl and G. Estrin, ""Measurement based automatic analysis of Fortran programs"", Proc. 1969 AFIPS Spring Joint Comput. Conf., vol. 34, 1969.||B. Bussell and R. A. Koster, ""Instrumenting computer systems and their programs"", Proc 1970 AFIPS Fall Joint Comput. Conf., vol. 37, pp. 525-534, 1970.||L. G. Stucki, ""Automatic generation of self-metric software"", Proc. 1973 IEEE Symp. on Comput. Software Reliability, pp. 94-100, 1973-Apr.||L. G. Stucki, ""A prototype automatic program testing tool"", Proc. 1972 AFIPS Fall Joint Comput. Conf., vol. 41, pp. 829-836, 1972.||J. R. Brown, A. J. DeSalvio, D. E. Heine and J. G. Purdy, ""Automatic software quality assurance"" in Program Test Methods, NJ, Englewood Cliffs:Prentice-Hall, pp. 181-203, 1973.||M. R. Paige and J. P. Benson, ""The use of software probes in testing FORTRAN programs"", Comput., vol. 7, pp. 40-47, July 1974.||C. V. Ramamoorthy and S. B. F. Ho, ""Testing large software with automated software evaluation systems"", IEEE Trans. Software Eng., vol. SE-1, pp. 46-58, Mar. 1975.||B. C. Hodges and J. P. Ryan, ""A system for automatic software evaluation"", Proc. Second Int. Conf on Software Eng., pp. 617-623, 1976-Oct.||J. C. Huang, ""Program instrumentation and software testing"", Comput., vol. 11, pp. 25-32, April 1978.||",Detection of Data Flow Anomaly Through Program Instrumentation
"P. Schulthess&&Institute for Informatics, Swiss Federal Institute of Technology, Zurich, Switzerland|C. Jacobi&&Institute for Informatics, Swiss Federal Institute of Technology, Zurich, Switzerland|",An exceptionally compact Pascal Compiler was written. We explain how.,10.1109/TSE.1983.236596,IEEE Transactions on Software Engineering,"Anatomy,Binary trees,Program processors,Statistics,Jacobian matrices,Informatics,Design optimization,Memory,Computer architecture,Writing","A. Aho and J. Ullman, Principles of Compiler Design, New York:McGraw-Hill, 1980.||U. Ammann, Die Entwicklung eines Pascal Compilers nach der Methode des Strukturierten Programmierens, 1975.||B 7800 Information Processing Systems, Detroit:Burroughs Corp., 1979.||G. Cox and J. Tobias, Pascal 8000-IBM 360/370 Version (1977), Australian Atomic Energy Commission, 1977.||T. Hikita and K. Ishihata, Pascal 8000, Univ. Tokyo, 1977.||C. Jacobi, Pascal P4 compiler source text, Informatik, Swiss Federal Inst. Technol., 1976.||R. Marty, The compiler construction system COPS, Berichte des Instituts für Informatik, Univ. Zuerich, 1980.||H. H. Naegeli, Der Stammcompiler: Ein Beitrag zum Uebertragungsproblem, 1978.||H. H. Nagel, Pascal for the DECSystem-10: Experiences and further Plans, Informatik, Univ. Hamburg, 1975.||P. Schulthess, Ein Pascal-System basierend auf einer interpretierten Deskriptorarchitektur, 1978.||P. Schulthess and F. Vonaesch, ""OPA–A new architecture for Pascal-like languages"", Comput. Architecture News, vol. 10, no. 9, Dec. 1982.||N. Wirth, Pascal-S: A subset and its implementation, Informatik, Swiss Federal Inst. Technol., 1975.||Pascal User Manual and Report, 1975.||",Anatomy of a Small Pascal Compiler
"S. Kumar Shrivastava&&Computing Laboratory, University of Newcastle, Newcastle-upon-Tyne, UK|J.-P. Banatre&&Institut de Recherche en Informatique et Systèmes Aléatoires (IRISA), Universite de Rennes 1, Rennes, France|","Basic error recovery problems between interacting processes are first discussed and the desirability of having separate recovery mechanisms for cooperation and competition is demonstrated. The paper then concentrates on recovery mechanisms for processes competing for the use of the shared resources of a computer system. Appropriate programming language features are developed based on the class and inner features of SIMULA, and on the structuring concepts of recovery blocks and monitors.",10.1109/TSE.1978.231500,IEEE Transactions on Software Engineering,"Resource management,Computer errors,Computer languages,Redundancy,Computer displays,Operating systems,Motion detection,Software testing,System testing","J. J. Horning, H. C. Lauer, P. M. Melliar-Smith and B. Randell, ""A program structure for error detection and recovery"" in Lecture Notes in Computer Science, New York:Springer, vol. 16, pp. 177-193, 1974.||B. Randell, ""System structure for software fault tolerance"", IEEE Trans. Software Eng., vol. SE-1, pp. 220-232, June 1975.||T. Anderson and R. Kerr, ""Recovery blocks in action: A system supporting high reliability"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||J. B. Goodenough, ""Exception handling: Issues and proposed notation"", Commun. Ass. Comput. Mach., vol. 18, pp. 683-696, Dec. 1975.||D. L. Parnas and H. Wurges, ""Response to undesired events in software systems"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||P. M. Melliar-Smith and B. Randell, ""Software reliability: The role of programmed exception handling"", Proc. ACM Conf. Language Design for Reliable Software, pp. 95-100, 1977-Mar.||J. J. Horning and B. Randell, ""Process structuring"", ACM Comput. Surveys, vol. 5, pp. 5-29, Mar. 1973.||D. L. Russel and T. H. Bredt, ""Error resynchronization in producer-consumer systems"", Proc. 5th ACM Operating System Symp., pp. 106-113, 1975-Nov.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||S. K. Shrivastava, ""Systematic programming of scheduling algorithms"", Software-Practice and Experience, vol. 6, pp. 357-370, 1976.||O. J. Dahl, B. Myhrhaug and K. Nygaard, The SIMULA 67 common base language, Norway, Oslo:Norwegian Computing Center, 1970.||C. A. R. Hoare, ""The structure of an operating system"", Proc. Int. Summer School Language Hierarchies and Interfaces, 1975-Aug.||P. B. Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||",Reliable Resource Allocation Betvveen Unreliable Processes
"M.R. Woodward&&Department of Computational and Statistical Science, University of Liverpool, Liverpool, UK|D. Hedley&&Department of Computational and Statistical Science, University of Liverpool, Liverpool, UK|M.A. Hennell&&Department of Computational and Statistical Science, University of Liverpool, Liverpool, UK|","There are a number of practical difficulties in performing a path testing strategy for computer programs. One problem is in deciding which paths, out of a possible infinity, to use as test cases. A hierarchy of structural test metrics is suggested to direct the choide and to monitor the coverge of test paths. Another problem is that many of the chosen paths may be infeasible in the sense that no test data can ever execute them. Experience with the use of ""allegations"" to circumvent this problem and prevent the static generation of many infeasible paths is reported.",10.1109/TSE.1980.230473,IEEE Transactions on Software Engineering,"H infinity control,Software testing,Performance analysis,Performance evaluation,Computerized monitoring,Councils,Reliability theory,Feedback,Imaging phantoms,Linear code","J. R. Brown, Practical applications of automated software tools, Sept. 1972.||J. R. Brown and E. C. Nelson, Functional programming, July 1977.||T. S. Chow, ""Testing software design modeled by finite-state machines"", IEEE Trans. Software Eng., vol. SE-4, pp. 178-187, May 1978.||B. Ford and D. K. Sayers, ""Developing a single numerical algorithms library for different machine ranges"", ACM Trans. Mathematical Software, vol. 2, pp. 115-131, June 1976.||H. N. Gabow, S. N. Maheshwari and L. J. Osterweil, ""On two problems in the generation of program test paths"", IEEE Trans. Software Eng., vol. SE-2, pp. 227-231, Sept. 1976.||M. A. Hennell, D. Hedley and M. R. Woodward, ""Experience with an Algol 68 numerical algorithms testbed"", Proc. Polytech. Inst. of New York Symp. Comput. Software Eng., vol. XXIV, pp. 457-463, 1976-Apr.||M. A. Hennell, D. Hedley and M. R. Woodward, ""Quantifying the test effectiveness of Algol 68 programs"", Proc. Strathclyde Univ. Conf. Algol 68 ACM Sigplan Notices, vol. 12, pp. 36-41, 1977-June.||M. A. Hennell, M. R. Woodward and D. Hedley, ""On program analysis"", Information Proc. Lett., vol. 5, pp. 136-140, 1976-Nov.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-559, May 1975.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-215, Sept. 1976.||W. E. Howden, ""An evaluation of the effectiveness of symbolic testing"", Software-Practice and Experience, vol. 8, pp. 381-397, 1978.||J. C. Huang, ""An approach to program testing"", ACM Computing Surveys, vol. 7, pp. 113-128, Sept. 1975.||E. F. Miller, ""Program testing techniques"", COMPSAC 77, 1977-Nov.||J. Osterweil, Allegations as aids to static program testing.||S. Pimont and J.-C. Rault, ""A software reliability assessment based on a structural and behavioural analysis of programs"", Proc. 2nd Int. Conf. Software Eng., pp. 486-491, 1976-Oct.||",Experience with Path Analysis and Testing of Programs
"H.N. Gabow&&Department of Computer Science, University of Colorado, Boulder, CO, USA|S.N. Maheshwari&&Department of Computer Science, University of Colorado, Boulder, CO, USA|L.J. Osterweil&&Department of Computer Science, University of Colorado, Boulder, CO, USA|","In this paper we analyze the complexity of algorithms for two problems that arise in automatic test path generation for programs: the problem of building a path through a specified set of program statements and the problem of building a path which satisfies impossible-pairs restrictions on statement pairs. These problems are both reduced to graph traversal problems. We give an efficient algorithm for the first, and show that the second is NP-complete.",10.1109/TSE.1976.233819,IEEE Transactions on Software Engineering,"Automatic testing,Buildings,Algorithm design and analysis,Computer science,Software engineering,Flow graphs","K. A. Krause, R. W. Smith and M. A. Goodwin, ""Optimal software test planning through automated network analysis"", Proc. 1973 IEEE Symp. Computer Software Reliability, pp. 18-22, 1973.||C. V. Ramamoorthy and S.-B. F. Ho, ""Testing large software with automated software evaluation systems"", IEEE Trans. Software Engineering, vol. SE-1, pp. 46-58, Mar. 1975.||B. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, vol. 19, pp. 48-59, May 1973.||L. Osterweil, Depth first search techniques and efficient methods for creating test paths, Aug. 1975.||R. H. Hoffman and R. W. Smith, Advanced techniques in the generation of connectivity matrices for software network analysis, TX, Houston:TRW Systems Group, May 1974.||J. C. Huang, ""An approach to program testing"", Ass. Comput. Mach. Comput. Surveys, vol. 7, pp. 113-128, Sept. 1975.||L. Clarke, A system to generate test data and symbolically execute programs, Feb. 1975.||W. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput. (Special Issue on Fault-Tolerant Computing), vol. C-24, pp. 554-560, May 1975.||L. Osterweil and L. D. Fosdick, Data flow analysis as an aid in documentation assertion generation validation and error detection, Sept. 1974.||J. C. King, ""A new approach to program testing"", Proc. 1975 Int. Conf. Reliable Software, pp. 228-233, 1975.||R. M. Karp, ""Reducibility among combinatorial problems"" in Complexity of Computer Computations, New York:Plenum, pp. 85-103, 1972.||F. Harary, Graph Theory, MA, Reading:Addison-Wesley, 1969.||D. E. Knuth, The Art of Computer Programming vol. 1 Fundamental Algorithms, MA, Reading:Addison-Wesley, 1968.||R. E. Tarjan, ""Depth first search and linear graph algorithms"", SIAM J. Comput., vol. 1, pp. 146-160, June 1972.||L. Clarke, Automatic generation of test data for computer programs.||",On Two Problems in the Generation of Program Test Paths
"D. Gries&&Department of Computer Science, Cornell University|",,10.1109/TSE.1977.231136,IEEE Transactions on Software Engineering,"Tin,Computer errors,Error correction,Computer science",,"Correction to ""An Illustration of Current Ideas on the Derivation of Correctness Proofs and Correct Programs"""
"Sanat K. Basu&&Department of Computer Sciences, University of Texas, Austin, Austin, TX, USA|Raymond T. Yeh&&Department of Computer Sciences, University of Texas, Austin, Austin, TX, USA|",The authors investigate the strong verification of programs using the concept of predicate transformer introduced by Dijkstra (1974). They show that every do-while program has a loop invariant that is both necessary and sufficient proving strong verification. This loop invariant is shown to be the least fixpoint of a recursive function mapping predicates to predicates that is defined by the program and the postcondition.,10.1109/TSE.1975.6312858,IEEE Transactions on Software Engineering,"Silicon,Semantics,Vectors,Computers,Contracts,Indexes,Extrapolation",,Strong verification of programs
"H.A. Schutz&&Computer Science Department, General Motors Research and Development Laboratories, Warren, MI, USA|","ILIAD is a high-evel language for programming real-time applications which involve concurrent processing. It was designed to help scientists and engineers write reliable programs that can be read and maintained. An ILIAD program consists of a group of concurrent tasks. The tasks are autonomous and must cooperate in using the shared memory and devices in the execution environment. The language has facilities for providing secure access to these resources and for creating and synchronizing parallel instruction streams. In providing an overview of the language, the factors motivating the major design choices are discussed. A programming example illustrates how ILIAD might be applied. An assessment of the language includes a discussion of potential problem areas, both technical and nontechnical.",10.1109/TSE.1979.234186,IEEE Transactions on Software Engineering,"Computer languages,Communication system control,Concurrent computing,Programming profession,Operating systems,Process design,Maintenance engineering,Reliability engineering,Design engineering,High level languages","E. W. Dijkstra, ""Solution of a problem in concurrent programming control"", Comm. ACM, vol. 8, pp. 569, Sept. 1965.||E. W. Dijkstra, ""Cooperating sequential processes"" in Programming Languages, NY, New York:Academic, pp. 43, 1968.||D. E. Knuth, ""Additional comments on a problem in concurrent programming control"", Comm. ACM, vol. 9, pp. 321-322, May 1966.||N. G. de Bruijn, ""Additional comments on a problem in con-current programming control"", Comm. ACM, vol. 10, pp. 137-138, Mar. 1967.||M. A. Eisenberg and M. R. McGuire, ""Further comments on Dijkstra's concurrent programming control problem"", Comm. ACM, vol. 15, pp. 999, Nov. 1972.||P. Brinch Hansen, ""A comparison of two synchronizing concepts"", Acta Informatica, vol. 1, pp. 190-199, 1972.||L. Lamport, ""A new solution to Dijkstra's concurrent programming problem"", Comm. ACM, vol. 14, pp. 453-455, Aug. 1974.||A. N. Habermann, ""Synchronization of communicating processes"", Comm. ACM, vol. 15, pp. 177-184, Mar. 1970.||P. J. Courtois, F. Heymans and D. L. Parnas, ""Concurrent control with 'readers' and 'writers'"", Comm. ACM, vol. 14, pp. 667-668, Oct. 1971.||C. A. R. Hoare, ""Monitors an operating systems structuring concept"", Comm. ACM, vol. 17, pp. 549, Oct. 1974.||A. Silberschatz, R. B. Kieburtz and A. J. Bernstein, ""Extending concurrent Pascal to allow dynamic resource management"", IEEE Trans. Solfware Eng., vol. SE-3, pp. 210-217, May 1977.||P. Brinch Hansen, ""3"" in Operating Systems Principles, NJ, Englewood Cliffs:Prentice-Hall, July 1973.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||N. Wirth, ""Modula: A language for modular multiprogramming"", Software Practice and Experience, vol. 7, pp. 3-36, Jan.-Feb. 1977.||R. Roessler, A Language Comparison (developed by the Long Term Procedural Languages Committee‑Europe Int. Purdue Workshop on Industrial Comput. Syst.), 1976-Oct.||""Standard ISA-S61.1 Instrument Society of America"", Industrial Computer System Fortran Procedures for Executive Functions and Process Input-Output, 1972.||R. A. Freiburghouse, ""Proposed extensions to PL/I for real-time applications"", ACM SIGPLAN Notices, vol. 12, pp. 26-42, July 1977.||D. A. Fischer, A common programming language for the Dept. of Defense background and technical requirements, June 1976.||ILIAD Reference Manual, Apr. 1979.||C. A. R. Hoare, ""Towards a theory of parallel programming"" in Operating Systems Techniques, NY, New York:Academic, pp. 61-71, 1972.||M. S. Adix and H. A. Schutz, Interpretive Execution of Real‑time Control Applications, MI, Warren:Comput. Sci. Dep., GM Research Labs, Nov. 1975.||",On the Design of a Language for Programming Real-Time Concurrent Processes
"S.T. Redwine&&MITRE Corporation, McLean, VA, USA|","A systematic approach to test data design is presented based on both practical translation of theory and organization of professional lore. The approach is organized around five domains and achieving coverage (exercise) of them by the test data. The domains are processing functions, input, output, interaction among functions, and the code itself. Checklists are used to generate data for processing functions. Separate checklists have been constructed for eight common business data processing functions such as editing, updating, sorting, and reporting. Checklists or specific concrete directions also exist for input, output, interaction, and code coverage. Two global heuristics concerning all test data are also used. A limited discussion on documenting test input data, expected results, and actual results is included.",10.1109/TSE.1983.236597,IEEE Transactions on Software Engineering,"Data engineering,Design engineering,Software testing,Software design,System testing,Guidelines,Data processing,Sorting,Concrete,Documentation","S. T. Redwine, Test data pattern for sort utility usage.||J. B. Goodenough and S. L. Gehart, ""Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, June 1975.||G. J. Myers, The Art of Software Testing, New York:Wiley, 1979.||C. L. Biggs, E. G. Birks and W. Atkins, Managing the Systems Development Process, NJ, Englewood Cliffs:Prentice-Hall, pp. 36-37, 1980.||W. E. Howden, ""Reliability of path analysis testing strategy"", IEEE Trans Software Eng., vol. SE-2, Sept. 1976.||W. E. Howden, ""Completeness criteria for testing elementary program functions"", 5th Int. Conf. Software Eng. IEEE Comput. Soc., 1981.||Guidelines for Documentation of Computer Programs and Automated Systems, Nat. Bureau Standards, 1976.||Guidelines for Documentation of Computer Programs and Automated Systems, Nat. Bureau Standards, pp. 16-19, 1976.||T. DeMarco, Structured Analysis and System Specification, Yourdon, 1978.||C. Gane and T. Sarson, Structured Systems Analysis: Tools and Techniques, IST Databooks, 1977.||E. Yourdon and L. L. Constantine, Structured Design, Yourdon, 1975.||K. C. Tai, ""On program testing criteria"", Proc. 3rd Int. Comput. Software and Applications Conf. IEEE Comput. Soc., pp. 494-499, 1979.||L. J. White and E. I. Cohen, ""A domain strategy for computer program testing"", IEEE Trans. Software Eng., vol. SE-6, 1980-May.||J. B. Bowden, ""Standard error classification to support software reliability assessment"", 1980 Nat. Comput. Conf. AFIPS, 1980.||R. A. DeMillo, R. J. Lipton and F. G. Sayword, ""Hints on test data selection: Help for the practicing programmer"", IEEE Computer, vol. 11, Apr. 1978.||J. M. Hanks, Testing COBOL Programs by Mutation: Vol. I Introduction to CMS 1 Systems and Vol. II CMS. 1 System Documentation, Georgia Inst. Technol, Feb. 1980.||K. A. Foster, ""Error sensitive test cases analysis (ESTCA)"", IEEE Trans. Software Eng., vol. SE-6, May 1980.||D. A. Walsh, ""Structured testing"", Datamation, July 1977.||E. Miller, ""Coverage measure definitions reviewed"", Testing Techniques Newsletter, vol. 3, Nov. 1980.||IBM OS/VS COBOL Compiler and Library Programmer's Guide, Int. Business Machines.||A. R. Sorkowitz, ""Certification testing: A procedure to improve the quality of software testing"", IEEE Computer, vol. 12, Aug. 1979.||E. Miller, ""Some statistics from the software test factory"", Software Eng. Notes, vol. 4, Jan. 1979.||E. Yourden, Managing The Structured Techniques, Yourdon, 1979.||M. E. Fagan, ""Design and code inspections to reduce errors in program development"", IBM Syst. J., vol. 15, no. 3, 1976.||E. H. Bersoff, J. D. Henderson and S. G. Siegal, Software Configuration Management, NJ, Englewood Cliffs:Prentice-Hall, 1980.||W. E. Howden, ""A survey of static analysis methods"" in Tutorial: Software Testing and Validation Techniques, MD, Silver Spring:IEEE Comput. Soc., 1978.||D. S. Alberts, The economics of software, 1978.||",An Engineering Approach to Software Test Data Design
"A.C. Shaw&&Department of Computer Science, University of Washington, Seattle, WA, USA|","Flow expressions describe sequential and concurrent flows of entities, such as control, messages, commands, jobs, and resources, through system software components, such as programs, procedures, modules, and processes. They consist of regular expressions extended with cyclic and interleaving operators and a synchronization facility. The language of flow expressions is defined and some of its formal properties are presented. Applications are exhibited in the modeling of concurrent programs, the description of operating system architectures, the specification and solution of synchronization problems, the flow and description of command languages, and in systems analysis and verification.",10.1109/TSE.1978.231501,IEEE Transactions on Software Engineering,"Application software,Operating systems,Software systems,Control systems,Command languages,System software,Interleaved codes,Computer architecture,Parallel processing,Resource management","R. H. Campbell, Path expressions: A technique for specifying process synchronization, Aug. 1976.||May 1977.||R. H. Campbell and A. N. Habermann, ""The specification of process synchronization by path expressions"" in Lecture Notes in Computer Science, Germany, Heidelberg:Springer‑Verlag, vol. 16, 1974.||P. J. Courtois, F. Heymans and D. L. Parnas, ""Concurrent control with 'readers' and 'writers'"", Commun. Assoc. Comput. Mach., vol. 14, pp. 667-668, Oct. 1971.||G. Curry, Programming by abstract demonstration, Aug. 1977.||G. Curry, Programming by abstract demonstration, 1978.||S. Ginsburg, The Mathematical Theory of Context-Free Languages, New York:McGraw-Hill, pp. 108, 1977.||A. N. Habermann, Path expressions, PA, Pittsburgh:Dep. Comput. Sci., Carnegie-Mellon Univ., June 1975.||J. E. Hopcroft and J. D. Ullman, Formal Languages and Their Relation to Automata, MA, Reading:Addison-Wesley, 1969.||R. Ladner, private communication, Feb. 1975.||M. L. Minsky, Computation: Finite and Infinite Machines, NJ, Englewood Cliffs:Prentice-Hall, 1967.||W. M. Newman and R. F. Sproull, Principles ofInteractive Computer Graphics, New York:McGraw-Hill, 1973.||W. E. Riddle, Modelling and analysis of supervisory systems, Mar. 1972.||W. E. Riddle, ""A method for the description and analysis of complex software systems"", SIGPLAN Notices, vol. 3, pp. 133-136, Sept. 1973.||W. E. Riddle, An approach to software system modelling behavior specification and analysis, MI, Ann Arbor:Dep. Comput. and Commun. Sciences, lniv. of Michigan, July 1976.||W. C. Rounds, Computation-universality of message transfer expressions, MI, Ann Arbor:Dep. Comput. and Commun. Sciences, Univ. of Michigan, Jan. 1976.||A. C. Shaw, The Logical Design of Operating Systems, NJ, Englewood Cliffs:Prentice-Hall, 1974.||A. C. Shaw, ""Systems design and documentation using path descriptions"", Proc. 1975 Sagamore Comput. Conf. on Parallel Processing, pp. 180-181, 1975.||A. C. Shaw, A path notation for describing software, Apr. 1976.||A. C. Shaw, Design of a single language multiprogramming system, WA, Seattle:Dep. Comput. Sci., Univ. of Washington, July 1977.||M. Welter, Counter expressions, MI, Ann Arbor:Dep. Comput. Commun. Scis., Univ. of Michigan, Aug. 1976.||R. M. Wilkinson, A nucleus-based single language dedicated time-sharing system, July 1975.||",Software Descriptions with Flow Expressions
"U. Voges&&Institut für Datenverarbeitung in der Technik, Kernforschungszentrum Karlsruhe GmbH, Karlsruhe, Germany|L. Gmeiner&&Institut für Datenverarbeitung in der Technik, Kernforschungszentrum Karlsruhe GmbH, Karlsruhe, Germany|A.A. Von Mayrhauser&&Department of Computer Science, Illinois Institute of Technology, Chicago, IL, USA|","This paper describes the automated testing tool SADAT, which supports the testing of single Fortran modules. The different functions which are integrated in this system are explained, the usage of the tool is demonstrated, and some output results are presented. The special benefits of the SADAT system are summarized. The history and the present status of the system are outlned. Finaly, a listing of further reference material and information on the program availability are included.",10.1109/TSE.1980.230474,IEEE Transactions on Software Engineering,"Automatic testing,Software testing,System testing,Computer errors,Software tools,Algorithms,Databases,History,Computer science,Information analysis","A. Amschler and L. Gmeiner, SADAT2–A system for automated generation execution and evaluation of tests for FORTRAN-programs, Germany, Kernforschungszentrum Karlsruhe, Oct. 1977.||A. Amschler, L. Gmeiner and U. Voges, ""SADAT–An automated testing tool"", Workshop on Software Testing and Test Documentation, 1978-Dec.-18-20.||A. Amschler, Test data generation as an integrated part of a system for the automatic execution and evaluation of tests, Germany:Diplomarbeit, Universitat Karlsruhe, July 1976.||L. A. Clarke, ""Automatic test data selection"", Infotech State of the Art Conf. on Software Testing, 1978-Sept.-20-22.||C. Gannon, ""JAVS: A jovial automated verification system"", COMPSAC, 1978-Nov.-13-16.||||L. Gmeiner, ""Dynamic analysis and test data generation in an automatic test system"", Workshop on Rel. Software, 1978-Sept.-22-23.||W. E. Howden, ""DISSECT–A symbolic evaluation and program testing system"", IEEE Trans. Software Eng., vol. SE-4, pp. 70-73, Jan. 1978.||E. F. Miller, M. R. Paige, J. P. Benson and W. R. Wisehart, ""Structural techniques of program validation"", Proc. Compcon 74, pp. 161-164, 1974-Feb.||L. J. Osterweil and L. D. Fosdick, ""Some experience with DAVE–A FORTRAN program analyzer"", AFIPS Conf. Proc., pp. 909-915, 1976.||C. V. Ramamoorthy and S. F. Ho, FORTRAN automated code evaluation system (FACES), Berkeley:Univ. California, 1974.||RXVP FORTRAN automated verification system, CA, Santa Barbara:General Res. Corp., May 1975.||M. Seifert, SADAT–A system for the automatic execution and evaluation of tests, Germany, Kernforschungszentrum Karlsruhe, June 1976.||L. G. Stucki, ""New directions in automated tools for improving software quality"" in Current Trends in Programming Methodology, NJ, Englewood Cliffs:Prentice‑Hail, vol. 2, pp. 80-111, 1977.||",SADAT—An Automated Testing Tool
"C.C. Elgot&&Department of Mathematical Sciences, IBM Thomas J. Watson Research Center|",,10.1109/TSE.1976.233820,IEEE Transactions on Software Engineering,Flowcharts,,"Erratum and Corrigendum for ""Structured Programming With and Without GO TO Statements"""
"W.E. Howden&&Department of Applied Physics and Information Science, University of California, San Diego, La Jolla, CA, USA|","Symbolic testing and a symbolic evaluation system called DISSECT are described. The principle features of DISSECT are outlined. The results of two classes of experiments in the use of symbolic evaluadon are summarized. Several classes of program errors are defined and the reliability of symbolic testing in finding bugs is related to the classes of errors. The relationship of symbolic evaluation systems like DISSECT to classes of program errors and to other kinds of program testing and program analysis tools is also discussed. Desirable improvements in DISSECT, whose importance was revealed by the experiments, are mentioned.",10.1109/TSE.1977.231144,IEEE Transactions on Software Engineering,"System testing,Programming profession,Software testing,Computer bugs,Data analysis,Error correction,Software reliability,Table lookup,Physics,Information science","W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-560, May 1975.||R. S. Boyer, B. Elspas and K. N. Levitt, ""SELECT–A formal system for testing and debugging programs by symbolic execution"", Proc. 1975 Int. Conf Reliable Software, pp. 234-245, 1975.||J. C. King, ""Symbolic execution and program testing"", Commun. Ass. Comput. Mach., vol. 19, pp. 385-394, July 1976.||L. A. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept. 1976.||W. E. Howden and J. Laub, ""Automatic case analysis of programs"", Proc. Computer Science and Statistics: 8th Annu. Symp. on the Interface, pp. 347-352, 1975.||E. F. Miller and R. A. Melton, ""Automated generation of test‑case data sets"", Proc. 1975 Int. Conf Reliable Software, pp. 51-58, 1975.||J. C. Huang, ""An approach to program testing"", Comput. Surveys, vol. 7, pp. 113-128, Sept. 1975.||W. E. Howden and L. G. Stucki, A methodology for effective test case selection-Phase I, Jan. 1974.||B. Elspas, M. Green, A. Korsak and P. Wong, Solving nonlinear inequalities associated with computer program paths, CA, Stanford:Stanford Res. Inst.||B. W. Kernighan and P. J. Plauger, The Elements of Programming Style, New York:McGraw Hill, 1974.||W. E. Howden and L. G. Stucki, A methodology for effective test case selection-Phase III, Mar. 1976.||W. E. Howden, Models of correct programs and program testing, Nov. 1974.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-214, Sept. 1976.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, pp. 156-173, June 1975.||C. V. Ramamoorthy and S. F. Ho, ""Testing large software with automated software evaluation systems"", IEEE Trans. Software Eng., vol. SE-1, pp. 46-58, Mar. 1975.||L. J. Osterweil and L. D. Fosdick, Data flow analysis as an aid in documentation assertion generation validation and error detection, Dep. Comput. Sci., Univ. Colorado, Sept. 1975.||R. H. Hoffman, User information for the interactive automated test data generator, NASA, Johnson Space Center, Jan. 1976.||C. V. Ramamoorthy and S. F. Ho, FORTRAN automatic code evaluation system, Aug. 1974.||B. W. Boehm, R. K. McClean and D. B. Urfig, ""Some experience with automated aids to the design of large-scale reliable software"", IEEE Trans. Software Eng., vol. SE-1, pp. 125-133, Mar. 1975.||P. Henderson, ""Finite state modelling in program development"", Proc. 1975 Int. Conf. Reliable Software, pp. 221-227, 1975.||R. L. Sites, Algol-W reference manual, Feb. 1972.||R. E. Fairley, ""An experimental program testing facility"", IEEE Trans. Software Eng., vol. SE-1, pp. 350-357, Dec. 1975.||L. G. Stucki and G. L. Foshee, ""New assertion concepts for self‑metric software validation"", Proc. 1975 Int. Conf Reliable Software, pp. 59-71, 1975.||P. R. Benington, Data Reduction and Error Analysis for the Physical Sciences, New York:McGraw Hill, 1969.||E. F. Miller, ""RXVP: An automated verification system for FORTRAN"", Proc. Computer Science and Statistics: 8th Annu. Symp. on the Interface, pp. 328, 1975.||K. W. Krause, R. W. Smith and M. A. Goodwin, ""Optimal software test planning through automated network analysis"", Proc. 1973 IEEE Symp. Comput. Software Reliability, pp. 18-22, 1973.||R. M. Balzer, ""EXDAMS–Extendable debugging and monitoring system"", 1969 Spring Joint Comput. Conf. AFIPS Conf. Proc., vol. 34, pp. 567-580, 1969.||L. P. Deutsch, An interactive program verifier, May 1973.||R. M. Burstali, ""Proving correctness as hand simulation with a little induction"", Proc. IFIPS 74, 1974.||L. G. Stucki, ""Automatic generation of self-metric software"", Proc. 1973 IEEE Symp. Comput. Software Reliability, pp. 94-100, 1973.||",Symbolic Testing and the DISSECT Symbolic Evaluation System
"Richard E. Fairley&&Computing Science Division, Department of Industrial Engineering, Texas A and M University, College Station, TX, USA|","This paper describes an experimental program testing facility called the interactive semantic modelling system (ISMS). The ISMS is designed to allow experimentation with a wide variety of tools for collecting, analyzing, and displaying testing information. The design methodology is applicable to procedural programming languages, and Algol 60 is being used as the vehicle for elaboration of design principles and implementation techniques. This paper discusses the ISMS design, and describes the various types of analysis and display tools being developed to facilitate program testing. The ISM Preprocessor is described, an an example is presented to illustrate the data structures utilized in the ISMS.",10.1109/TSE.1975.6312864,IEEE Transactions on Software Engineering,"History,Computational modeling,Testing,Semantics,Syntactics,Algorithms,Programming",,An experimental program-testing facility
"J. Katzenelson&&Department of Electrical Engineering, Israel Institute of Technology-Technion, Haifa, Israel|","The extensible set language (ESL) uses clusters for extending the set oriented language and for mapping the sets and their operators into base language data structure and operators. The main difficulty in this mapping is the dependency among clusters, i.e., the use of one data structure requires the modification or the constraint of another. The dialogue is a compile time procedure which is part of a cluster. It manipulates data structures and enables each cluster to appear independent; it also enables the user to choose one of a family of data implementations defmed by the cluster. Thus the dialogue makes it possible for a data structure to appear as a building block which can be used simply and flexibly.",10.1109/TSE.1979.234187,IEEE Transactions on Software Engineering,"Data structures,High level languages,Programming profession,Circuit testing,Documentation,Jacobian matrices,Computer languages,Large-scale systems,Computer networks,Design automation","T. E. Cheatham and J. A. Townley, A look at programming and programming systems.||""Proceedings of the Extensible Languages Symposium"", SIGPLAN Notices, vol. 4, no. 8, 1969-Aug.||""Proceedings of the International Symposium on Extensible Languages"", SIGPLAN Notices, vol. 6, no. 12, 1971-Dec.||J. T. Schwartz, On programming, June 1975.||M. B. Wells and J. B. Morris, ""The unified data structure capability in madcap VI"", Int. J. Comput. Inf Sd., vol. 1, no. 3, Sept. 1972.||A. V. Aho and J. D. Ullman, ""11"" in The Theory of Parsing Translation and Compiling, NJ, Englewood Cliffs:Prentice-Hall, 1973.||J. T. Schwartz, ""Optimization of very high level languages"", Computer Languages, vol. 1, pp. 161-194.||G. M. Birtwistle, O. J. Dahl, B. Myhrhand and K. Nygaard, Simula Begin, PA, Philadelphia:Sweden and Auerbach, 1973.||B. Liskov and S. Zilles, Programming with abstract data types, MA, Cambridge:M.I.T., 1974.||W. A. Wulf, Alphard: Towards a language to support structured programs, Apr. 1974.||J. T. Schwartz, Additional considerations concerning semi‑automatic data structure choice, NY:Dept. Comput. Sci., Courant Institute of Mathematical Sciences, New York Univ., June 1975.||D. E. Knuth, ""An empirical study of FORTRAN programs"", Software—Practice and Experience, vol. 1, pp. 105-134, 1971.||J. Katzenelson and A. Teperman, ESL: An extensible set language system—Description of the set language, Israel, Haifa:Dep. Elec. Eng., Technion, Israel Institute of Technology, Sept. 1976.||J. Katzenelson and Y. Sidi, Types and variables in ESL, Israel, Haifa:Dep. Elec. Eng., Technion, Israel Institute of Technology, June 1977.||R. T. Johnson and J. B. Morris, ""Abstract data types in the MODEL programming language"", SIGPLAN Notices, vol. 8, pp. 36-47, 1976.||J. J. Horning, ""Some desirable properties of data abstraction facilities"", SIGPLAN Notices, vol. 8, pp. 60-62, 1976.||B. Wegbreit, ""The treatment of data types in EL1"", Commun. Ass. Comput. Mach., vol. 17, pp. 251-264, May 1974.||J. R. Low, Automatic coding: Choice of data structures, CA, Stanford:Stanford Artificial Intelligence Lab., Dep. Comput. Sci., Stanford Univ., Aug. 1974.||J. Katzenelson, Clusters and dialogues for set implementations, Israel, Haifa:Dep. Elec. Eng., Technion, Israel Institute of Technology, Jan. 1977.||B. Liskov, A. Snyder, R. Atkinson and C. Schaffert, ""Abstraction mechanism in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-576, Aug. 1977.||Y. Sidi, Types variables and clusters in ESL, Jan. 1978.||B. A. Galler and A. J. Perlis, ""A proposal for definitions in ALGOL"", Commun. Ass. Comput. Mach., vol. 10, pp. 204-219, Apr. 1967.||P. D. Rovner, Automatic representation selection for associative data structures, 1976.||",Clusters and Dialogues for Set Implementations
"J.R. Menand&&Institut de Programmation, L.A. 248, Université Pierre et Marie Curie, Paris, France|M. Becker&&Institut de Programmation, ERA 592, Université Pierre et Marie Curie, Paris, France|","Instead of using a very expensive and powerful central processing unit, the Hypercube F8 uses independent parallel microprocessors that are slow and inexpensive. This architecture is modeled in order to determine the proper number of microprocessors and to validate the system. The model is hierarchical. Different levels of the model are considered. Each level model corresponds to a subsystem of the Hypercube F8. Most of the common analytical methods are used and direct calculations are made. For each level several methods are compared and the approximations validated. The level 1 direct method is a general solution of polling models. The global model gives the throughput of the system the utilizations of the processors and the service times. We discuss the values of the parameters of the system.",10.1109/TSE.1983.236598,IEEE Transactions on Software Engineering,"Power system modeling,Microprocessors,Computer architecture,Central Processing Unit,Hypercubes,Throughput,Computer performance,Distributed computing,Parallel architectures,Parallel processing","J. R. Ménand, Etude et modélisation d'une architecture multiprocesseur, 1980.||R. Dupuy, Architecture de machine àsystème dispersé.||J. R. Ménand and M. Becker, ""Modelization of a multiprocessor architecture"", Proc. 10th IFIP Conf. Syst. Modeling and Optimiz., 1982.||P. J. Courtois, ""Decomposability: Queueing and Computer System Applications"", ACM Monograph Series, 1977.||F. Baskett, K. Chandy, R. Muntz and F. Palacios, ""Open closed and mixed networks of Queues with different classes of customers"", J. Ass. Comput. Mach., vol. 22, 1975.||E. Gelenbe, ""On approximate computer system models"", J. Ass. Comput. Mach., vol. 22, Apr. 1975.||M. Eisenberg, ""Queues with periodic service and changeover time"", Oper. Res., vol. 20, Mar./Apr. 1972.||A. G. Konheim, ""Service epochs in a loop system"", Symp. Comput. Commun. Networks and Teletraffic, 1972-Apr.-4-6.||G. B. Swartz, Analysis of a SCAN service policy in a gated loop system, NJ, West Long Branch:Monmouth College.||A. Chang and S. S. Lavenberg, ""Work-rates in closed queueing networks with general independent servers"", Oper. Res., vol. 22, 1974.||Y. Bard, ""An analytic model of the VM/370 system"", IBM J. Res. Develop., vol. 22, Sept. 1978.||M. Becker and R. Fortet, ""Projector method and iterative method to solve a packet switching network node. Validation by simulation"" in Measuring Modelling and Evaluating Computer Systems, North-Holland, 1977.||L. Kleinrock, Queueing Systems Vol. 2: Computer Applications., New York:Wiley-Interscience, 1976.||D. P. Gaver, ""Analysis of remote terminal backlogs under heavy demand conditions"", J. Ass. Comput. Mach., vol. 18, 1971.||J. Zahorjan, N. P. Hume and C. Sevcik, ""A queueing model of a rotational position sensing disk system"", Infor., vol. 10, 1978.||A. G. Konheim and B. Meister, ""Service in a loop system"", J. Ass. Comput. Mach., vol. 19, 1972.||P. J. Kuehn, ""Multiqueue systems with nonexhaustive cyclic service"", Bell Syst. Tech. J., Mar. 1979.||",Modeling a Multiprocessor Architecture
"H.S. Stone&&Department of Electrical and Computer Engineering, University of Massachusetts, Amherst, MA, USA|","In a two-processor distributed computer network, prior research showed that a maximum flow algorithm can be used to find optimal program-module-to-processor assignments to maximize the performance of distributed programs. This paper examines the sequence of optimal assignments found as the load on one processor is held fixed and the load on the other is varied. For every program module M there exists a critical load factor fM such that when the load on the processor with variable load is below fM, M is assigned to that processor by an optimal assignment, and is otherwise assigned to the other processor. This characteristic opens the possibility of doing optimal dynamic assignments in real-time.",10.1109/TSE.1978.231502,IEEE Transactions on Software Engineering,"Distributed computing,Computer graphics,Satellites,Computer displays,Application software,Computer applications,Costs,Intelligent networks,Computer networks,Distributed processing","R. L., Budzinski, E. S. Davidson, W. Mayeda and H. S. Stone, DMIN: An algorithm for computing the optimal dynamic allocation in a virtual computer.||E. A. Dinic, ""Algorithm for solution of a problem of maximum flow in a network with power estimation"", Soviet Math. Doklady, vol. 11, no. 5, pp. 1277-1280, 1970.||J. Edmonds and R. M. Karp, ""Theoretical improvements in algorithmic efficiency for network flow problems"", J. Ass Comput. Mach., vol. 19, pp. 248-264, Apr. 1972.||M. J. Eisner and D. G. Severance, ""Mathematical techniques for efficient record segmentation in large shared data bases"", J. Ass. Comput. Mach., vol. 23, pp. 619-635, Oct. 1976.||J. D. Foley, Graphics system modeling, Aug. 1974.||L. R. Ford and D. R. Fulkerson, Flows in Networks, NJ, Princeton:Princeton Univ. Press, 1962.||A. V. Karzanov, ""Determining the maximal flow in a network by the method of preflows"", Soviet Math. Doklady, vol. 15, no. 2, pp. 434-437, 1974.||R. L. Mattson, J. Gecsei, D. R. Slutz and I. W. Traiger, ""Evaluation techniques for storage hierarchies"", IBM Syst. J., vol. 9, no. 2, pp. 78-117, 1970.||J. Michel and A. van Dam, ""Experience with distributed processing on a host/satellite graphics system"", Proc SIGGRAPH '76, vol. 10, no. 2, 1976.||G. S. Rao, H. S. Stone and T. C. Hu, ""Scheduling in distributed processor system with a limited memory"", IEEE Trans. Software Eng., 1977.||H. S. Stone, ""Multiprocessor scheduling with the aid of network flow algorithms"", IEEE Trans. Software Eng., vol. SE-3, pp. 85-93, Jan. 1977.||A. van Dam, G. Stabler and R. Harrington, ""Intelligent satellites for interactive graphics"", Proc. IEEE, vol. 62, pp. 83-92, 1974-Apr.||",Critical Load Factors in Two-Processor Distributed Systems
"F.N. Parr&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","A new model of the software development process is presented and used to derive the form of the resource consumption curve of a project over its life cycle. The function obtained differs in detail from the Rayleigh curve previously used in fitting actual project data. The main advantage of the new model is that it relates the rate of progress which can be achieved in developing software to the structure of the system being developed. This leads to a more testable theory, and it also becomes possible to predict how the use of structured programming methods may alter pattems of life cycle resource consumption.",10.1109/TSE.1980.230475,IEEE Transactions on Software Engineering,"Programming,Constraint theory,Resource management,Curve fitting,Life testing,Software engineering,Project management","L. P. Norden, ""Using tools for project management"" in Management of Production, MD, Baltimore:Penguin, 1970.||L. Putnam, ""A macro estimating methodology for software development"", Proc. COMPCON 76, pp. 138-143, 1976-Sept.||F. P. Brooks, The Mythical Man-Month-Essays in Software Engineering, MA, Reading:Addison-Wesley, 1975.||J. D. Musa, ""A theory of software reliability and its application"", IEEE 7rans. Software Eng., vol. SE-1, pp. 312-327, Sept. 1975.||B. Littlewood and J. L. Verral, ""A Bayesian reliability growth model for computer software"", Appi. Statist. (J. Royal Statist. Soc. Ser. C), vol. 22, no. 3, pp. 332-346, 1973.||",An Alternative to the Rayleigh Curve Model for Software Development Effort
"D. Gries&&Department of Computer Science, Cornell University, Ithaca, NY, USA|","The ideas behind correctness proofs for programs are outlined, and conventional definitions of assignment, etc., are given. The main part of this paper is the idealized development of a nontrivial program in a disciplined fashion. The use of Dijkstra's ""calculus"" for the formal development of programs as a guide to structuring program development is discussed in relation to the example presented.",10.1109/TSE.1976.233828,IEEE Transactions on Software Engineering,"Programming profession,Bismuth,Computer languages,Testing,Calculus,Documentation,Debugging,Fault detection,Logic programming,Computer science","E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||E. W. Dijkstra, A Discipline ofProgramming, NJ, Englewood Cliffs:Prentice‑Hall, 1976.||R. W. Floyd, ""Asigning meanings to programs"", Proc. Amer. Math. Soc. Symp. Applied Mathematics, vol. 19, pp. 19-31, 1967.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-583, Oct. 1969.||",An Illustration of Current Ideas on the Derivation of Correctness Proofs and Correct Programs
"R.G. Hamlet&&Department of Computer Science, University of Maryland, College Park, MD, USA|","if finite input-output specifications are added to the syntax of programs, these specifications can be verified at compile time. Programs which carry adequate tests with them in this way should be resistant to maintenance errors. If the specifications are independent of program details they are easy to give, and unlikely to contain errors in common with the program. Furthermore, certain finite specifications are maximal in that they exercise the control and expression structure of a program as well as any tests can.",10.1109/TSE.1977.231145,IEEE Transactions on Software Engineering,"Program processors,System testing,Error correction,Software testing,Error correction codes,High level languages,Debugging,Software maintenance,Humans,Computer science","D. L. Parnas, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., vol. 15, pp. 330-336, Mar. 1972.||C. A. R. Hoare, ""Proof of a program: FIND"", Commun. Ass. Comput. Mach., vol. 14, pp. 39-45, Jan. 1971.||L. G. Stucki and G. L. Foshee, ""New assertion concepts for self‑metric software validation"", Proc. Int. Conf. on Reliable Software SIGPLAN Notices, vol. 10, pp. 59-71, 1975-June.||J. C. King, ""A verifying compiler"" in Debugging Techniques in Large Systems, NJ, Englewood Cliffs:Prentice‑Hall, pp. 17-39, 1970.||J. C. King, ""A new approach to program testing"", Proc. Int. Conf on Reliable Software SIGPLAN Notices, vol. 10, pp. 228-233, 1975-June.||L. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept. 1976.||V. Basili and A. J. Turner, ""Iterative enhancement: A practical technique for software development"", IEEE Trans. Software Eng., vol. SE-1, pp. 390-396, Dec. 1975.||S. C. Kleene, Introduction to Metamathematics, NJ, Princeton:Van Nostrand, 1964.||R. G. Hamlet, ""Testing programs with finite sets of data"", The Computer J., vol. 20, 1977.||E. Satherwaite, ""Debugging tools for high-level languages"", software-Practice and Experience, vol. 2, pp. 197-217, July 1972.||V. R. Basili and A. J. Turner, ""A transportable extendable compiler"", Software-Practice and Experience, vol. 5, pp. 269-278, July 1975.||B. W. Arden, An Introduction to Digital Computing, MA, Reading:Addison-Wesley, 1963.||N. Wirth and C. A. R. Hoare, ""A contribution to the development of ALGOL"", Commun. Ass. Comput. Mach., vol. 9, pp. 413-432, June 1966.||Z. Kohavi, ""Machine distinguishing experiments"", The Computer J., vol. 16, pp. 141-147, May 1973.||",Testing Programs with the Aid of a Compiler
"Jan Witt&&Siemens AG, Munich, Germany|","This paper describes an interactive system-COLUMBUS-for the development of well-structured programs in assembly language, Cobol, and PL/I. One of the basic concepts employed is the use of Nassi/Shneiderman charts as the unique reference document. For specifying the control structures of a program, the programmer uses a set of control primitives which are common for all languages used. Data declarations and executable statements are taken from the individual language. This mixture is called the COLUMBUS source form. From this source form Nassi/Shneiderman diagrams and cross-reference matrices can be produced in a language-independent fashion; pure source for the individual languages is produced by a set of preprocessors in a language-dependent fashion. This paper illustrates the mechanisms involved by giving some small examples for the individual languages, and it also gives a brief history of the project and reports on quantitative and qualitative results obtained so far. The plans for future extensions are also explained.",10.1109/TSE.1975.6312865,IEEE Transactions on Software Engineering,"Assembly,Computer aided software engineering,Indexes,Operating systems,Data mining,Software tools",,The COLUMBUS approach
"N.F. Schneidewind&&Naval Postgraduate School, Monterrey, CA, USA|H.-M. Hoffmann&&Federal German Navy, Flensburg, Germany|","The propensity to make programming errors and the rates of error detection and correction are dependent on program complexity. Knowledge of these relationships can be used to avoid errorprone structures in software design and to devise a testing strategy which is based on anticipated difficulty of error detection and correction. An experiment in software error data collection and analysis was conducted in order to study these relationships under conditions where the error data could be carefully defined and collected. Several complexity measures which can be defined in terms of the directed graph representation of a program, such as cyclomatic number, were analyzed with respect to the following error characteristics: errors found, time between error detections, and error correction time. Signifiant relationships were found between complexity measures and error charateristics. The meaning of directed grph structural properties in terms of the complexity of the programming and testing tasks was examined.",10.1109/TSE.1979.234188,IEEE Transactions on Software Engineering,"Data analysis,Error correction,Computer errors,Debugging,Error analysis,Software testing,High level languages,Software maintenance,Software design,Time measurement","Proc. Symp. on the High Cost of Software, 1973.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, NY, New York:Academic, pp. 1-82, 1972.||G. H. Bradley, T. F. Green, G. T. Howard and N. F. Schneidewind, ""Structure and error detection in computer software"", Proc. AIEE Conf., pp. 54-59, 1975.||T. F. Green, N. F. Schneidewind, G. T. Howard and R. Pariseau, ""Program structures complexity and error characteristics"", Proc. Symp. on Comput. Software Eng., pp. 139-154, 1976.||N. F. Schneidewind, ""The use of simulation in the evaluation of software"", Computer, pp. 47-53, Apr. 1977.||H.-M. Hoffmann, An experiment in software error occurrence and detection, June 1977.||A. B. Endres, ""An analysis of errors and their causes in systems programs"", IEEE Trans. Software Eng., vol. SE-1, no. 2, pp. 140-149, June 1975.||R. J. Rubey, J. A. Dana and P. W. Biche, ""Quantitative aspects of software validation"", IEEE Trans. Software Eng., vol. SE-1, no. 2, pp. 150-155, June 1975.||R. W. Wolverton, ""The cost of developing large scale software"", IEEE Trans. Comput., vol. C-23, no. 6, pp. 615-636, June 1974.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, no. 4, pp. 308-320, Dec. 1976.||S.-P. Chan, ""1-2"" in Introductory Topological Analysis of Electrical Networks, NY, New York:Holt, Rinehart, and Winston, pp. 1-83, 1969.||",An Experiment in Software Error Data Collection and Analysis
"V. Hayward&&L. I. M. S. I., Orsay, France|A. Osorio&&L. I. M. S. I., Orsay, France|","An original system to perform an automatic analysis of assembled programs is presented. Executable programs are analyzed from the description of the machine on which they run and are translated into an intermediate language taking into account the particularities of the considered machine. The system was primarily designed as the first step of a project for transferring programs from one machine to another. The final goal of the project is to achieve an even utilization of computer resources for a real-time controlled robot, on the basis of partially dedicated processors. At the present time, the actual implementation provides a tool for studying the theoretical aspect of machine-level program analysis. Nevertheless, other applications can be found in program debugging and assembled program validation.",10.1109/TSE.1983.236599,IEEE Transactions on Software Engineering,"Assembly systems,Robot control,Debugging,Application software,Robot sensing systems,Performance analysis,Robotic assembly,Robot programming,Power system planning,Decision making","A. H. Aho and J. D. Uliman, The Theory of Parsing Translation and Compiling> Vol. II: Compiling., NJ, Englewood Cliffs:Prentice-Hall, 1973.||M. R. Barbacci, G. E. Barnes, R. G. Cattel and D. D. Seiwiorek, The ISPS computer description language, 1981.||V. Chu, An algol like computer design language, vol. 8, pp. 607-617, Oct. 1965.||V. Hayward, Langages d'analyse de programmes assemblés pour différentes machines et applications de ces langages, Nov. 1981.||K. Kenedy, ""A survey of compiler optimization techniques"", Le point sur la compilation Cours des communautés européennes, Jan. 1978.||D. E. Knuth, Ate Art of ComputerProgramming Vol. I: Fundamental Algorithms., MA, Reading:Addison-Wesley, 1973.||K. Ripken, ""A formal method for describing machines code generation with local optimizations"", Le point sur la compilation Cours des communautés européennes, Jan. 1978.||R. C. Waters, Automatic analysis of the logical structure of programs, Dec. 1978.||AL user's manual, Jan. 1979.||R. Paul, Manipulator language.||",A System to Automatically Analyze Assembled Programs
"J.T. Pederson&&A/S Kongsberg Våpenfabrikk|J.K. Buckle&&Softech, Inc., Berkshire, UK|","Kongsberg Våpenfabrikk, Norway, has been engaged in establishing an up-to-date software engineering facility since late 1976.",10.1109/TSE.1978.231510,IEEE Transactions on Software Engineering,"Computer industry,Production systems,Software engineering,Application software,Military computing,Control systems,Software tools,Costs,Assembly,Computer languages","B. W. Boehm, ""Software reliability: Measurement and Management"", Int. Software Management Conf., 1977.||C. A. Irvine and J. W. Brackett, ""Automated software engineering through structured data management"", 2nd Int. Conf. Software Engineering, 1976-Oct.||B. W. Kerminghan and P. J. Plauger, Software Tools, MA, Reading:Addison-Wesley, 1976.||R. Conradi and P. Holager, MARY Textbook, Norway, Trondheim:RUNIT, The Technical Univ. Norway, 1977.||Proposal for a Recommendation for a CCITT High-Level Programming Language, Switzerland, Geneva:The Intemational Telegraph and Telephone Consultative Committee, May 1977.||W. A. Whitaker, ""DOD common high order language program current status and plan"", Int. Software Management Conf., 1977.||M. J. Rochkind, ""The source code control system"", IEEE Trans. Software Eng., vol. SE-1, pp. 364-370, Dec. 1975.||Software Development and Configuration Management Manual, Dec. 1973.||Introduction to SADT, MA, Waltham:SofTech Inc., Feb. 1976.||",Kongsberg's Road to an Industrial Software Methodology
"D.B. Lomet&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","A graph-oriented approach to deadlock avoidance, which treates both shared and exclusive locking, has been described [6]. The method is particularly suited for database systems. With enhancements introduced here, the problem of indefimite delay, i.e., the possibility that a process will not run to completion (will be delayed indefinitely) can be eliminated. The approach taken is to partition the resource system into subsystems, each of which can be scheduled independently. Indefinite delay is avoided by the construction of subsystems that guarantee the completion of a process or the granting of a resource request. Further, we show how the subsystem approach can be applied systematically so as to approximate FIFO scheduling of resource requests, while avoiding deadlock and indefmite delay. Other scheduling disciplines can also be realized. A lock manager program utilizing the FIFO method has been implemented.",10.1109/TSE.1980.230476,IEEE Transactions on Software Engineering,"System recovery,Delay,Database systems,Resource management,Operating systems,Councils,Scheduling algorithm,Frequency,Safety,Testing","A. N. Habermann, ""Prevention of system deadlocks"", Commun. Ass. Comput. Mach., vol. 12, pp. 373-377, July 1969.||R. C. Holt, ""Comments on prevention of system deadlocks"", Commun. Ass. Comput. Mach., vol. 14, pp. 36-38, Jan. 1971.||R. C. Holt, ""Some deadlock properties of computer systems"", Comput. Suryeys, vol. 4, pp. 179-196, Sept. 1972.||R. C. Holt, ""Reply by Richard C. Holt (to [8])"", Commun. Ass. Comput. Mach., vol. 15, pp. 840-841, Sept. 1972.||D. E. Knuth, ""Additional comments on a problem in concurrent programming control"", Commun. Ass. Comput. Mach., vol. 9, pp. 321-322, May 1966.||D. B. Lomet, ""A practical deadlock avoidance algorithm for data base systems"", Proc. ACM-SIGMOD Intn'l Conf. on Management of Data, pp. 122-127, 1977.||D. B. Lomet, ""Coping with deadlock in distributed systems"" in Data Base Architecture, Amsterdam:North-Holland, pp. 95-105, 1979.||D. L. Parnas and A. N. Habermann, ""Comment on deadlock prevention method"", Commun. Ass. Comput. Mach., vol. 15, pp. 840, Sept. 1972.||",Subsystems of Processes with Deadlock Avoidance
"C. Reynolds&&Department of Computer Sciences, University of Texas, Austin, TX, USA|R.T. Yeh&&Department of Computer Sciences, University of Texas, Austin, TX, USA|","We will consider the inductive mechanisms in five techniques for verifying iterative/recursive program structures: inductive assertion, predicate transformers, subgoal induction, computation induction, and structural induction. We will discover that all five techniques can be justified by a single theorem about inductive proof techniques. We will also show that all five techniques face the problem of finding properties that will carry an induction. Such properties are called inductive sets. We will see that the inductive sets of the five techniques are easily related to one another and that a program proof by any of the techniques can be easily converted to a proof by any of the other techniques. Our conclusion is that computer programs simply are inductive definitions of the functions they compute. Induction is the only method by which they can be proved. The problems of induction are therefore unavoidable.",10.1109/TSE.1976.233829,IEEE Transactions on Software Engineering,"Transformers,Military computing,Contracts,Computer languages","R. M. Burstall, ""Proving properties of programs by structural induction"", Comput. J., vol. 12, pp. 41-48, Feb. 1969.||J. W. R. Dedekind, Was sind und was souien die Zahlen?, 1887.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, no. 10, pp. 576-583, 1969.||Z. Manna and J. Vuillemin, ""Fixpoint approach to the theory of computation"", Commun. Ass. Comput. Mach., vol. 15, no. 7, pp. 528-536, 1972.||J. H. Morris and B. Wegbreit, ""Program verification by subgoal induction"", Commun. Ass. Comput. Mach., 1976.||",Induction as the Basis for Program Verification
"K.M. Chandy&&Department of Computer Sciences, University of Texas, Austin, Austin, TX, USA|J. Hogarth&&School of Planning and Computer Application, Tehran, Iran|C.H. Sauer&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","This paper considers the selection of capacities, in two classes of open queueing network models of computer communication systems: 1) local-balanced queueing networks with multiple classes of customers and 2) the Reiser-Kobayashi diffusion approximation model. The problem of selecting optimal bandwidths for communication lines and switches and computing machinery is difficult due to 1) the economy of scale exhibited by components (i.e., the bandwidth per dollar increases with the total cost of the component) and 2) the discrete nature of computer/communication components (for instance it is possible to lease communication lines with 2400-Bd or 4800-Bd band-widths but not one with a 2401.3-Bd bandwidth). This paper develops aun algorithm to select servers taking both of these characteristics of server costs into account. The contribution of this paper is to discuss 1) the optimization of more general network models with 2) the consideration of more realistic tariffs and 3) more constraints on network behavior than were previously analyzed.",10.1109/TSE.1977.231146,IEEE Transactions on Software Engineering,"Network servers,Bandwidth,Cost function,Computer networks,Constraint optimization,Queueing analysis,Bismuth,Intelligent networks,Switches,Communication switching","M. Reiser and H. Kobayashi, ""On the accuracy of the diffusion approximation in queueing systems"", IBM J. Res. Develop., vol. 18, no. 2, Mar. 1974.||H. Kobayashi, ""Application of the diffusion approximation to queueing networks I: Equilibrium queue distributions"", J. Assoc. Comput. Mach., vol. 21, no. 2, pp. 316-328, Apr. 1974.||K. M. Chandy, ""The analysis and solutions for general queueing networks"", Proc. 6th Annu. Princeton Conf on Inform. Sci. and Syst., 1972-Mar.||F. Baskett, K. M. Chandy, R. R. Muntz and F. Palacios-Gomez, ""Open closed and mixed networks of queues with different classes of customers"", J. Assoc. Comput. Mach., vol. 22, pp. 248-260, 1975.||L. Kleinrock, ""Analytic and simulation methods in computer network design"", AFIPS Conf Proc., vol. 36, pp. 569-579, 1969-June.||J. Labatoulle and E. Manning, The design of a homogeneous computer network, Canada, Ont., Waterloo:Comput. Commun. Network Group, University of Waterloo, 1975.||M. Gerla, The design of store and forward networks for computer communications, Jan. 1973.||P. E. Green and D. T. Tang, ""Some recent developments in teleprocessing system optimization"", Proc. IEEE Int. Conf., pp. 14-19, 1973.||J. D. C. Little, ""A proof for the queueing formula L = λW"", Oper. Res., May 1968.||A. Doig and A. H. Land, ""An automatic method of solving discrete programming problems"", Econometrica, vol. 28, pp. 497-520, 1960.||C. V. Ramamoorthy and K. M. Chandy, ""Optimization of memory hierarchies in a multi-programmed system"", J. Assoc. Comput. Mach., vol. 17, no. 3, pp. 426-445, July 1970.||J. Hogarth, Optimization and analysis of queueing networks, May 1975.||C. H. Sauer, Configuration of computing systems: An approach using queueing network models, May 1975.||K. M. Chandy, J. Howard and D. Towsley, ""Product form and local balance in queueing models"", J. Assoc. Comput. Mach..||",Selecting Capacities in Computer Communication Systems
"Marc J. Rochkind&&Bell Laboratories, Murray Hill, NJ, USA|","The Source Code Control System (SCCS) is a software tool designed to help programming projects control changes to source code. It provides facilities for storing, updating, and retrieving all versions of modules, for controlling updating privileges for identifying load modules by version number, and for recording who made each software change, when and where it was made, and why. This paper discusses the SCCS approach to source code control, shows how it is used and explains how it is implemented.",10.1109/TSE.1975.6312866,IEEE Transactions on Software Engineering,"Control systems,Software,Documentation,Libraries,Laboratories,Process control",,The source code control system
"Z. Manna&&Department of Computer Science, University of Stanford, Stanford, CA, USA|R. Waldinger&&Artificial Intelligence Center, SRI International, Inc., Menlo Park, CA, USA|","Deductive techniques are presented for deriving programs systematically from given specifications. The specifications express the purpose of the desired program without giving any hint of the algorithm to be employed. The basic approach is to transform the specifications repeatedly according to certain rules, until a satisfactory program is produced. The rules are guided by a number of strategic controls. These techniques have been incorporated in a running program-synthesis system, called DEDALUS.",10.1109/TSE.1979.234198,IEEE Transactions on Software Engineering,"Artificial intelligence,Computer languages,Specification languages,Algorithms,Programmable logic arrays,High level languages,Vocabulary,Software engineering,Computer science,Mathematics","R. Aubin, ""Some generalization heuristics in proofs by induction"", Proc. IRIA Symp. Proving and Improving Programs, pp. 197-208, 1975-July.||R. M. Balzer, Automatic programming, Sept. 1972.||R. M. Balzer, N. Goldman and D. Wile, ""Informality in program specifications"", Proc. 5th Int. Joint Conf Artificial Intelligence, pp. 389-397, 1977-Aug.||D. Barstow, ""A knowledge-based system for automatic program construction"", Proc. 5th Int. Joint Conf. Artificial Intelligence, pp. 382-388, 1977-Aug.||A. W. Biermann, ""Approaches to automatic programming"" in Advances in Computers, New York:Academic, vol. 15, pp. 1-63, 1976.||A. W. Biermann and R. Krishnaswamy, ""Constructing programs from example computations"", IEEE Trans. Software Eng., vol. SE-2, pp. 141-153, Sept. 1976.||W. W. Bledsoe and M. Tyson, ""Typing and proof by cases in program verification"" in Machine Intelligence 8: Machine Representations of Knowledge, England, Chichester:Ellis Horwood, Ltd., pp. 30-51, 1977.||R. S. Boyer and J S. Moore, ""Proving theorems about LISP functions"", J. Ass. Comput. Mach., vol. 22, pp. 129-144, Jan. 1975.||R. S. Boyer and J. S. Moore, ""A lemma driven automatic theorem prover for recursive function theory"", Proc. 5th Int. Joint Conf Artificial Intelligence, pp. 511-519, 1977-Aug.||D. Brotz, Proving theorems by mathematical induction, 1973.||J. R. Buchanan and D. C. Luckham, On automating the construction of programs, May 1974.||R. M. Burstall, ""Proving properties of programs by structural induction"", Computer J., vol. 12, pp. 41-48, Feb. 1969.||R. M. Burstall and J. Darlington, ""A transformation system for developing recursive programs"", J. Ass. Comput. Mach., vol. 24, pp. 44-67, Jan. 1977.||K. Clark and S. Sickel, ""Predicate logic: A calculus for deriving programs"", Proc. 5th Int. Joint Conf. Artificial Intelligence, pp. 419-420, 1977-Aug.||O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||J. Darlington, ""Applications of program transformation to program synthesis"", Proc. IRIA Symp. Proving and Improving Programs, pp. 133-144, 1975-July.||J. Darlington and R. M. Burstall, ""A system which automatically improves programs"", Acta Informatica, vol. 6, no. 1, pp. 41-60, 1976.||N. Dershowitz and Z. Manna, ""The evolution of programs: A system for automatic program modification"", IEEE Trans. Software Eng., vol. SE-3, pp. 377-385, Nov. 1977.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||R. W. Floyd, ""Assigning meaning to programs"", Proc. Symp. Applied Mathematics, vol. 19, pp. 19-32, 1967.||S. L. Gerhart, ""Correctness-preserving program transformations"", Proc. 2nd Symp. Principles of Programming Languages, pp. 54-66, 1975-Jan.||C. C. Green, ""Application of theorem proving to problem solving"", Proc. Int. Joint Conf. Artificial Intelligence, pp. 219-239, 1969-May.||C. C. Green, ""The design of the PSI program synthesis system"", Proc. 2nd Int. Conf. Software Eng., pp. 4-18, 1976-Oct.||J. V. Guttag, E. Horowitz and D. R. Musser, Abstract data types and software validation, Aug. 1976.||S. Hardy, ""Synthesis of LISP programs from examples"", Proc. 4th Int. Joint Conf. Artificial Intelligence, pp. 240-245, 1975-Sept.||G. E. Heidorn, ""Automatic programming through natural language dialogue: A survey"", IBM J. Res. Develop., vol. 20, pp. 302-313, July 1976.||C. Hewitt, Description and theoretical analysis (using schemata) of PLANNER: A language for proving theorems and manipulat ing models in a robot, Apr. 1971.||C. Hewitt, Synthesis of pure abstract data structures from conceptual representations using constraint analysis, Dec. 1977.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 583.||E. Kant, ""The selection of efficient implementations for a high‑level language"", Proc. Symp. Artificial Intelligence and Programming Languages, pp. 140-146, 1977-Aug.||D. E. Knuth, ""Structured programming with go to statements"", Computing Serveys, vol. 6, pp. 261-301, Dec. 1974.||R. Kowalski, ""Predicate logic as a programming language"", IFIPS Proc. 19 74, 1974-Aug.||R. C. T. Lee, C. L. Chang and R. J. Waldinger, ""An improved program-synthesizing algorithm and its correctness"", Commun. Ass. Comput. Mach., vol. 17, pp. 211-217, Apr. 1974.||B. H. Liskov and S. N. Zilles, ""Specification techniques for data abstractions"", IEEE Trans. Software Eng., vol. SE-1, pp. 7-18, Mar. 1975.||J. R. Low, Automatic Coding: Choice of Data Structures, Switzerland, Basel:Birkhauser Verlag, 1976.||D. C. Luckham and J. R. Buchanan, ""Automatic generation of programs containing conditional statements"", Proc. Conf. Artificial Intelligence and the Simulation of Behaviour, pp. 102-126, 1974-July.||Z. Manna and R. J. Waldinger, ""Toward automatic program synthesis"", Commun. Ass. Comput. Mach., vol. 14, pp. 151-165, Mar. 1971.||Z. Manna and R. J. Waldinger, ""Knowledge and reasoning in program synthesis"", Artificial Intelligence, vol. 6, no. 2, pp. 175-208, 1975.||E. D. Sacerdoti, ""The nonlinear nature of plans"", Proc. 4th Int. Joint Conf. Artificial Intelligence, pp. 206-214, 1975-Sept.||J. T. Schwartz, ""Automatic and semiautomatic optimization of SETL"", Proc. Symp. Very High Level Languages, pp. 43-49, 1974-Mar.||L. Siklossy, ""The synthesis of programs from their properties and the insane heuristic"", Proc. 3rd Texas Conf Computing Systems, 1974.||H. A. Simon, ""Experiments with a heuristic compiler"", J. Ass. Comput. Mach., vol. 10, no. 4, pp. 493-506, Oct. 1963.||Representation and Meaning, NJ, Englewood Cliffs:Prentice-Hall, 1972.||T. A. Standish, D. C. Harriman, D. F. Kibler and J. M. Neighbors, Improving and refining programs by program manipulation, Feb. 1976.||P. D. Summers, ""A methodology for LISP program construction from examples"", J. Ass. Comput. Mach., vol. 24, pp. 161-175, Jan. 1977.||G. J. Sussman, A Computer Model of Skill Acquisition, New York:American Elsevier, 1975.||G. J. Sussman, ""Electrical design: A problem for artificial intelligence research"", Proc. 5th Int. Joint Conf. Artificial Intelligence, pp. 894-900, 1977-Aug.||A. Tate, ""Interacting goals and their use"", Proc. 4th Int. Joint Conf. Artificial Intelligence, pp. 215-218, 1975-Sept.||INTERLISP Reference Manual, 1974.||J. W. Ulrich and R. Moll, ""Program synthesis by analogy"", Symp. Artificial Intelligence and Programming Languages, pp. 22-28, 1977-Aug.||R. J. Waldinger, ""Achieving several goals simultaneously"" in Machine Intelligence 8: Machine Representations of Knowledge, England, Chichester:Ellis Horwood, Ltd., pp. 94-136, 1977.||R. J. Waldinger and R. C. T. Lee, ""PROW: A step toward automatic program writing"", Proc. Int. Joint Conf. Artificial Intelligence, pp. 241-252, 1969-May.||D. H. D. Warren, WARPLAN: A system for generating plans, June 1974.||D. H. D. Warren, ""Generating conditional plans and programs"", Proc. Conf. Artificial Intelligence and Simulation of Behaviour, pp. 344-354, 1976-July.||B. Wegbreit, ""Goal-directed program transformation"", Proc. 3rd ACM Symp. Principles of Programming Languages, pp. 153-170, 1976-Jan.||A QLISP Reference Manual, Mar. 1976.||N. Wirth, ""On the composition of well-structured programs"", Computing Surveys, vol. 6, pp. 247-259, Dec. 1974.||",Synthesis: Dreams → Programs
"D. Skeen&&Department of Computer Science, Cornell University, Ithaca, NY, USA|M. Stonebraker&&Department of Electrical Engineering and Computer Science, University of California, Berkeley, CA, USA|","A formal model for atomic commit protocols for a distributed database system is introduced. The model is used to prove existence results about resilient protocols for site failures that do not partition the network and then for partitioned networks. For site failures, a pessimistic recovery technique, called independent recovery, is introduced and the class of failures for which resilient protocols exist is identified. For partitioned networks, two cases are studied: the pessimistic case in which messages are lost, and the optimistic case in which no messages are lost. In all cases, fundamental limitations on the resiliency of protocols are derived.",10.1109/TSE.1983.236608,IEEE Transactions on Software Engineering,"Computer crashes,Protocols,Transaction databases,Database systems,Distributed databases,Communication networks,Intelligent networks,Indexes,Fault tolerant systems,Computer science","A. V. Aho, J. D. Ullman and M. Yannakakis, ""Modeling communications protocols by automata"", Proc. 20th Annu. Symp. Foundations Comput. Sci., pp. 267-273, 1979-Oct.-29-31.||P. Alsberg and J. Day, ""A principle for resilient sharing of distributed resources"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||G. V. Bochmann, ""Finite state description of communication protocols"", Comput. Networks, vol. 2, pp. 361-372, Oct. 1977.||J. N. Gray, ""Notes on database operating systems"" in Operating Systems: An Advanced Course, New York:Springer-Verlag, 1979.||M. Hammer and D. Shipman, ""Reliability mechanisms for SDD-1: A system for distributed databases"", ACM Trans. Database Syst., vol. 5, pp. 431-466, Dec. 1980.||B. Lampson and H. Sturgis, Crash recovery in a distributed storage system, 1976.||B. G. Lindsay, Notes on distributed databases, July 1979.||R. Lorie, ""Physical integrity in a large segmented data base"", ACM Trans. Database Syst., vol. 2, Mar. 1977.||D. A. Menasce and R. R. Muntz, ""Locking and deadlock detection in distributed databases"", IEEE Trans. Software Eng., vol. SE-5, pp. 195-202, May 1979.||P. M. Merlin, ""A methodology for the design and implementation of communication protocols"", IEEE Trans. Commun., vol. COM‑24, pp. 614-621, 1976.||J. B. Rothnie and N. Goodman, ""A survey of research and development in distributed database management"", Proc. IEEE 3rd Int. Conf. Very Large Databases, 1977.||D. Skeen, ""Nonblocking commit protocols"", SIGMOD Int. Conf. Management of Data, 1981.||D. Skeen, Crash recovery in a distributed database management system, 1982.||M. Stonebraker, ""Concurrency control and consistency of multiple copies in distributed INGRES"", IEEE Trans. Software Eng., vol. SE-5, May 1979.||R. Schapiro and R. Milistein, ""Failure recovery in a distributed database system"", Proc. 1978 COMPCON Conf., 1978-Sept.||L. Svobodova, ""Reliability issues in distributed information processing systems"", Proc. 9th IEEE Fault Tolerant Comput. Conf., 1979-June.||",A Formal Model of Crash Recovery in a Distributed System
"W. Dzida&&Institut für Software-Technologie, Gesellschaft für Mathematick und Datenverarbeitung GmbH, Bonn, Germany|S. Herda&&Institut für Software-Technologie, Gesellschaft für Mathematick und Datenverarbeitung GmbH, Bonn, Germany|W.D. Itzfeldt&&Institut für Software-Technologie, Gesellschaft für Mathematick und Datenverarbeitung GmbH, Bonn, Germany|","User-perceived quality of interactive systems is defined in terms of statistically nonoverlapping categories, so-called dimensions or factors Categories are identified by factor analysis and represent a dimensional concept of the quality of interactive systems as perceived by its users. Each category describes essential user requirements.",10.1109/TSE.1978.231511,IEEE Transactions on Software Engineering,"Interactive systems,Software quality,Human factors,Multidimensional systems,Quality assessment,Software systems,Design engineering,Systems engineering and theory,System analysis and design","J. A. Bair, ""Human information processing in man-computer systems"", Proc. Int. Commun. Assoc., 1971-Apr.-22-24.||B. W. Boehm, J. R. Brown, H. Kaspar, M. Lipow, G. J. MacLeod and M. J. Merritt, Characteristics of software quality, CA, Redondo Beach, Dec. 1973.||B. W. Boehm, J. R. Brown and M. Lipow, ""Quantitative evaluation of software quality"", Proc. IEEE-ACM 2nd Int. Conf Software Eng., pp. 592-605, 1976-Oct.||D. R. Cheriton, ""Man-machine interface design for timesharing systems"", Proc. ACM Annu. Conf., pp. 362-366, 1976-Oct.-20-22.||T. A. Dolotta, M. I. Bernstein, R. S. Dickson, N. A. France, B. A. Rosenblatt, D. M. Smith, et al., Data Processing in 1980-1985 A Study of Potential Limitations to Progress, New York:Wiley-Interscience, 1976.||W. Dzida, S. Herda, W. D. Itzfeldt and H. Schubert, Zur Benutzerfreundlichkeit von Dialogsystemen Ergebnisse einer Umfrage, Selbstverlag GMD, Apr. 1977.||W. Dzida, S. Herda and W. D. Itzfeldt, Factors of user-perceived quality of interactive systems, Selbstverlag GMD, Jan. 1978.||F. Gebhardt, FAST—Ein Fortran IV Programm zur Bestimmung der Ähnlichkeit von Faktormatrizen, Gesellschaft fur Mathematik und Datenverarbeitung, 1967.||F. Gebhardt, ""Ober die Ahnlichkeit von Faktormatrizen"", Psychol. Beitrage, vol. 10, pp. 591-599, 1968.||J. F. Heafner, Protocol analysis of man-computer languages: Design and preliminary findings, Univ. Southem California, July 1975.||L. A. Miller and J. C. Thomas, ""Behavioral issues in the use of interactive systems: Part I. General system issues"", Proc. IBM Seminar on Interactive Systems, 1976-Sept.-22-24.||J. R. Nesselroade and P. B. Baltes, ""On a dilemma of comparative factor analysis: A study of factor matching based on random data"", Educational Psychol. Meas., vol. 30, pp. 935-948, 1970.||N. H. Nie, C. H. Hull, J. G. Jenkins, K. Steinbrenner and D. H. Bent, SPSS: Statistical Package for the Social Sciences, New York:McGraw-Hill, 1975.||J. E. Overall and C. J. Klett, Applied Multivariate Analysis, New York:McGraw-Hill, 1972.||R. J. Rubey and R. D. Hartwick, ""Quantitative measurement of program quality"", Proc. 23rd ACM National Conf., pp. 671-677, 1968.||J. H. Thornley, ""What makes good human factors"", Proc. SHARE XLVII, pp. 1495-1501, 1976-August-15-20.||L. M. Weissman, ""Psychological complexity of computer programs An experimental methodology"", Ass. Comput. Mach. SIGPLAN Notices, vol. 9, pp. 25-36, June 1974.||",User-Perceived Quality of Interactive Systems
"B. Walke&&Research Institute of Ulm, AEG Telefunken, Ulm, Germany|W. Rosenbohm&&Research Institute of Ulm, AEG Telefunken, Ulm, Germany|","An infinite queue single server model is considered where requests arrive from independent Poisson streams and demand service according to arbitrary distribution functions which may be different for different requests. Associated with each request is an urgency number which, together with request's time of arrival, defines a deadline for beginning its service. This relative urgency discipline has at its two limiting case the fint-come first-serve and head of the line discipline. In [1] the mean waiting time is computed approximately and dose bounds are derived there. Here we present simulation results, derive close approximations for the tails of the waiting-time distribution functions and compare them to those of the two limiting cases.",10.1109/TSE.1980.230477,IEEE Transactions on Software Engineering,"Real time systems,Reactive power,Random variables,Distribution functions","B. Walke, ""Improved bounds and an approximation for a dynamic priority queue"", Proc. 3rd Int. Symp. Modeling and Perform. Eval. Comput. Syst., pp. 321-346, 1978.||J. R. Jackson, ""Waiting time distributions for queues with dynamic priorities"", Naval Res. Logist. Quart., vol. 9, pp. 31-46, Mar. 1962.||R. W. Conway, W. L. Maxwell and L. W. Miller, Theory of Scheduling, MA, Reading:Addison-Wesley, 1967.||B. Walke and W. Rosenbohm, ""Waiting-time distributions for deadline oriented serving"", Proc. 4th Int. Symp. Modeling and Perform. Eval. Comput. Syst., 1979-Feb.-6-8.||E. B. Veklerov and I. M. Dukhovnyi, ""Queueing systems with time-limited categorical priority"", Probl. Inform. Transm., vol. 12, pp. 73-79, Jan.-Mar. 1976.||H. M. Goldberg, Jackson's conjecture on earliest due date scheduling, Canada, Alberta, Edmonton:Dep. Finance and Management Sci., Univ. Alberta, Sept. 1978.||",Deadline-Oriented Servicing: Waiting-Time Distributions
"W.A. Wulf&&The Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|R.L. London&&Information Sciences Institute, University of Southern California, Marina del Rey, CA, USA|M. Shaw&&The Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|","The programming language Alphard is designed to provide support for both the methodologies of ""well-structured"" programming and the techniques of formal program verification. Language constructs allow a programmer to isolate an abstraction, specifying its behavior publicly while localizing knowledge about its implementation. The verification of such an abstraction consists of showing that its implementation behaves in accordance with its public specifications; the abstraction can then be used with confidence in constructing other programs, and the verification of that use employs only the public specifications.",10.1109/TSE.1976.233830,IEEE Transactions on Software Engineering,"Computer languages,Costs,Programming profession,Data structures,Symbiosis,Design methodology,Humans,Computerized monitoring,Computer science","F. T. Baker, ""Chief programmer team management of programming"", IBM Syst. J., vol. 11, pp. 56-73, 1972.||P. Brinch Hansen, ""7"" in Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, 1973.||P. Brinch Hansen, ""Concurrent Pascal report"", Information Science Rep., 1975.||P. Brinch Hansen, ""The programming language concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||F. P. Brooks, The Mythical Man-Month: Essays on Software Engineering, MA, Reading:Addison-Wesley, 1975.||R. M. Burstall, ""Program proving as hand simulation with a little induction"", Proc. IFIP Congress 74, pp. 308-312, 1974.||O.-J. Dahl and C. A. R. Hoare, ""Hierarchical program structures"" in Structured Programming, New York:Academic, pp. 175-220, 1972.||Proc SIGPLAN/SIGMOD Conf. Data: Abstraction Definition and Structure and Supplement to the Proc., 1976-Mar.||E. W. Dijkstra, ""A constructive approach to the problem of program correctness"", BIT, vol. 8, pp. 174-186, July 1968.||E. W. Dijkstra, ""Go to statement considered harmful"", Commun. Ass. Comput. Mach., vol. 11, pp. 147-148, Mar. 1968.||E. W. Dijkstra, ""Notes on Structured programming"" in Structured Programming, New York:Academic, pp. 1-82, 1972.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. Applied Mathematics, vol. 19, pp. 19-32, 1967.||Proc. Symp. High Cost of Software, 1973-Sept.||D. Gries, ""On structured programming–A reply to Smoliar"", ACM Forum Commun. Ass. Comput. Mach., vol. 17, pp. 655-657, Nov. 1974.||J. V. Guttag, The specification and application to programming of abstract data types, Sept. 1975.||J. V. Guttag, E. Horowitz and D. R. Musser, Abstract data types and software validation, 1976.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||C. A. R. Hoare, ""Notes on data structuring"" in Structured Programming, New York:Academic, pp. 83-174, 1972.||C. A. R. Hoare, ""Proof of correctness of data representations"", Acta Informatica, vol. 1, pp. 271-281, 1972.||A. K. Jones and W. A. Wulf, ""Towards the design of secure systems"", Software-Practice and Experience, vol. 5, pp. 321-336, 1975.||A. K. Jones and B. H. Liskov, An access control facility for programming languages, 1976.||B. Lampson, ""Protection"", Proc. 5th Princeton Conf. Information Sciences and Systems, pp. 437-443, 1971.||B. H. Liskov and S. Zilles, ""Programming with abstract data types"", SIGPLAN Notices, vol. 9, pp. 50-59, Apr. 1974.||B. H. Liskov and S. Zilles, ""Specification techniques for data abstractions"", IEEE Trans. Software Eng., vol. SE-1, pp. 7-19, Mar. 1975.||R. L. London, ""A view of program verification"", Proc. Int. Conf. Reliable Software, pp. 534-545, 1975-Apr.||J. H. Morris, ""Protection in programming languages"", Commun. Ass. Comput. Mach., vol. 16, pp. 15-21, Jan. 1973.||J. J. Morris, ""Types are not sets"", Proc. ACM Symp. Principles of Programming Languages, pp. 120-124, 1973.||D. L. Parnas, ""Information distribution aspects of design methodology"", Proc. IFIP Congr. 1971, pp. 26-30.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comp. Mach., vol. 15, pp. 1053-1058, Dec. 1972.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., vol. 15, pp. 330-336, May 1972.||""Proceedings of the international symposium on extensible languages"", SIGPLAN Notices, vol. 6, 1971-Dec.||M. Shaw, W. A. Wulf and R. L. London, Abstraction and verification in Alphard: Iteration and generators, 1976.||J. Spitzen and B. Wegbreit, ""The verification and synthesis of data structures"", Acta Informatica, vol. 4, pp. 127-144, 1975.||B. Wegbreit and J. M. Spitzen, ""Proving properties of complex data structures"", J. Ass. Comput. Mach., vol. 23, pp. 389-396, Apr. 1976.||G. M. Weinberg, The Psychology of Computer Programming, New York:Van Nostrand-Reinhold, 1971.||B. L. Whorf, ""A linguistic consideration of thinking in primitive communities"" in Language Thought and Reality, MA, Cambridge:MIT Press, 1956.||N. Wirth, ""Program development by stepwise refinement"", Commun. Ass. Comput. Mach., vol. 14, pp. 221-227, Apr. 1971.||W. Wulf and M. Shaw, ""Global variables considered harmful"", SIGPLAN Notices, vol. 8, pp. 28-34, Feb. 1973.||W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, et al., ""Hydra: The kernel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, pp. 337-345, June 1974.||W. A. Wulf, R. L. London and M. Shaw, Abstraction and verification in Alphard: Introduction to language and methodology, 1976.||S. N. Zilles, Abstract specifications for data types, CA, San Jose:IBM Research Laboratory, Jan. 1975.||",An Introduction to the Construction and Verification of Alphard Programs
"G.D. Ripley&&Department of Computer Science, University of Arizona Tucson, Tucson, AZ, USA|","This paper concems the representation and processing of data resulting from the measurement of programs written in high-level programming languages. The value of various ""perspectives"" of measurement results, especially in languages having many levels of activity, is illustrated. A representation of measurement data based on ideas from relational data bases is presented, in which perspectives can be represented as hierarchically-organized permuted projections of measurement data. Applications described include measurement of Snobol4 and Fortran programs.",10.1109/TSE.1977.231147,IEEE Transactions on Software Engineering,"Sampling methods,Computer languages,Application software,Programming profession,Software systems,Measurement,High level languages,Organizing,Computer science,Digital arithmetic","E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass. Comput. Mach., vol. 13, pp. 377-387, June 1970.||C. J. Date, An Introduction to Data Base Systems, MA, Reading:Addison-Wesley, 1975.||J. F. Gimpel, SITBOL Version 3.0, NJ, Holmdel:Bell Labs, Inc., 1973.||R. E. Griswold, The Macro Implementation of SNOBOL4 A Case Study of Machine-Independent Software Development, San Francisco:W. H. Freeman, 1972.||D. Ingalls, ""The execution time profile as a programming tool"" in Design and Optimization of Compilers, NJ, Englewood Cliffs:Prentice-Hall, pp. 107-128, 1972.||S. Jasik, ""Monitoring program execution on the CDC 6000 series machines"" in Design and Optimization of Compilers, NJ, Englewood Cliffs:Prentice-Hall, pp. 129-136, 1972.||D. E. Knuth, ""An empirical study of Fortran programs"", Software-Practice and Experience, vol. 1, pp. 105-133, April/June 1971.||G. D. Ripley and R. E. Griswold, ""Tools for the measurement of SNOBOL4 programs"", SIGPLAN Notices, vol. 10, pp. 36-52, May 1975.||G. D. Ripley, Instrumentation of Interpretive Snobol4 Systems, Nov. 1975.||D. B. Wortman, A Strdy of Language Directed Computer Design, 1972.||D. B. Wortman, ""Language directed computer performance evaluation"", Proc. Ass. Comput. Mach. Annual Conf., 1974.||",Program Perspectives: A Relational Representation of Measurement Data
"Susan Voigt&&NASA Langley Research Center, Hampton, VA, USA|","The use of software engineering aids in the design of a structural finite element analysis computer program for the CDC STAR-100 computer is described. Since members of the design team came from diverse backgrounds, both the unique features of the CDC STAR computer and structural analysis concepts and computing requirements had to be understood before design began. Nested functional diagrams to aid in communication among team members were used, and a standardized specification format to describe modules designed by various members was adopted. This is a report of work in progress where use of the functional diagrams provided continuity and helped resolve some of the problems arising in this long-running part-time project.",10.1109/TSE.1975.6312867,IEEE Transactions on Software Engineering,"Finite element methods,Vectors,Software engineering,Computers,Encoding,Algorithm design and analysis,Pipeline processing",,Program design by a multidisciplinary team
"K.S. Trivedi&&Department of Computer Science, Duke University, Durham, NC, USA|R.A. Wagner&&Department of Computer Science, Duke University, Durham, NC, USA|",This paper considers a computer configuration design problem. The computer system is modeled by a closed queuing network. The system throughput is the objective function to be maximized and the speed of the devices are the decision variables. A rich class of non-linear cost functions is considered.,10.1109/TSE.1979.234199,IEEE Transactions on Software Engineering,"Cost function,Throughput,Computer networks,Performance analysis,Network servers,Lagrangian functions,Constraint optimization,Design optimization,Modeling,Computer science","D. Ferrari, Computer Systems Performance Evaluation, NJ, Englewood Cliffs:Prentice-Hall, 1978.||L. Kleinrock, Queuing Systems Vol. II: Computer Applications, New York:Wiley-Interscience, 1976.||P. J. Denning and J. P. Buzen, ""The operational analysis of queuing network models"", Comput. Surveys, vol. 10, Sept. 1978.||Current Trends in Programming Methodology Volume III: Software Modeling, NJ, Englewood Cliffs:Prentice-Hall, 1978.||F. Baskett, K. M. Chandy, R. R. Muntz and F. Palacios-Gomez, ""Open closed and mixed networks of queues with different classes of customers"", J. Ass. Comput. Mach., vol. 22, pp. 248-260, 1975.||M. Phister, Data Processing Technology and Economics, CA, Santa Monica:Santa Monica Pubi., 1976.||W. F. Sharpe, The Economics of Computers, New York:Columbia Univ. Press, 1969.||K. M. Chandy, J. Hogarth and C. H. Sauer, ""Selecting capacities in queueing network models of computer/communication systems"", IEEE Trans. Software Eng., vol. SE-3, pp. 290-295, July 1977.||H. Kobayashi, ""Application of the diffusion approximation to queuing networks 1: Equilibrium queue distributions"", J. Ass. Comput. Mach., vol. 21, pp. 316-328, Apr. 1974.||W. W.-Y. Chiu, Analysis and applications of probabilistic models of multiprogrammed computer system, Dec. 1973.||S. K. Kachhal and S. R. Arora, ""Seeking configurational optimization in computer systems"", Proc. Ass Comput. Mach. Ann. Conf., pp. 96-101, 1975.||T. Kaneko, Optimization of storage heirarchy under multiprogramming environment, Jan. 1975.||J. P. Buzen and P. P. S. Chen, ""Optimal load balancing in memory hierarchies"", Proc. IFIP, pp. 18-22, 1974.||D. V. Foster, L. W. Dowdy and J. E. Ames, File assignment in a star network, 1977.||T. G. Price, Probability models of multiprogrammed computer systems, Dec. 1974.||J. P. Buzen, ""Analysis of system bottlenecks using a queuing network model"", Proc. ACM-SIGOPS Workshop on System Performance Evaluation, 1971-Apr.||K. S. Trivedi and R. E. Kinicki, ""A mathematical model for computer system configuration planning"" in Performance of Computer Installations, The Netherlands, Amsterdam:North Holland, pp. 323-332, 1978.||T. A. Welch, ""Memory hierarchy configuration analysis"", IEEE Trans. Comput., vol. C-27, pp. 408-413, May 1978.||D. G. Luenberger, Introduction to Linear and Nonlinear Programming, MA, Reading:Addison-Wesley, 1973.||G. Hadley, Nonlinear and Dynamic Programming, MA, Reading:Addison-Wesley, 1964.||R. E. Kinicki, Queuing models for computer system configuration planning, 1978.||K. M. Brown, ""A quadratically convergent Newton-like method based upon Gaussian elimination"", SIAM J. Numer. Anal., vol. 6, no. 4, pp. 560-569, 1969.||",A Decision Model for Closed Queuing Networks
"E. Wong&&Department of Electrical Engineering and Computer Sciences and the Electronics Research Laboratory, University of California, Berkeley, CA, USA|","In this paper an approach to processing distributed queries that makes explicit use of redundant data is proposed. The basic idea is to focus on the dynamics of materialization, defined as the collection of data and partial results available for processing at any given time, as query processing proceeds. In this framework the role of data redudancy in maximizing parallelism and minimizing data movement is clarified. What results is not only the discovery of new algorithms but an improved framework for their evaluation.",10.1109/TSE.1983.236731,IEEE Transactions on Software Engineering,"Query processing,Distributed databases,Parallel processing,Partitioning algorithms,Database systems,Costs,Computer science,Military computing,Dispersion,Database machines","P. A. Bernstein and D. W. Chiu, Using semi-joins to solve relational queries.||R. Epstein, M. Stonebraker and E. Wong, ""Distributed query processing in a relational data base system"", Proc. 1978 ACM‑SIGMOD Conf. Management of Data, 1978-June.||R. Epstein and M. Stonebraker, ""Analysis of distributed data base processing strategies"", Int. Conf. Very Large Data Bases, 1980-Oct.||G. D. Held, M. R. Stonebraker and E. Wong, ""INGRES–A relational data base system"", Proc. NCC, vol. 44, 1975.||A. Hevner and S. B. Yao, ""Query processing on a distributed data base"", Proc. 3rd Berkeley Workshop on Distributed Data Management and Computer Networks, 1978-Aug.||E. Wong, ""Retrieving dispersed data from SDD-1: A system for distributed databases"", 1977 Berkeley Workshop on Distributed Data Management and Computer Networks, 1977-May.||P. P. Chen, ""The entity-relational model–Towards a unified view of data"", ACM Trans. Database Syst., vol. 1, pp. 9-36, Mar. 1976.||E. Wong and R. H. Katz, ""Logical design and schema conversion for relational and DBTG databases"", Int. Conf. Entity-Relationship Approach to Systems Analysis and Design, 1980.||",Dynamic Rematerialization: Processing Distributed Queries Using Redundant Data
"D.L. Boyd&&Honeywell Corporate Technology Center, Bloomington, MN, USA|A. Pizzarello&&Large Information Systems Division, Honeywel, Inc., Phoenix, AZ, USA|","An overview of a design methodology called WELLMADE is presented. WELLMADE is a synthesis of results obtained from recent research on software engineering and the experience gained at HIS/Phoenix. The principles, procedures, and notation of WELLMADE are briefly outlined and an example is presented, illustrating the approach for deriving correct programs and the notation for its design specification.",10.1109/TSE.1978.231512,IEEE Transactions on Software Engineering,"Design methodology,Software design,Programming,Software engineering,Military computing,Information systems,Software tools,Costs,Software development management,Sufficient conditions","E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||D. L. Boyd, ""WELLMADE design methodology"", Honeywell Software Productivity Symp., 1977-Apr.||R. C. McGee and A. Pizzarello, ""Software development at LSEO‑Phoenix"", Honeywell Software Productivity Symp., 1977-Apr.||C. A. R. Hoare, ""Proof of correctness of data representation"", Acta Informatica, vol. 1, 1972.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-264, Dec. 1976.||R. C. McGee, Use of rational programming techniques for the development of reliable software, 1975.||Special Reference Manual, Jan. 1977.||M. Hamilton and S. Zeldin, Axes syntax description, 1976.||G. G. Davis and C. R. Vick, ""The software development system"", IEEE Trans. Software Eng., vol. SE-3, pp. 69-84, Jan. 1977.||J. V. Guttag, E. Horowitz and D. Musser, ""The design of data type specifications"", 2nd Int. Conf. Software Eng., 1976-Oct.||",Introduction to the Wellmade Design Methodology
"C.N. Fischer&&Department of Computer Science, University of Wisconsin, Madison, Madison, WI, USA|R.J. LeBlanc&&School of Information and Computer Science, Georgia Institute of Technology, Atlanta, GA, USA|","This paper considers the role of run-time diagnostic checking in enforcing the rules of the Pascal programming language. Run-time diagnostic checks must be both complete (covering all language requirements) and efficient. Further, such checks should be implemented so that the cost of enforcing the correct use of a given construct is borne by users of that construct. This paper descxibes simple and efficient mechanisms currently in use with a diagnostic Pascal compiler that monitor the run-time behavior of such sensitive Pascal constructs as pointers, variant records, reference (i.e., var) parameters, and with statements. The use of these mechanisms with related constructs in other languages is considered. Language modifications that simplify run-time checking ate also noted.",10.1109/TSE.1980.230482,IEEE Transactions on Software Engineering,"Runtime,Computer languages,Costs,Program processors,Testing,Degradation,Condition monitoring,Reactive power,Protection","Pascal User Manual and Report, 1976.||UW-Pascal reference manual, Oct. 1977.||B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell and G. J. Popek, ""Report on the programming language Euclid"", SIGPLAN Notices, vol. 12, Feb. 1977.||N. Wirth, ""An assessment of the programming language Pascal"", Proc. Int. Conf on Reliable Software, pp. 23-30, 1975-Apr.||J. Welsh, W. J. Sneeringer and C. A. R. Hoare, ""Ambiguities and insecurities in Pascal"", Software-Practice and Experience, vol. 7, pp. 685-696, 1977.||N. Wirth, Pascal Newsletter, vol. 5, pp. 29, Sept. 1976.||1975.||Preliminary Ada reference manual, June 1979.||C. N. Fischer and R. J. LeBlanc, ""Efficient implementation and optimization of run-time checking in Pascal"", SIGPLAN Notices, vol. 12, pp. 19-24, Mar. 1977.||O. Dahl, B. Myhrhaug and K. Nygaard, Simula 67 common base language, Norway, Oslo:Norwegian Computing Centre, 1970.||B. Liskov, An introduction to CLU, Cambridge:Mass. Inst. Technol., Feb. 1976.||""Revised report on the algorithmic language ALGOL 68"", Acta Informatica, vol. 5, pp. 1-236, 1975.||J. Welsh, ""Economic range checks in Pascal"", Software-Practice and Experience, vol. 8, pp. 85-97, 1978.||O. Lecarme and P. Desjardins, ""More comments on the programming language Pascal"", Acta Informatica, vol. 4, pp. 231-243, 1975.||A. M. Addyman, ""The BSI/ISO working draft of standard Pascal"", Pascal News, vol. 14, pp. 27-28, Jan. 1979.||R. A. DeMillo, R. J. Lipton and A. J. Perlis, ""Social processes and proofs of theorems and programs"", Commun. ACM, vol. 22, pp. 271-280, May 1979.||M. Schaefer, A Mathenatical Theory of Global Program Optimization, NJ, Englewood Cliffs:Prentice-Hall, 1973.||W. D. Elliott, On proving the absence of execution errors.||",The Implementation of Run-Time Diagnostics in Pascal
"H.D. Mills&&IBM, Corporation, Gaithersburg, MD, USA|","Software development has emerged as a critical bottleneck in the human use of automatic data processing. Beginning with ad hoc heuristic methods of design and implementation of software systems, problems of software maintenance and changes have become unexpectedly large. It is contended that improvement is possible only with more rigor in software design and development methodology. Rigorous software design should survive its implementation and be the basis for further evolution. Software development should be done incrementally, in stages with continuous user participation and replanning, and with design-to-cost programming within each stage.",10.1109/TSE.1976.233831,IEEE Transactions on Software Engineering,"Data processing,Hardware,Humans,Software design,Software maintenance,Programming profession,Government,Milling machines,Design methodology,Software systems","C. Alexander, Notes on the Synthesis of Form, MA, Cambridge:Harvard Univ. Press, 1970.||F. T. Baker, ""Structured programming in a production programming environment"", Proc. Int. Conf. Reliable Software, 1975-Apr.||ACM SIGPLAN Notices, vol. 10, pp. 172-185, June 1975.||V. R. Basili and A. J. Turner, ""Iterative enhancement: A practical technique for software development"", IEEE Trans. Software Eng., vol. 1, pp. 390-396, Dec. 1975.||F. P. Brooks, The Mythical Man-Month: Essays on Software Engineering, MA, Reading:Addison-Wesley, 1975.||O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||E. W. Dijkstra, ""GOTO statements considered harmful"", Comm. ACM, vol. 11, pp. 147-148, Mar. 1968.||J. D. Gannon and J. J. Horning, ""The impact of language design on the production of reliable software"", Proc. Int. Conf. Reliable Software, 1975-Apr.||ACM SIGPLAN Notices, vol. 10, pp. 10-22, June 1975.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Comm. ACM, vol. 12, pp. 576-583, Oct. 1970.||C. A. R. Hoare and N. Wirth, ""An axiomatic definition of the programming language PASCAL"", Acta Informatica, vol. 2, pp. 335-355, 1973.||M. A. Jackson, Principles of Program Design, New York:Academic, 1975.||B. Liskov and S. Zilles, ""Specification techniques for data abstractions"", Proc. Int. Conf. Reliable Software, 1975-Apr.||ACM SIGPLAN Notices, vol. 10, pp. 72-87, June 1975.||H. D. Mills, ""How to write correct programs and know it"", Proc. Int. Conf. Reliable Software, 1975-Apr.||ACM SIGPLAN Notices, vol. 10, pp. 363-370, June 1975.||H. D. Mills, ""The new math of computer programming"", Comm. ACM, vol. 18, pp. 43-48, Jan. 1975.||R. E. Noonan, ""Structured programming and formal specification"", IEEE Trans. Software Eng., vol. 1, pp. 421-425, Dec. 1975.||D. L. Parnas, ""The influence of software structure on reliability"", Proc. Int. Conf. Reliable Software, 1975-Apr.||ACM SIGPLAN Notices, vol. 10, pp. 358-362, June 1975.||N. Wirth, ""An assessment of the programming language PASCAL"", Proc. Int. Conf. Reliable Software, 1975-Apr.||ACM SIGPLAN Notices, vol. 10, pp. 23-30, June 1975.||N. Wirth, Algorithms + Data Structures = Programs, NJ, Englewood Cliffs:Prentice-Hall, 1976.||",Software Development
"A. Klinger&&Department of Computer Science, University of California, Los Angeles, CA, USA|","This paper deals with obtaining a data base for test and evaluation of large software systems, when at most, only a few typical pattern instances are available. Data structure variation is proposed and demonstrated for some simple images. Relationships to fundamental concepts in computer science methodology are discussed.",10.1109/TSE.1977.231148,IEEE Transactions on Software Engineering,"Data structures,Software testing,Computer science,System testing,Speech recognition,Computational modeling,Costs,Pattern recognition,Pattern analysis,Management information systems","M. Minsky, ""Steps toward artificial intelligence"", Proc. IRE, vol. 49, pp. 8-30, 1961-Jan.||Computer and Thought, New York:McGraw‑Hill, pp. 406-450, 1963.||R. O. Duda and P. E. Hart, Pattern Classification and Scene Analysis, New York:Wiley, 1973.||A Million Random Digits with 100000 Normal Deviates, IL, Glencoe:The Free Press, 1955.||""Pattern recognition data bases a summary of documentation"", IEEE Comput., vol. 8, pp. 69, May 1975.||D. E. Knuth, ""Fundamental algorithms"" in The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 1, 1968.||K. S. Fu, Syntactic Methods in Pattern Recognition, New York:Academic, 1969.||L. Kanal and B. Chandrasekaran, ""On linguistic statistical and mixed models for pattern recognition"" in Frontiers of Pattern Recognition, New York:Academic, pp. 163-192, 1972.||A. Klinger, ""Patterns and search statistics"" in Optimizing Methods in Statistics, New York:Academic, pp. 303-337, 1971.||T. Winograd, Understanding Natural Language, New York:Academic, 1972.||D. R. Reddy, ""A model and a system for machine recognition of speech"", IEEE Trans. Audio Electroacoust., vol. AU-21, pp. 229-238, June 1973.||J. F. Rulifson, J. A. Derksen and R. J. Waldinger, QA4: A procedural calculus for intuitive reasoning, CA, Menlo Park:Stanford Res. Inst., 1972.||A. Rosenfeld, Picture Processing by Computer, New York:Academic, 1972.||S. L. Horowitz and T. Pavlidis, Picture segmentation by a tree traversal algorithm, July 1974.||A. Klinger, ""Data structures and pattern recognition"", 1973 Proc. 1st Int. Joint Conf. on Pattern Recognition, pp. 497-498, 1973.||A. L. Hodgkin and A. F. Huxley, ""Regular decomposion and picture structure"", 1974 Proc. IEEE Conf. on Systems Man and Cybernetics, pp. 307-310, 1974.||A. L. Hodgkin and A. F. Huxley, ""Data structures and pattern recognition"" in Advances in Information Systems Science, New York:Plenum, 1976.||A. L. Hodgkin and A. F. Huxley, ""Sampling images: Search statistics and computer pattern recognition"", 1975 Proc. Computer Science and Statistics: 8th Annu. Symp. on the Interface, 1975-Feb.||R. Hooper and A. Klinger, ""Artificial pattern generation"", 1975 Proc. Conf. on Computer Graphics Pattern Recognition and Data Structures, pp. 228-231, 1975-May.||A. Klinger and C. Dyer, Experiments on picture representation using regular decomposition, Dec. 1974.||Computer Graphics and Image Processing, vol. 5, pp. 68-105, 1976.||B. Bullock, The performance of edge operators on images with texture, Oct. 1974.||A. V. Oppenheim, R. W. Schafer and T. G. Stockham, ""Nonlinear filtering of multiplied and convolved signals"", Proc. IEEE, vol. 56, pp. 1264-1291, 1968-Aug.||Proc. IEEE, vol. 56, 1968-June.||A. L. Hodgkin and A. F. Huxley, ""Currents carried by sodium and potassium ions through the membrane of the giant axon of loligo"", J. Physiol., vol. 116, pp. 449-472, Apr. 1952.||",Artificial Patterns
"Stephen R. Mccammon&&Missile and Surface Radar Division, RCA, Moorestown, NJ, USA|","Diligent application of software engineering techniques has achieved outstanding programmer productivity and a high degree of software excellence in the development of the program for a large real time system simulator. Moreover these programming efficiencies were achieved in a research environment where both the software and hardware requirements were meagrely defined initially and substantially modified during the course of the project. The software development tools used include the following: 1) program generation center, 2) system design team, 3) software team 4) modular top-down programming,and 5) structured programming. Continuous visibility by technically competent management has proved to be fundamental to success.",10.1109/TSE.1975.6312868,IEEE Transactions on Software Engineering,"Real-time systems,Hardware,Schedules,Operating systems,Software engineering,Computers",,Applied software engineering: A real-time simulator case history
"J.L. Bentley&&Departments of Computer Science and Mathematics, Carnegie Mellon University, Pittsburgh, PA, USA|","The multidimensional binary search tree (abbreviated k-d tree) is a data structure for storing multikey records. This structure has been used to solve a number of ""geometric"" problems in statistics and data analysis. The purposes of this paper are to cast k-d trees in a database framework, to collect the results on k-d trees that have appeared since the structure was introduced, and to show how the basic data structure can be modified to facilitate implementation in large (and very large) databases.",10.1109/TSE.1979.234200,IEEE Transactions on Software Engineering,"Multidimensional systems,Binary search trees,Tree data structures,Spatial databases,Statistical analysis,Data analysis,Database systems,Binary trees,Protection,Database languages","J. L. Bentley, ""Multidimensional binary search trees used for associative searching"", Commun. Ass. Comput. Mach., vol. 19, pp. 509-517, Sept. 1975.||J. L. Bentley, ""Decomposable searching problems"", Inform. Process. Lett., 1979.||J. L. Bentley and W. A. Burkhard, ""Heuristics for partial match retrieval data base design"", Inform. Process. Lett., vol. 4, pp. 132-135, Feb. 1976.||J. L. Bentley and J. H. Friedman, ""Fast algorithms for constructing minimal spanning trees in coordinate spaces"", IEEE Trans. Comput., vol. C-27, pp. 97-105, Feb. 1978.||J. L. Bentley and J. H. Friedman, ""Algorithms and data structures for range queries"", Proc. Computer Science and Statistics: 11th Ann. Symp. on the Interface, pp. 297-307, 1978-Mar.||J. L. Bentley and D. F. Stanat, ""Analysis of range searches in quad trees"", Inform. Process. Lett., vol. 3, pp. 170-173, July 1975.||||J. J. Friedman, J. L. Bentley and R. A. Finkel, ""An algorithm for finding best matches in logarithmic expected time"", ACM Trans. Mathematical Software, vol. 3, pp. 209-226, Sept. 1977.||C. C. Gotlieb and L. R. Gotlieb, Data Types and Structures, NJ, Englewood Cliffs:Prentice-Hall, pp. 357-363.||D. E. Knuth, The Art of Computer Programming Vol. 3: Sorting and Searching, MA, Reading:Addison-Wesley.||U. Lauther, ""4-dimensional binary search trees as a means to speed up associative searches in design rule verification of integrated circuits"", J. Design Automation and Fault-Tolerant Computing, vol. 2, pp. 241-247, July 1978.||D. T. Lee and C. K. Wong, ""Worst-case analysis for region and partial region searches in multidimensional binary search trees and balanced quad trees"", Acta Informatica, vol. 9, pp. 23-29.||W. C. Lin, R. C. T. Lee and H. C. Du, Towards a unifying theory for multi-key file systems, pp. 67.||R. L. Rivest, ""Partial match retrieval algorithms"", SIAM J. Comput, vol. 5, pp. 19-50, Mar. 1976.||Y. V. Silva-Filho, Average case analysis of region search in balanced k-d trees, pp. 16, Nov. 1978.||Y. V. Silva-Filho, Multidimensional search trees as indices of files, pp. 6, Dec. 1978.||B. W. Weide, ""Space-efficient on-line selection algorithms"", Proc. Computer Science and Statistics: 11th Annu. Symp. on the Interface, pp. 308-311, 1978-Mar.||G. Wiederhold, ""3 and 4"" in Database Design, New York:McGraw-Hill.||D. E. Willard, Balanced forests of k-d* trees as a dynamic data structure, Harvard Univ., pp. 29, 1978.||||B. Woodford, An investigation of some new tree structures, Aug. 1977.||J. E. Zolnowsky, Topics in computational geometry.||||pp. 53.||",Multidimensional Binary Search Trees in Database Applications
"P.A. Bernstein&&Aiken Computation Laboratory, Harvard University, Cambridge, MA, USA|N. Goodman&&Aiken Computation Laboratory, Harvard University, Cambridge, MA, USA|Ming-Yee Lai&&Bell Laboratories, Inc., Murray Hill, NJ, USA|","Concurrency control algorithms for database systems are usually regarded as methods for synchronizing Read and Write operations. Such methods are judged to be correct if they only produce serializable executions. However, Reads and Writes are sometimes inaccurate models of the operations executed by a database system. In such cases, serializability does not capture all aspects of concurrency control executions. To capture these aspects, we describe a proof schema for analyzing concurrency control correctness. We illustrate the proof schema by presenting two new concurrency algorithms for distributed database systems.",10.1109/TSE.1983.236732,IEEE Transactions on Software Engineering,"Control system analysis,Algorithm design and analysis,Concurrency control,Database systems,Transaction databases,Strontium,Laboratories,Control systems,Concurrent computing,Distributed databases","P. A. Bernstein and N. Goodman, ""Concurrency control in distributed database systems"", ACM Comput. Surveys, vol. 13, June 1981.||R. Bayer, H. Heller and A. Reiser, ""Parallelism and recovery in database systems"", ACM Trans. Database Syst., vol. 5, June 1980.||P. A. Bernstein and D. W. Shipman, ""The correctness of concurrency mechanisms in a system for distributed database (SSD-1)"", ACM Trans. Database Syst., vol. 5, Mar. 1980.||P. A. Bernstein, D. W. Shipman and W. S. Wong, ""Formal aspects of serializability in database concurrency control"", IEEE Trans. Software Eng., vol. SE-5, May 1979.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, Nov. 1976.||C. H. Papadimitriou, ""Serializability of concurrent updates"", J. Ass. Comput. Mach., vol. 26, Oct. 1979.||A. Silberschatz and Z. Kedem, ""Consistency in hierarchical database systems"", J. Ass. Comput. Mach., vol. 27, Jan. 1980.||R. E. Stearns, P. M. Lewis and D. J. Rosenkrantz, ""Concurrency controls for database systems"", Proc. 17th Symp. Foundations of Comput. Sci., 1976.||R. H. Thomas, ""A majority consensus approach to concurrency control for multiple copy databases"", ACM Trans. Database Syst., vol. 4, June 1979.||J. D. Ullman, Principles of Database Systems, MD, Potomac:Comput. Sci. Press, 1980.||M. Yannakakis, C. H. Papadimitriou and H. T. Kung, ""Locking policies safety and freedom from deadlock"", Proc. 20th IEEE Symp. Foundations of Comput. Sci., 1979-Oct.||",Analyzing Concurrency Control Algorithms When User and System Operations Differ
"W.E. Riddle&&Department of Computer Science, University of Colorado, Boulder, CO, USA|J.C. Wileden&&Department of Computer and Information Sciences, University of Massachusetts, Amherst, MA, USA|J.H. Sayler&&Department of Computer and Communication Sciences, University of Michigan, Ann Arbor, MI, USA|A.R. Segal&&Department of Computer and Communication Sciences, University of Michigan, Ann Arbor, MI, USA|A.M. Stavely&&Department of Computer Science, New Mexico Institute of Mining and Technology, Socorro, NM, USA|","A modeling scheme is presented which provides a medium for the rigorous, formal, and abstract specification of large-scale software system components. The scheme allows the description of component behavior without revealing or requiring the description of a component's internal operation. Both collections of sequential processes and the data objects which they share may be described. The scheme is of particular value during the early stages of software system design, when the system's modules are being delineated and their interactions designed, and when rigorous, well-defined specification of undesigned components allows formal and informal arguments concerning the design's correctness to be formulated.",10.1109/TSE.1978.231513,IEEE Transactions on Software Engineering,"Software design,Software systems,Computer science,Large-scale systems,Vocabulary,Mathematical model","W. E. Riddle, J. Sayler, A. Segal and J. Wileden, ""An introduction to the DREAM software design system"", Software Eng. Notes, vol. 2, pp. 11-23, July 1977.||J. J. Horning and B. Randell, ""Process structuring"", Comput. Surveys, vol. 5, pp. 5-30, Mar. 1973.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||P. Henderson, The TOPD system, Sept. 1975.||W. E. Riddle, Hierarchical description of software system structure, Boulder:Dep. Comput. Sci., Univ. Colorado at Boulder, Oct. 1977.||R. Fennel and V. R. Lesser, ""Parallelism in artificial intelligence problem solving: A case study of Hearsay II"", IEEE Trans. Comput., vol. C-26, Feb. 1977.||O. Dahl and K. Nygaard, ""SIMULA—An Algol-based simulation language"", Commun. Ass. Comput. Mach., vol. 9, pp. 671-678, Sept. 1966.||B. H. Liskov and S. N. Zilles, ""Specification techniques for data abstractions"", IEEE Trans. Software Eng., vol. SE-1, pp. 7-19, Mar. 1975.||P. Henderson, ""Finite state modelling in program development"", Proc. 1975 Int. Conf. Reliable Software, 1975-Apr.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., vol. 15, pp. 330-336, May 1972.||W. A. Wulf, R. A. London and M. Shaw, Abstraction and verification in ALPHARD: Introduction to language and methodology, 1976.||B. Liskov, ""Abstraction mechanisms in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-576, Aug. 1977.||N. Wirth, ""The programming language PASCAL"", Acta Informatica, vol. 1, pp. 35-63, 1971.||W. E. Riddle, Abstract monitor types, Boulder:Dep. Computer Science, Univ. Colorado at Boulder.||W. E. Riddle, ""The hierarchical modelling of operating system structure and behavior"", Proc. 1972 ACMNat. Conf., 1972-Aug.||W. E. Riddle, Abstract process types, Boulder:Dep. Computer Science, Univ. Colorado at Boulder, Nov. 1977.||J. Wileden, Behavior specification in a software design system, Ann Arbor:Dep. Computer and Communication Sciences, Univ. Michigan.||J. W. Sanguinetti, Performance prediction in an operating system design methodology, Dep. Computer and Communication Sciences, Univ. Michigan, Ann Arbor, May 1977.||W. E. Riddle, An approach to software system modelling behavior specification and analysis, Ann Arbor:Dep. Computer and Communication Sciences, Univ. Michigan, July 1976.||M. Welter, Counter expressions, Ann Arbor:Dep. Computer and Communication Sciences, Univ. Michigan, Oct. 1976.||W. E. Riddle, A formalism for the comparison of software analysis techniques, Ann Arbor:Dep. Computer and Communication Sciences, Univ. Michigan, July 1977.||",Behavior Modeling During Software Design
"A. Celentano&&Istitutodi Elettrotecnica ed Elettronica, Politecnico di Milano, Milan, Italy|P.D. Vigna&&Istitutodi Elettrotecnica ed Elettronica, Politecnico di Milano, Milan, Italy|C. Ghezzi&&Istitutodi Elettrotecnica ed Elettronica, Politecnico di Milano, Milan, Italy|D. Mandrioli&&Istitutodi Elettrotecnica ed Elettronica, Politecnico di Milano, Milan, Italy|","Separate compilation is a useful tool in the development, debugging, testing, and integration of modular systems.",10.1109/TSE.1980.230483,IEEE Transactions on Software Engineering,"Proposals,Computer languages,Debugging,System testing,Assembly,Protection,Joining processes,Software libraries,Production,Software quality","B. Liskov, A. Snyder, R. Atkinson and C. Schaffert, ""Abstraction mechanism in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-576, Aug. 1977.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, Dec. 1976.||A. L. Ambler, D. 1. Good, J. C. Browne, W. F. Burger, R. M. Cohen, C. G. Hoch, et al., ""GYPSY: A language for specification and implementation of verifiable programs"", Proc. ACM Conf. on Language Design for Reliable Software, 1977-March-28-30.||SIGPLAN Notices, vol. 12, pp. 1-10, Mar. 1977.||G. J. Popek, J. J. Horning, B. W. Lampson, J. G. Mitchell and R. L. London, ""Notes on the design of Euclid"", Proc. ACM Conf. on Language Design for Reliable Software, 1977-March-28-30.||SIGPLAN Notices, vol. 12, pp. 11-18, Mar. 1977.||C. Bass, ""Microsystems: PLZ–A family of system programming microprocessors"", Computer, vol. 11, pp. 34-39, Mar. 1978.||A. K. Jones and B. M. Liskov, ""A language extension for expressing constraints on data access"", Commun. Ass. Comput. Mach., vol. 21, pp. 358-367, May 1978.||UNIVAC 1106/1108 Algol Programmer Ref..||Pascal-User Manual and Report, 1975.||Algol 68C Reference Manual, 1975.||R. J. LeBlanc and C. N. Fisher, ""On implementing separate compilation in block-structured languages"", Proc. SIGPLAN Symp. on Compiler Construction, 1979-Aug.-6-10.||SIGPLANNotices, vol. 14, pp. 139-143, 1979.||G. Birtwistle, L. Enderin, M. Ohlin and J. Palme, DEC-System 10 Simula language handbook–Part 1, 1976.||R. L. Schwartz, ""Parallel compilation: A design and its application to SIMULA 67"", J. Comput. Languages, vol. 3, 1978.||R. B. Kieburtz, W. Barabash and C. R. Hill, ""A type-checking program linkage system for Pascal"", Proc. 3rd Int. Conf on Software Eng., 1978-May-10-12.||R. D. Tennent, ""On a new approach to representation independent ata classes"", Acta Informatica, vol. 8, 1977.||A. Celentano, P. Della Vigna, C. Ghezzi and D. Mandrioli, SIMPLE: A system for interactive creation execution and validation of Pascal programs.||F. DeRemer and H. Kron, ""Programming-in-the-large versus programming-in-the-small"", IEEE Trans Software Eng., vol. SE-2, pp. 80-86, June 1976.||J. E. George and G. R. Sager, ""Variables-binding and protection"", SIGPLAN Notices, vol. 8, Dec. 1973.||W. Wulf and M. Shaw, ""Global variables considered harmful"", SIGPLAN Notices, vol. 8, Feb. 1973.||B. Liskov and S. Zilles, ""Programming with abstract data types"", Proc. ACM Symp. on Very High Level Languages.||SIGPLAN Notices, vol. 9, pp. 50-59, Apr. 1974.||M. Paganini, A. Sacco, L. Tartaglino and A. Tazzari, A linker for a modularized Pascal, Politecnico di Milano:Istituto di Elettrotecnica ed Elettronica, 1978.||",Separate Compilation and Partial Specification in Pascal
"M.V. Wilkes&&Computer Laboratory, University of Cambridge, Cambridge, UK|","This paper discusses the requirements of programmers working in varying environments in relation to software engineering, structured programming, and program verification.",10.1109/TSE.1976.233832,IEEE Transactions on Software Engineering,"Software engineering,Programming profession,Civil engineering,Design engineering,Software prototyping,Testing,Art,Business,Data processing,Milling machines","M. V. Wilkes, D. J. Wheeler and S. Gill, The Preparation of Programs for an Electronic Digital Computer, MA, Cambridge:Addison-Wesley Press, Inc., 1951.||",Software Engineering and Structured Programming
"L.R. Symes&&Department of Computer Science, University of Regina, Regina, SAS, Canada|R.R. Oldehoeft&&Department of Mathematics, Arizona State University, Tempe, AZ, USA|","Considerable effort has been expanded in attempts to combine the power found in algorithmic languages with the power found in program libraries. However, most of these attempts to construct problem-solving systems for a particular class of users have failed to achieve their objective of providing the user with the potential benefits inherent in such systems. This paper attempts to define and place problem-solving systems in a general context, and thereby shows when the potential for failure or success is high.",10.1109/TSE.1977.231149,IEEE Transactions on Software Engineering,"Problem-solving,Libraries,Computer languages,Mathematics,Power supplies,Programming profession,Councils,Computer science,Data structures,Output feedback","N. Bulut, M. H. Halstead and R. Bayer, ""Experimental validation of a structural property of FORTRAN algorithms"", Proc. Comput. Mach. Nat. Conf., pp. 207-211, 1974.||User's manual for an on-line system, pp. 303-324, 1967.||BMD Biomedical Computer Programs, CA, Los Angeles:University of California Press, 1973.||IBM System/360 Operating System: Pl/l Language Specification, 1966.||IMSL Library 3 Reference Manual, 1973.||K. E. Iverson, A Programming Language, New York:Wiley, 1962.||M. H. Halstead and R. Bayer, ""Algorithm dynamics"", Proc. Assoc. Comput. Mach. Nat. Conf., pp. 126-135, 1973.||M. H. Halstead, ""Towards a theoretical basis for estimating programming effort"", Proc. Assoc. Comput. Mach. Nat. Conf., pp. 222-224, 1975.||M. Klerer and J. May, ""A user-oriented programming language"", Computer J., vol. 8, pp. 103-109, July 1965.||R. Kaplow, J. Brackett and S. Strong, ""Man-machine communication in on-line mathematical analysis"", Proc. AFIPS Fall Joint Computer Conf., pp. 465-477, 1966.||The NASTRAN User's Manual, 1969.||J. Reinfelds, ""AMTRAN A remote-terminal conversational‑mode computer system"", Proc. Assoc. Comput. Mach. Nat. Conf., pp. 469-477, 1966.||J. R. Rice, ""NAPSS-like systems: Problems and prospects"", Proc. Assoc. Comput. Mach. Nat. Conf., pp. 43-47, 1973.||A. N. Stowe, ""The Lincoln reckoner: An operation‑oriented on-line facility with distributed control"", Proc. AFIPS Fall Joint Comput. Conf., pp. 433-444, 1966.||L. R. Symes and R. V. Roman, Syntactic and semantic description of the numerical analysis programming language (NAPSS), 1969.||L. R. Symes, A mathematical problem solving language and its interpreter, 1969.||USA Standard FORTRAN, 1966.||",Context of Problem-Solving Systems
"John E. Stockenberg&&Division of Applied Mathematics, Brown University, Providence, RI, USA|Andries Van Dam&&Division of Applied Mathematics, Brown University, Providence, RI, USA|","The STRUCT system utilizes the flexibility of a powerful graphics display system to provide a set of tools for program analysis. These tools allow the analysis of the static program structure and the dynamic execution behaviour of programs within the entire operating system user program environment of the Brown University Graphics System (BUGS). Information is collected and presented in a manner which fully exploits two aspects of this environment. First, the operating system has been developed in a well-structured hierarchical manner following principles laid down by other researchers. Second the programs under analysis have been written in a structured programming language following coding conventions which make available, at the source code level, valuable program control information. This system is currently being used to predict and analyze the performance advantages available through the migration of function between levels of software and between software and firmware within the BUGS.",10.1109/TSE.1975.6312869,IEEE Transactions on Software Engineering,"Computer bugs,Algorithms,Operating systems,Microprogramming,Static VAr compensators",,STRUCT programming analysis system
"S.H. Bokhari&&Institute for Computer Applications in Science and Engineering, NASA-Langley Research Center, Hampton, VA, USA|","The problem of finding an optimal dynamic assignment of a modular program for a two-processor system is analyzed. Stone's formulation of the static assignment problem is extended to include the cost of dynamically reassigning a module from one processor to the other and the cost of module residence without execution. By relocating modules during the course of program execution, changes in the locality of the program can be taken into account. It is shown that network flow algorithms may be used to find a dynamic assignment that minimizes the sum of module execution costs, module residence costs, intermodule communication costs, and module reassignment costs. Techniques for reducing the size of the problem are described for the case where the costs of residence are negligible.",10.1109/TSE.1979.234201,IEEE Transactions on Software Engineering,"Processor scheduling,Costs,Mathematical model,Computer networks,Distributed computing,Load management,Intelligent networks,Time measurement,Distributed processing,Computer applications","H. S. Stone, ""Multiprocessor scheduling with the aid of network flow algorithms"", IEEE Trans. Software Eng., vol. SE-3, pp. 85-93, Jan. 1977.||H. S. Stone, ""Critical load factors in distributed computer systems"", IEEE Trans. Software Eng., vol. SE-4, pp. 254-258, May 1978.||E. A. Dinic, ""Algorithm for solution of a problem of maximum flow in a network with power estimation"", Sov. Math. Dokl., vol. 11, no. 5, pp. 1277-1280, 1970.||J. Edmonds and R. M. Karp, ""Theoretical improvements in algorithmic efficiency for network flow problems"", J. Ass. Comput. Mach., vol. 19, pp. 248-264, Apr. 1972.||L. R. Ford and D. R. Fulkerson, Flows in Networks, NJ, Princeton:Princeton Univ. Press, 1962.||A. V. Karzanov, ""Determining the maximal flow in a network by the method of preflows"", Sov. Math. Dokl., vol. 15, no. 2, pp. 434-437, 1974.||A. van Dam, G. Stabler and R. Harrington, ""Intelligent satellites for interactive graphics"", Proc. IEEE, vol. 62, pp. 83-92, 1974-Apr.||A. van Dam, Computer graphics and its applications, May 1974.||G. M. Stabler, A system for interconnected processing, Oct. 1974.||J. Michel and A. van Dam, ""Experience with distributed processing on a host/satellite graphics system"", Proc. SIGGRAPH '76 available as Computer Graphics (SIGGRAPH newslett.), vol. 10, no. 2, 1976.||",Dual Processor Scheduling with Dynamic Reassignment
"D.S. Parker&&Department of Computer Science, University of California, Los Angeles, CA, USA|G.J. Popek&&Department of Computer Science, University of California, Los Angeles, CA, USA|G. Rudisin&&Department of Computer Science, University of California, Los Angeles, CA, USA|A. Stoughton&&Department of Computer Science, University of California, Los Angeles, CA, USA|B.J. Walker&&Department of Computer Science, University of California, Los Angeles, CA, USA|E. Walton&&Department of Computer Science, University of California, Los Angeles, CA, USA|J.M. Chow&&Department of Computer Science, University of California, Los Angeles, CA, USA|D. Edwards&&Department of Computer Science, University of California, Los Angeles, CA, USA|S. Kiser&&Xerox Corporation, El Segundo, CA, USA|C. Kline&&Department of Computer Science, University of California, Los Angeles, CA, USA|","Many distributed systems are now being developed to provide users with convenient access to data via some kind of communications network. In many cases it is desirable to keep the system functioning even when it is partitioned by network failures. A serious problem in this context is how one can support redundant copies of resources such as files (for the sake of reliability) while simultaneously monitoring their mutual consistency (the equality of multiple copies). This is difficult since network faiures can lead to inconsistency, and disrupt attempts at maintaining consistency. In fact, even the detection of inconsistent copies is a nontrivial problem. Naive methods either 1) compare the multiple copies entirely or 2) perform simple tests which will diagnose some consistent copies as inconsistent. Here a new approach, involving version vectors and origin points, is presented and shown to detect single file, multiple copy mutual inconsistency effectively. The approach has been used in the design of LOCUS, a local network operating system at UCLA.",10.1109/TSE.1983.236733,IEEE Transactions on Software Engineering,"Network operating systems,Computer science,Computer crashes,Communication networks,Context,Telecommunication network reliability,Condition monitoring,Maintenance,Performance evaluation,Testing","P. A. Alsberg and J. D. Day, ""A principle for resilient sharing of distributed resources"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||C. A. Ellis, ""A robust algorithm for updating duplicate databases"", Proc. 2nd Berkeley Workshop Distributed Data Management and Comput. Networks, pp. 1146-1158, 1977.||S. Faissol, Operation of distributed database systems under network partitions, 1981.||D. J. Farber and F. R. Heinrich, ""The structure of a distributed computer system-The distributed file system"", Proc. ICCC, 1972.||M. Hammer and D. Shipman, ""An overview of reliability mechanisms for a distributed data base system"", Proc. Spring Compcon, 1978.||H. T. Kung and J. R. Robinson, ""On optimistic methods for concurrency control"", ACM TODS, vol. 6, pp. 213-226, 1981-June.||L. Lamport, ""Time clocks and the ordering of events in a distributed system"", Commun. Ass. Comput. Mach., vol. 21, pp. 558-565, July 1978.||B. Lampson and H. Sturgis, Crash recovery in a distributed data storage system, 1976.||D. A. Menasce, G. J. Popek and R. R. Muntz, A locking protocol for resource coordination in distributed systems.||R. M. Metcalfe and D. R. Boggs, ""Ethernet: Distributed packet switching for local computer networks"", Commun. Ass. Comput. Mach., vol. 19, pp. 395-404, July 1976.||D. S. Parker and R. Ramos, ""A distributed file system architecture supporting high availability"", Proc. 6th Berkeley Conf Distributed Data Management & Comput. Networks, 1982-Feb.||G. Popek, B. Walker, J. Chow, D. Edwards, C. Kline, G. Rudisin, et al., ""LOCUS: A network-transparent high reliability distributed system"", Proc. 8th Symp. Oper. Syst. Principles, 1981-Dec.||J. B. Rothnie and N. Goodman, ""A survey of research and development in distributed database management"", Proc. 3rd VLDB, 1977-Oct.||G. J. Rudisin, Architectural issues in a reliable distributed file system, Apr. 1980.||M. Stonebraker, ""Concurrency control and consistency of multiple copies of data in distributed INGRES"", IEEE Trans. Software Eng., vol. SE-5, pp. 188-194, May 1979.||R. F. Thomas, ""A solution to the concurrency control problem for multiple copy data bases"", Proc. Spring COMPCON, 1978-Mar.-3.||R. F. Thomas, R. H. Schantz and H. C. Forsdick, Network operating systems, May 1978.||B. J. Walker, Issues of network transparency and file replication in distributed systems: LOCUS, June 1981.||",Detection of Mutual Inconsistency in Distributed Systems
"W.E. Howden&&Department of Mathematics, University of Victoria, Victoria, BC, Canada|",Two approaches to the study of program testing are described. One approach is theoretical and the other empirical. In the theoretical approach situations are characterized in which it is possible to use testing to formally prove the correctness of programs or the correctness of properties of programs. In the empirical approach statistics are collected which record the frequency with which different testing strategies reveal the errors in a collection of programs. A summary of the results of two research projects which investigated these approaches are presented. The differences between the two approaches are discussed and their relative advantages and disadvantages are compared.,10.1109/TSE.1978.231514,IEEE Transactions on Software Engineering,"Testing,Statistical analysis,Computer errors,Error analysis,Frequency,Graph theory,Reliability theory,Calculus,Programming profession,NIST","P. R. Bennington, Data Reduction and Error Analysis for the Physical Sciences, New York:McGraw-Hill, 1969.||W. E. Howden and P. Eichhorst, Proving properties of programs from program traces, 1977.||W. E. Howden, Elementary algebraic program testing techniques, 1976.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-214, 1976.||K. W. Krause, R. W. Smith and M. A. Goodwin, ""Optimal software test planning through automated network analysis"", Proc. 1973 IEEE Symp. Computer Software Reliability, pp. 18-22.||L. G. Stucki, ""Automatic generation of self-metric software"", Proc. 1973 IEEE Symp. Computer Software Reliability, pp. 94-100.||R. E. Fairley, ""An experimental program testing facility"", IEEE Trans. Software Eng., vol. SE-1, pp. 350-357, 1975.||H. D. Mills, ""Top down programming in large systems"" in Debugging Techniques in Large Systems, NJ, Englewood Cliffs:Prentice-Hall, pp. 41-55, 1971.||C. V. Ramamoorthy, K. H. Kim and W. T. Chen, ""Optimal placement of software monitors aiding systematic testing"", IEEE Trans. Software Eng., vol. SE-1, pp. 46-58, 1975.||""U.S. National Bureau of Standards GCR77-89 National Technical Information Service"", Symbolic testing-Design techniques costs and effectiveness, 1977.||R. S. Boyer, B. Elspas and K. N. Levitt, ""SELECT—A formal system for testing and debugging programs by symbolic execution"", Proc. 1975 Int. Conf. Software Reliability IEEE Computer Society, pp. 234-245.||W. E. Howden, ""Symbolic testing and the DISSECT symbolic evaluation system"", IEEE Trans. Software Eng., vol. SE-3, pp. 266-278, 1977.||J. C. King, ""Symbolic execution and program testing"", Commun. Ass. Comput. Mach., vol. 19, pp. 385-394, 1976.||L. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, 1976.||E. F. Miller and R. A. Melton, ""Automated generation of test case data sets"", Proc. 1975 Int. Conf Reliable Software.||J. C. Huang, ""An approach to program testing"", Comput. Surveys, vol. 7, pp. 113-128, 1975.||C. V. Ramamoorthy, S. F. Ho and W. T. Chen, ""On the automated generation of program test data"", IEEE Trans. Software Eng., vol. SE-2, pp. 293-300, 1976.||B. C. Hodges and J. P. Ryan, ""A system for automatic software evaluation"", Proc. 2nd Int. Conf. Software Engineering, 1976.||C. V. Ramamoorthy and S. F. Ho, ""Testing large software with automated software evaluation systems"", IEEE Trans. Software Eng., vol. SE-1, pp. 46-58, 1975.||L. J. Osterweil and L. D. Fosdick, ""DAVE-A validation error detection and documentation system for Fortran programs"", Software—Practice Experience, vol. 6, pp. 473-486, 1976.||L. D. Fosdick and L. J. Osterweil, ""The detection of anomalous interprocedural data flow"", Proc. 2nd Int. Conf. Software Engineering, 1976.||W. E. Howden, An evaluation of the effectiveness of symbolic testing, 1977.||P. Henderson and R. Snowden, ""An experiment in structured programming"", BIT, vol. 12, pp. 38-53, 1972.||W. E. Howden, Algebraic program testing, 1976.||M. Geller, ""Test data as an aid in proving program correctness"", Proc. 2nd Symp. Principles of Programming Languages, pp. 209-218, 1976.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, pp. 156-173, 1975.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-559, 1975.||R. M. Burstall, ""Proving correctness as hand simulation with a little induction"", Proc. Int. Federation ofInformation Process-ing Societies 74, pp. 308-312, 1974.||L. P. Deutsch, An interactive program verifier, 1973.||W. E. Howden, ""Lindenmayer grammars and symbolic testing"", Inform. Process. Lett..||W. Hetzel, An experimental analysis of program verification methods, 1976.||",Theoretical and Empirical Studies of Program Testing
"M.A. Hennell&&Department of Computational Science, University of Liverpool, Liverpool, UK|J.A. Prudom&&Department of Computational Science, University of Liverpool, Liverpool, UK|",This paper reports results obtained from a static analysis of the NAG Mark 4 Fortran numerical algorithms library.,10.1109/TSE.1980.230484,IEEE Transactions on Software Engineering,"Software libraries,Algorithm design and analysis,Optimizing compilers,Logic testing,ANSI standards,Error correction,Frequency,Automatic control,Application software,Software testing","B. Ford and S. Hague, ""The organisation of numerical algorithms libraries"" in Software for Numerical Mathematics, New York:Academic, 1974.||D. E. Knuth, ""An empirical study of FORTRAN programs"", Software Practice and Experience, vol. 1, pp. 13-105, 1971.||S. Arnborg, ""Simula user program semantics and code generation effectiveness"", Management Datamatics, vol. 4, pp. 75, 1975.||B. Ford and D. K. Sayers, ""Developing a single numerical algorithms library for different machine ranges"", TOMS, vol. 2, pp. 115, 1976.||M. A. Hennell, ""An experimental testbed for numerical software"", Comput. J., vol. 21, pp. 333, Nov. 1978.||M. A. Hennell, D. Hedley and M. Woodward, ""Experience with an Algol 68 numerical algorithms testbed"", Proc. MRI Software Eng. Symp., 1976-Apr.||NY:Polytechnic Press.||S. K. Robinson and I. S. Torsun, ""An empirical analysis of FORTRAN programs"", Comput. J., vol. 19, pp. 56, 1976.||M. A. Hennell, D. Hedley and M. R. Woodward, ""On program analysis"", Inform. Processing Lett., vol. 5, pp. 136, 1976.||A. Prudom and M. A. Hennell, ""Some problems concerning the automatic translation of Fortran to Algol 68"", SIGPLAN Notices, vol. 12, no. 6, pp. 138, 1977.||NAG Reference Manual.||",A Static Analysis of the NAG Library
"A.K. Jones&&Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|B.H. Liskov&&Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, Cambridge, MA, USA|","Controlled sharing of information is needed for many applications. Access-control mechanisms exist in operating systems to provide such controlled sharing. However, programming languages currently do not support such a facility. This paper illustrates how an access-control facility could be incorporated in a programming language. The mechanism described is suitable for incorporation in object-oriented languages that permit the definition of abstract data types, and is defmed in a way that enables compile-time checking of access control.",10.1109/TSE.1976.233833,IEEE Transactions on Software Engineering,"Computer languages,Operating systems,Control systems,Access control,Proposals,Programming profession,Writing,Buildings,Computer science,Protection","H. E. Sturgis, A postmortem for a time-sharing system, 1974.||W. A. Wulf, ""HYDRA: The kernel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, pp. 337-345, June 1974.||O. J. Dahl and C. A. R. Hoare, ""Hierarcthical program structures"" in Structured Programming, New York:Academic, 1972.||B. H. Liskov, An introduction to CLU, MA, Cambridge:Lab. Comput. Science, M.I.T., Feb. 1976.||W. A. Wulf, R. London and M. Shaw, Abstraction and verification in Alphard, PA, Pittsburgh:Dep. Comput. Science, Carnegie-Mellon Univ., 1976.||J. B. Dennis and E. C. van Horn, ""Programming for multiprogrammed computations"", Commun. Ass. Comput. Mach., vol. 9, pp. 143-155, Mar. 1966.||B. W. Lampson, ""Protection"", Proc. Fifth Ann. Princeton Conf. Information Sciences and Systems, pp. 437-443, 1971.||A. K. Jones, Protection in programming systems, 1973.||LISP 1.5 Programmer's Manual, 1962.||N. Wirth, ""The programming language PASCAL"", Acta Informatica, vol. 1, pp. 335-363, 1971.||A. K. Jones and B. H. Liskov, An access control facility for programming languages, MA, Cambridge:Lab. Comput. Science, M.I.T., Apr. 1976.||A. K. Jones and W. A. Wulf, ""Toward the design of a secure system"", Software Practice and Experience, vol. 5, pp. 321-336, 1975.||",A Language Extension for Controlling Access to Shared Data
"P.D. Cernicica&&Institute for Computer Technique, Bucharest, Romania|",Access time is a variable quantity in serial access memory systems such as magnetic tape units. It is difficult to quote a value for it since a random search could cover most different tape lengths.,10.1109/TSE.1977.231150,IEEE Transactions on Software Engineering,"Distributed control,Data structures,Control systems,Operating systems,Magnetic analysis,Search methods,Microcomputers,Software libraries,Keyboards,Time measurement","S. Davis, ""Digital cassette and cartridge recorder today"", Comput. Design, vol. 12, pp. 59-71, Jan. 1973.||W. R. Boffin, ""Data storage for minis"", Electron, no. 48, pp. 41-45, Mar. 1974.||S. Davis, ""Update on magnetic tape memories"", Comput. Design, vol. 13, pp. 127-140, Aug. 1974.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 3, 1973.||",Evaluation of the Average Access Time for a Digital Cassette Memory System
"Victor R. Basil&&Department of Mathematical Sciences, Clemson University, Clemson, SC, USA|Albert J. Turner&&Department of Mathematical Sciences, Clemson University, Clemson, SC, USA|","This paper recommends the iterative enhancement' technique as a practical means of using a top-down, stepwise refinement approach to software development. This technique begins with a simple initial implementation of a property chosen (skeletal) subproject which is followed by the gradual enhancement of successive implementations in order to build the full implementation. The development and quantitative analysis of a production compiler for the language SIMPL-T is used to demonstrate that the application of iterative enhancement to software development is practical and efficient, encourages the generation of an easily modifiable product, and facilities reliability.",10.1109/TSE.1975.6312870,IEEE Transactions on Software Engineering,"Program processors,Iterative methods,Timing,Market research,Reliability,Educational institutions",,Iterative enhancement: A practical technique for software development
"D.K. Hsiao&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|D.S. Kerr&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|Chen-Jen Nee&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|","Data items in a database are semantically related. Thus, the access control mechanism of a database system must be concerned with the possibility that access to one item may violate a denied access to another item. This study concentrates on two basic semantic relations for protection requirements. By utilizing a graph-theoretic approach, some of the fundamental properties of the protection relations can be readily identified. These properties can then be used as a basis for understanding more general context dependent protection requirements. Two fundamental properties of the two protection relations are found. The first property addresses the question: given a database with a set of protection relations, is it possible to find a maximal subset of the database such that access to one item of the subset will not lead to any violation of a denied access to another item? The second property addresses the question: given a database with a set of protection relations, is it possible to find a sequence of accesses such that the protection requirement is enforced with no violation?",10.1109/TSE.1979.234202,IEEE Transactions on Software Engineering,"Access control,Protection,Permission,Database systems,Information processing,Information science,Data security,Containers","B. W. Lampson, ""Protection"", 5th Princeton Conf. on Information Sciences and Systems, pp. 437-443, 1971-Mar.||Operating Syst. Rev., vol. 8, pp. 18-24, Jan. 1974.||A. Jones, Protection in programmed systems, 1973.||G. S. Graham and P. J. Dennings, ""Protection principles and practice"", Proc. AFIPS Conf., vol. 40, pp. 417-429, 1973.||R. J. Lipton and L. Snyder, ""A linear time algorithm for deciding subject security"", J. Ass. Comput. Mach., vol. 24, no. 3, pp. 455-464, July 1977.||M. Harrison, W. Ruzzo and J. Ullman, ""Protection in operating systems"", Commun. Ass. Comput. Mach., vol. 19, pp. 461-471, Aug. 1976.||D. K. Hsiao and R. I. Baum, ""Information secure systems"" in Advances in Computers, New York:Academic, pp. 231-272, 1976.||J. B. Kam and J. D. Ullman, ""A model of statistical databases and their security"", Ass. Comput. Mach. Trans. Database Syst., vol. 2, pp. 1-10, Mar. 1977.||D. K. Hsiao, ""Access control in an on-line file system"" in File Organization-Selected Papers from File 68, Amsterdam:Swets & Zeitlinger, pp. 246-25 7, 1969.||K. Eswaran, ""Aspects of a trigger subsystem in an integrated database system"", Proc. 2nd Int. Conf. on Software Eng., pp. 243-250, 1976.||Codasyl Data Base Task Group-April 1971 Reprint, New York:Ass. Comput. Mach., 1971.||R. Hartson and D. K. Hsiao, ""Full specifications in the semantic model for database protection language"", Proc. Ass. Comput. Mach. 1976 Conf., pp. 90-95q, 1976.||D. K. Hsiao and F. Harary, ""A formal systems for information retrieval from files"", Commun. Ass. Comput. Mach., vol. 13, Feb. 1970.||Corrigenda, Commun. Ass. Comput. Mach., vol. 13, Mar. 1970.||R. C. Holt, ""Some deadlock properties of computer systems"", Ass. Comput. Mach. Computing Surveys, vol. 4, pp. 179-196, Sept. 1972.||Berge, The Theory of Graphs, New York:Wiley, 1962.||F. Harary, Graph Theory, MA, Reading:Addison-Wesley, 1969.||R. Tarjan, ""Depth-first search and linear graph algorithms"", SIAM J. Comput., vol. 1, pp. 146-160, June 1972.||",Database Access Control in the Presence of Context Dependent Protection Requirements
"J. Van Den Bos&&Department of Computer Science and the Computer Graphics Group, University of Nijinegen Toernooiveld, Nijmegen, Netherlands|M.J. Plasmeijer&&Department of Computer Science and the Computer Graphics Group, University of Nijinegen Toernooiveld, Nijmegen, Netherlands|P.H. Hartel&&Department of Computer Science and the Computer Graphics Group, University of Nijinegen Toernooiveld, Nijmegen, Netherlands|","A conceptual model is discussed which allows the hierarchic definition of high-level input driven objects, called input-output tools, from any set of basic input primitives. An input-output tool is defined as a named object. Its most important elements are the input rule, output rule, internal tool definitions, and a tool body consisting of executable statements. The input rule contains an expression with tool designators as operands and with operators allowing for sequencing, selection, interleaving, and repetition. Input rules are similar in appearance to production rules in grammars. The input expression specifies one or more input sequences, or input patterns, in terms of tool designators. An input parser tries, at run-time, to match (physical) input tokens against active input sequences. If a match between an input token and a tool designator is found, the corresponding tool body is executed, and the output is generated according to specifications in the tool body. The control structures in the input expression allow a variety of input patterns from any number of sources. Tool definitions may occur in-line or be stored in a library. All tools are ultimately encompassed in one tool representing the program.",10.1109/TSE.1983.236734,IEEE Transactions on Software Engineering,"Real time systems,Computer languages,Computer science,Computer graphics,Impedance matching,Specification languages,Process control,Interactive systems,Interleaved codes,Production","E. K. Anson, ""The semantics of graphical input"", Comput. Graphics (ACM–Siggraph), vol. 13, no. 2, pp. 113-120, 1979.||L. C. Caruthers, J. van den Bos and A. van Dam, ""PGS–A device independent general purpose graphic system for standalone and satellite graphics"", Comput. Graphics (ACM–Siggraph), vol. 11, no. l, pp. 112-119, 1979.||Core, Status report of the graphic standards planning committee, vol. 13, 1979.||G. F. P. Deecker and J. P. Penny, ""Standard input forms for interactive computer graphics"", Comput. Graphics (ACM–-Siggraph), vol. 11, no. 1, pp. 32-40, 1977.||R. H. Campbell and A. N. Habermann, The Specification of Process Synchronization by Path Expressions (Lecture Notes in Computer Science), Berlin:Springer, vol. 16, pp. 89-102, 1974.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, no. 8, pp. 453-457, 1975.||J. Heger and G. Koch, Erfahrungen bei der Erstimplementierung eines Pearl-subsets (Lecture Notes in Computer Science), Berlin:Springer, vol. 12, pp. 401-412, 1974.||F. K. Hopgood and D. A. Duce, ""A production system approach to interactive graphic program design"", Proc. IFIP-WG 5.2 Workshop on the Methodology of Interaction, 1979.||C. H. A. Koster, ""Affix grammars"" in Algol68 Implementation, Amsterdam:North-Holland, 1970.||J. Kriz and H. Sandmayr, ""Extension of Pascal by coroutines and its application to quasi-parallel programming and simulation"", Software-Practice and Experience, vol. 10, pp. 773-789, 1980.||J. M. Lafuente and D. Gries, ""Language facilities for programming user-computer dialogues"", IBM J. Res. Develop., vol. 22, no. 2, pp. 145-158, 1978.||J. M. Lafuente, ""Some techniques for compile-time analysis of user-computer interactions"", IBM J. Res. Develop., vol. 24, no. 6, pp. 716-731, 1980.||N. J. Nilsson, Principles of Artificial Intelligence, CA, Palo Alto:Tioga, 1980.||M. J. Plasmeijer, Input tools–A language model for interaction and process communication, 1981.||M. J. Plasmeijer, J. W. M. Stroet and J. van den Bos, ""An implementation of high-level graphics input tools"", Proc. Euro‑Graphics Conf., pp. 101-115, 1979.||D. M. Ritchie, ""The Unix time-sharing system"", Commun. Ass. Comput. Mach., vol. 17, no. 7, pp. 365-375, 1978.||A. C. Shaw, ""On the specification of graphics command languages and their processors"", Proc. IFIP-WG 5.2 Workshop on the Methodology of Interaction Seillac 11, 1979.||J. van den Bos, ""Definition and use of higher-level graphics input tools"", Proc. ACM-Siggraph, pp. 38-42, 1978.||J. van den Bos, M. J. Plasmeijer and J. W. M. Stroet, ""Process communication based on input specifications"", TOPLAS (ACM Trans. Programming Languages and Syst.), vol. 3, no. 3, pp. 224-250, 1981.||J. van den Bos, ""Whither device-independence in computer graphics?"", Int. J. Man-Mach. Studies, vol. 18, no. 1, pp. 89-99, 1983.||V. L. Wallace, ""The semantics of graphic input devices"", Comput. Graphics (ACM-Siggraph), vol. 10, no. 2, pp. 61-63, 1976.||N. Wirth, Programming in Modula-2, Berlin:Springer, 1982.||",Input–Output Tools: A Language Facility for Interactive and Real-Time Systems
"H. Goullon&&Technische Universität Berlin, Berlin, Germany|R. Isle&&Technische Universität Berlin, Berlin, Germany|K.-P. Lohr&&Technische Universität Berlin, Berlin, Germany|","A well-structured system can easily be understood and modified. Moreover, it may lend itself even to dynamic modification: under special conditions, the possibility of changing system parts while the system is running can be provided at little additional cost. Our approach to the design of dynamically modifiable systems is based on the principle of data abstraction applied to types and modules. It allows for dynamic replacement or restructuring of a module's implementation if this does not affect its specification (or if it leads to some kdnd of compatible specification). The fundamental principles of such ""replugging"" are exhibited, and the implementation of a replugging facility for an experimental operating system on a PDP-11/40E is described.",10.1109/TSE.1978.231515,IEEE Transactions on Software Engineering,"Operating systems,Testing,Biographies,Costs,Computer architecture,Software engineering,Error correction,Runtime,Stress,Memory management","F. L. Bauer, Software Engineering—An Advanced Course in Lecture Notes in Computer Science, Berlin:Springer, vol. 30, 1975.||R. S. Fabry, ""How to design a system in which modules can be changed on the fly"", Proc. 2nd Int. Conf: Software Eng., 1976.||C. M. Geschke, J. H. Morris and E. H. Satterthwaite, ""Early experience with MESA"", Commun. Ass. Comput. Mach., vol. 20, 1977.||J. A. Goguen, J. W. Thatcher and E. G. Wagner, An initial algebra approach to the specification correctness and implementation of abstract data types, 1976.||J. A. Guttag, E. Horowitz and D. R. Musser, ""The design of data type specifications"", Proc. 2nd Int. Conf. Software Eng., 1976.||A. N. Habermann, L. Flon and L. Cooprider, ""Modularization and hierarchy in a family of operating systems"", Commun. Ass. Comput. Mach., vol. 19, 1976.||C. H. A. Koster, ""Visibility and types"", Ass. Comput. Mach. SIGPLAN Notices, vol. 11, 1976.||B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell and G. L. Popek, ""Report on the programming language EUCLID"", Ass. Comput. Mach. SIGPLAN Notices, vol. 12, 1977.||J. Muller, Address space management in the DAS operating system, TU Berlin:Fachbereich Informatik, 1978.||P. Neilessen, On replacing software system components at run‑time, TU Berlin:Diplomarbeit Fachbereich Informatik, 1977.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., vol. 15, 1972.||D. L. Parnas, G. Handzel and H. Wurges, ""Design and specification of the minimal subset of an operating system family"", IEEE Trans. Software Eng., vol. SE-2, July 1976.||D. L. Parnas, J. E. Shore and D. Weiss, ""Abstract types defined as classes of variables"", Ass. Comput. Mach. SIGPLAN Notices, vol. 11, 1976.||D. L. Parnas, Some hypotheses about the 'uses' hierarchy for operating systems, TH Darmstadt:Fachbereich Informatik, 1976.||M. Shaw, ""Research directions in abstract data structures"", Ass. Comput. Mach. SIGPLAN Notices, vol. 11, 1976.||M. J. Spier, T. N. Hastings and D. N. Cutler, ""A storage mapping technique for the implementation of protective domains"", software—Practice & Experience, vol. 4, 1974.||N. Wirth, ""Modula: A language for modular multiprogramming"", Software—Practice & Experience, vol. 7, 1977.||",Dynamic Restructuring in an Experimental Operating System
"K.R. Tavernier&&Interfacultair Centrum Informatica, Laboratorium voor Electronica en Meettechniek, Rijksuniversiteit Gent, Ghent, Belgium|P.H. Notredame&&Interfacultair Centrum Informatica, Laboratorium voor Electronica en Meettechniek, Rijksuniversiteit Gent, Ghent, Belgium|","The problem of implementing cross assemblers by means of a macro expansion technique is addressed. Various problems caused by the implementation technique proper, as well as the target machine instruction set, are identified.",10.1109/TSE.1980.234489,IEEE Transactions on Software Engineering,"Microprocessors,Assembly systems,Hardware,Computer architecture,File systems,Design engineering,Power engineering and energy,Error correction,Memory,Counting circuits","P. H. Notredame, Toepassingen van ALMAC een algemene macro-processor.||T. A. Seim, Assembling microprocessor software with minicomputers, WA, Richland:Northwest lab.||I. M. Watson, ""Comparison of commercially available software tools for microprocessor programming"", Proc. IEEE, 1976-June.||D. W. Barron, Assemblers and Loaders, The Netherlands, Amsterdam:Elsevier, 1972.||M. Campbeil-Kelly, An Introduction to Macros, The Netherlands, Amsterdam:Elsevier, 1971.||Ref. ManuaLl.||Operations Reference Manual.||Szymansky, ""Assembling code for machines with span-dependent instructions"", Commun. ACM, vol. 21, Apr. 1978.||",Macro-Based Cross Assemblers
"S.L. Gerhart&&Department of Computer Science, Duke University, Durham, NC, USA|L. Yelowitz&&Department of Computer Science, University of Pittsburgh, Pittsburgh, PA, USA|","Backtracking is a well-known technique for solving combinatorial problems. It is of interest to programming methodologists because 1) correctness of backtracking programs may be difficult to ascertain experimentally and 2) efficiency is often of paramount importance. This paper applies a programming methodology, which we call control structure abstraction, to the backtracking technique. The value of control structure abstraction in the context of correctness is that proofs of general properties of a class of programs with similar control structures are separated from proofs of specific properties of individual programs of the class. In the context of efficiency, it provides sufficient conditions for correctness of an initial program which may subsequently be improved for efficiency while preserving correctness.",10.1109/TSE.1976.233834,IEEE Transactions on Software Engineering,"Computer science,Data structures,Sufficient conditions,Concrete,Software engineering,Runtime,Testing,Optimal control","M. Wells, Elements of Combinatorial Computing, New York:Pergamon, 1971.||D. Knuth, ""Estimating the efficiency of backtrack programs"", Math. Comput., vol. 29, pp. 121-139.||N. Wirth, ""Program development by stepwise refimement"", Commun. Ass. Comput. Mach., vol. 14, pp. 221-227.||N. Wirth, Systematic Programming, NJ, Englewood Cliffs:Prentice‑Hall, 1973.||N. Wirth, Algorithms+Data Structures=Programs, NJ, Englewood Cliffs:Prentice-Hall, 1976.||D. Hanson, Procedure mechanism for backtrack programming, Tuscon:Univ. Arizona, 1976.||J. Bitner and E. Reingold, ""Backtrack programming"", Commun. Ass. Comput. Mach., vol. 18, pp. 322-329.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 322-329.||C. A. R. Hoare, ""A note on the for statement"", BIT, vol. 12, pp. 334-341.||D. Knuth, ""Structured programming with goto statements"", Comput. Surveys, vol. 6, pp. 261-302.||R. Floyd, ""Nondeterministic algorithms"", J. Ass. Comput. Mach., vol. 14, pp. 636-644.||R. Burstall and J. Darlington, ""Some transformations for recursive programs"", Proc. 1975 Int. Conf. Reliable Software, pp. 465-472.||S. Gerhart, ""Proof theory of partial correctness verification systems"", SIAM J. Comput..||N. Dershowitz and Z. Manna, ""On automating structured programming"", Proc. IRIA Conf. Proving and Improving Programs, pp. 167-193, 1975.||S. Gerhart, ""Knowledge about programs: A model and case study"", Proc. 1975 Int. Conf: Reliable Software, pp. 88-95.||SIGPLAN Conference on Data: Abstraction Definition and Structure, 1976-Mar.||E. W. Dijkstra, ""Programming as a discipline of a mathematical nature"", Comput. People, pp. 10-11, Oct. 1974.||Amer. Math. Mon., June-July 1974.||",Control Structure Abstractions of the Backtracking Programming Technique
"J.J. Horning&&Department of Computer Science and the Computer System Research Group, University of Toronto, Toronto, ONT, Canada|D.B. Wortman&&Department of Computer Science and the Computer System Research Group, University of Toronto, Toronto, ONT, Canada|",The Software Hut (a small software house) is a course project designed for a graduate-level course in computer program engineering. This paper describes the Software Hut project and discusses the authors' experience using it in graduate courses at the University of Toronto. Suggestions for improvements in the project are given.,10.1109/TSE.1977.231151,IEEE Transactions on Software Engineering,"Design engineering,Programming profession,Software engineering,Production,Environmental economics,Software design,Software maintenance,Computer science education,Educational programs,Maintenance engineering","An annotated bibliography on computer program engineering, Canada, Ont., Toronto:Computer Syst. Res. Group, University of Toronto, March 1973.||J. D. Gannon, An annotated bibliography on computer program engineering, Canada, Ont., Toronto:Comput. Syst. Res. Group, University of Toronto, Mar. 1974.||An annotated bibliography on computer program engineering, Canada, Ont., Toronto:Comput. Syst. Res. Group, University of Toronto, Apr. 1975.||D. H. Thompson and D. T. Barnard, An annotated bibliography on computer program engineering, June 1976.||G. M. Weinberg, The Psychology of Computer Programming, New York:Van Nostrand-Reinhold Company, 1971.||F. T. Baker, ""Chief programmer team management of production programming"", IBM Syst. J., vol. 11, 1972.||R. C. Holt and D. B. Wortman, Structured subsets of the PL/I language, May 1975.||R. C. Holt, D. B. Wortman, D. T, Barnard and J. R. Cordy, SP/k: A system for teaching computer programming.||A. I. Wasserman and P. Freeman, Software Engineering Education: Needs and Objectives, New York:Springer-Verlag, 1976.||",Software Hut: A Computer Program Engineering Project in the Form of a Game
"Carma L. Mcclure&&Illinois Institute of Technology, Chicago, IL, USA|","The process of designing and evolving a programming system cannot be characterized as either top-down or bottom-up or any other well-structured process. The results, however, is a well-structured program. Since both approaches have the same goal either approach or a combination of the two is compatible with a structured programming philosophy.",10.1109/TSE.1975.6312871,IEEE Transactions on Software Engineering,"Programming,Data structures,Computer languages,Manganese,Programming environments,Syntactics,Switches",,"Top-down, bottom-up, and structured programming"
"D.B. Wortman&&Department of Computer Science and the Computer Systems Research Group, University of Toronto, Toronto, ONT, Canada|",The design of the programming language Euclid requires that a compiler for the language produce legality assertions to aid in verification of programs written in the language. This paper analyzes the legality assertions that must be produced and discusses the impact that this requirement has on the implementation of the language.,10.1109/TSE.1979.234203,IEEE Transactions on Software Engineering,"Computer languages,Program processors,Programming profession,Law,Legal factors,Optimizing compilers,Councils,Performance analysis","B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell, J. G. Mitchell and G. J. Popek, ""Report on the programming language Euclid"", SIGPLAN Notices, vol. 12, Feb. 1977.||G. J. Popek, J. J. Horning, B. W. Lampson, J. G. Mitchell and R. L. London, ""Notes on the design of Euclid"", Proc. ACM Conf. Language Design for Reliable Software, 1977-Mar.||D. H. Thompson, private communication, July 1977.||W. G. Alexander and D. B. Wortman, ""Static and dynamic characteristics of XPL Programs"", Computer, vol. 8, Nov. 1975.||D. E. Knuth, ""An empirical study of Fortran programs"", Software-Practice and Expetience, vol. 1, 197 1.||W. H. Harrison, ""Compiler analysis of the value ranges for variables"", IEEE Trans. Software Eng., vol. 3, May 1977.||D. Gries, Compiler Construction for Digital Computers, New York:Wiley, 1971.||J. J. Horning, private communication, July 1977.||P. Cousot and R. Cousot, ""Static determination of dynamic properties of generalized type unions"", Proc. ACM Conf. Language Design for Reliable Software, 1977-March.||P. Cousot and R. Cousot, ""Static determination of dynamic properties of programs"", Proc. 2nd Int. Symp. Programming, 1976-Apr.||P. Cousot and N. Halbwachs, ""Automatic discovery of linear restraints among variables of a program"", Proc. 5th Annu. ACM Symp. Principles of Programming Languages, 1978-Jan.||B. Patkau, An analysis of legality assertions in Euclid, Dec. 1978.||R. C. Holt, D. B. Wortman, J. R. Cordy and D. R. Crowe, ""The Euclid language: A progress report"", Proc. ACM Nat. Conf., 1978-Dec.||J. Welsh, ""Economic range checks in Pascal"", Software-Practice and Experience, vol. 8, Jan.-Feb. 1978.||W. D. Elliott, Proving the absence of execution errors.||",On Legality Assertions in Euclid
"L. Logrippo&&Software Reliability Research Group, Department of Computer Science, University of Ottawa, Ottawa, ONT, Canada|D.R. Skuce&&Software Reliability Research Group, Department of Computer Science, University of Ottawa, Ottawa, ONT, Canada|","A language for defining sequential file structures, characterized as nested sequences of records having in common certain keys and types, is presented. ""Input schemata"" are defined as program skeletons that contain all the necessary control structure to process a specified file. A method for obtaining an input schema from the corresponding file structure definition is given. The method is based on attributed grammars, and has been implemented in the programming language PROLOG. This constitutes a formalization of some aspects of the data-directed program design method of Jackson and Warnier. Examples of applications of this method to business data processing problems such as file updating and report generation are given.",10.1109/TSE.1983.236735,IEEE Transactions on Software Engineering,"Data processing,Business,Computer languages,Application software,Logic programming,Computer science,Skeleton,Process control,Design methodology,Process design","D. R. Chand and S. B. Yadov, ""Logical construction of software"", Commun. Ass. Comput. Mach., vol. 23, no. 10, pp. 546-555, 1980.||D. Coleman, J. W. Hughes and M. S. Powell, ""A method for the syntax directed design of multiprograms"", IEEE Trans. Software Eng., vol. SE-7, no. 2, pp. 189-196, 1981.||A. Colmerauer, H. Kanoui, R. Pasero and P. Roussel, Un systeme de communication homme-machine en Francais, 1973.||D. D. Cowan and C. J. P. Lucena, ""Some thoughts on the construction of programs–A data-directed approach"" in Information Technology, New York:North-Holland, pp. 531-535, 1978.||R. A. DeMillo, R. J. Lipton and A. J. Perlis, ""Social processes and proofs of theorems and programs"", Commun. Ass. Comput. Mach., vol. 22, no. 5, pp. 271-280, 1979.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||C. A. R. Hoare, ""Communicating sequential processes"", Commun. Ass. Comput. Mach., vol. 21, no. 8, pp. 666-677, 1978.||A. M. Jackson, Principles of Program Design, New York:Academic, 1975.||D. E. Knuth, ""Semantics of context-free languages"", Math. Syst. Theory, vol. 2, no. 2, pp. 127-145, 1968.||R. Kowalski, Logic for Problem Solving, New York:North‑Holland, 1979.||D. D. McCracken, A Simplified Guide to Structured Cobol, New York:Wiley, 1976.||R. E. Noonan, ""Structured programming and formal specifications"", IEEE Trans. Software Eng., vol. SE-1, no. 4, pp. 421-425, 1975.||F. C. N. Pereira and D.H.D. Warren, ""Definite clause grammars for language analysis–A survey of the formalism and a comparison with augmented transition networks"", Artificial Intell., vol. 13, pp. 231-278, 1980.||N. S. Pryves, A. Pnueli and S. Shastry, ""Use of a nonprocedural specification language and associated program generator in software development"", ACM Trans. Programming Languages and Syst., vol. 1, no. 2, pp. 196-217, 1979.||J. C. Reynolds, The Craft of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1981.||J. C. Vaucher, ""Certification informelle du logiciel a l'aide de processus communiquants"", Actes des Journees Francophones sur la Certification du Logiciel, pp. 63-82, 1979.||J. D. Warnier, Logical Construction of Programs, New York:Van Nostrand Reinhold, 1976.||N. Wirth, ""What can we do about the unnecessary diversity of notation for syntactic definitions?"", Commun. Ass. Comput. Mach., vol. 20, no. 11, pp. 822, 1977.||","File Structures, Program Structures, and Attributed Grammars"
R.E. Merwin&&Special Section on Software Management|,"SOFTWARE management is a term which inspires many different reactions from the broad range of practitioners in the field of data processing. The term has many dimensions ranging from the first and second line manager of a software development activity who plies his trade with little to fall back on other than his prior experience, and native skills and intuition. Contrast this with a senior executive who, because of lack of understanding of software management, is frustrated in trying to determine if his company can produce a software program on schedule and within budget. The data processing landscape is littered with examples of major software developments which faltered and then expired. That this situation should exist, after almost a quarter-century of experience with implementing these systems, is one of the enigmas of the rapidly expanding data processing industry.",10.1109/TSE.1978.231516,IEEE Transactions on Software Engineering,"Data processing,Software development management,Programming,Engineering management,US Department of Defense,Job shop scheduling,Seminars,Resource management,Project management,Financial management","Proceedings Software Management Conf., 1976.||B. W. Boehm, R. K. McClean and D. B. Urfrig, ""Some experience with automated aids to the design of large-scale reliable software"", IEEE Trans. Software Eng., vol. SE-1, pp. 125-133, Mar. 1975.||E. B. Daly, ""Management of software development"", IEEE Trans. Software Eng., vol. SE-3, pp. 230-242, May 1977.||Proc. Symp. High Cost of Software, 1973-Sept.||Support of Air Force automatic data processing requirements through the 1980' s, June 1974.||DOD weapons system software management study, MD, Baltimore:The Johns Hopkins Univ. Appl. Phys. Lab., May 1975.||""DOD weapons system software acquisition and management study"" in MITRE Findings and Recommendations, The MITRE Corp., vol. 1, May 1975.||B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, vol. 19, pp. 48-49, May 1973.||""Special Issue on the Second International Conference on Software Engineering"", IEEE Trans. Software Eng., vol. SE-2, 1976-Dec.||""Special Collection on Requirements Analysis"", IEEE Trans. Software Eng., vol. SE-3, Jan. 1977.||P. W. Metzger, Managing a Programming Project, NJ, Englewood Cliffs:Prentice-Hall, 1973.||G. F. Weinwurm, On the Management of Computer Programming, New York:Auerbach Publishers, 1970.||C. P. Lecht, ""The management of computer programming projects"" in American Management Assoc., NY, New York, 1967.||G. M. Weinberg, The Psychology of Computer Programming, New York:Van Nostrand Reinhold, 1971.||",Guest Editorial Software Management: We Must Find a Way
"T.Y. Young&&Department of Electrical Engineering, University of Miami, Coral Gables, FL, USA|P.S. Liu&&Department of Electrical Engineering, University of Miami, Coral Gables, FL, USA|","The paper is concerned with the reduction of overhead storage, i.e., the stored compression/decompression (C/D) table, in field-level data file compression. A large C/D table can occupy a lage fraction of maim memory space during compression and decompression, and may cause excessve page swapping in virtual memory systems. A two-stage approach is studied, including the reuired additional C/D table decompression time. It appears that the approach has limitations and is not completely satisfactory.",10.1109/TSE.1980.234490,IEEE Transactions on Software Engineering,"Data compression,Performance analysis,Clustering algorithms,Data analysis,Piecewise linear techniques,Merging,Encoding","D. Gottlieb, S. A. Hagerth, P. G. H. Lehot and H. S. Rabinowitz, ""A classification of compression methods and their usefulness for a large data processing center"", Proc. Nat. Comput. Conf., pp. 453-458, 1975.||A. N. C. Kang, R. C. T. Lee, C. L. Chang and S. K. Chang, ""Storage reduction through minimal spanning trees and spanning forrests"", IEEE Trans. Comput., vol. C-26, pp. 425-434, May 1977.||F. Rubin, ""Experiments in text file compression"", Commun. Ass. Comput. Mach., vol. 19, pp. 617-623, 1976.||S. S. Ruth and P. J. Kreutzer, ""Data compression for large business files"", Datamation, pp. 62-66, 1972.||B. Hahn, ""A new technique for compression and storage of data"", Commun. Ass. Comput. Mach., vol. 17, pp. 434-436, 1974.||P. A. Alsberg, ""Space and time savings through large data base compression and dynamic structuring"", Proc. IEEE, vol. 63, pp. 1114-1122, 1975-Aug.||R. C. T. Lee, Y. H. Chin and S. C. Chang, ""pplication of principal component analysis to multikey searching"", IEEE Trans. Software Eng., vol. SE-2, pp. 185-193, Sept. 1976.||D. A. Huffman, ""A method for the construction of minimum redundancy code"", Proc. IRE, vol. 40, pp. 1098-1101, 1952.||T. S. Huang, ""An upper bound on the entropy of run-length coding"", IEEE Trans. Inform. Theory, vol. IT-20, pp. 675-676, Sept. 1974.||P. Elias, ""Efficient storage and retrieval by content and address of static file"", J. Ass. Comput. Mach., vol. 21, pp. 246-260, 1974.||K. Fukunaga, Introduction to Statistical Pattern Recognition, New York:Academic, 1972.||T. Y. Young and T. W. Calvert, aassification Estimation and Pattern Recognition, New York:American Elsevier, 1974.||P. S. Liu and F. J. Mowle, ""Techniques of program execution with a writable control memory"", IEEE Trans. Comput., vol. C-27, pp. 816-827, Sept. 1978.||Manual UNIVAC 1108 processor and storage.||T. Y. Young and P. S. Liu, ""Linear transformation of binary random vectors and its application to approximating probability distributions"", IEEE Trans. Inform. Theory, vol. IT-24, pp. 152-156, Mar. 1978.||",Overhead Storage Considerations and a Multilinear Method for Data File Compression
"C.V. Ramamoorthy&&Department of Electrical Engineering and Computer Sciences and the Electronics Research Laboratory, University of California, Berkeley, CA, USA|S.-B.F. Ho&&Department of Electrical Engineering and Computer Sciences and the Electronics Research Laboratory, University of California, Berkeley, CA, USA|W.T. Chen&&Institute of Applied Mathematics, National Tsing Hua University, Hsinchu, Taiwan|","Software validation through testing will continue to be a very important tool for ensuring correctness of large scale software systems. Automation of testing tools can greatly enhance their power and reduce testing cost. In this paper, techniques for automated test data generation are discussed. Given a program graph, a set of paths are identified to satisfy some given testing criteria. When a path or a program segment is specified, symbolic execution is used for generating input constraints which define a set of inputs for executing this path or segment. Problems encountered in symbolic execution are discussed. A new approach for resolving array reference ambiguities and a procedure for generating test inputs satisfying input constraints are proposed. References to arrays are recorded in a table. during symbolic execution and ambiguities are resolved when test data are generated to evaluate the subscript expressions. The implementation of a test data generator for Fortran programs incorporating these techniques is also described.",10.1109/TSE.1976.233835,IEEE Transactions on Software Engineering,"Automatic testing,Software testing,Software systems,Software reliability,Programming profession,System testing,Large-scale systems,Automation,Costs,Software design","F. E. Allen and J. Cocke, Graph-theoretic concepts for program control flow analysis, July 1972.||R. S. Boyer, B. Elpas and K. N. Levitt, ""SELECT–A formal system for testing and debugging programs by symbolic execution"", Proc. Int. Conf. Reliable Software, 1975.||W. T. Chen and C. V. Ramamoorthy, ""Toward automation of test data generation"", Int. Comput. Symp., 1975.||W. T. Chen, Toward automated validation of computer programs, Feb. 1976.||L. Clarke, A system to generate test data and symbolically execute programs.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", Proc. Int. Conf Reliable Software, 1975.||G. Hadley, Linear Programming, MA, Reading:Addison-Wesley, 1962.||Y. W. Han, A systematic study of computer system reliability, Feb 1976.||W. C. Hetzel, Program Test Methods, New York:Prentice-Hall, 1972.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, May 1975.||J. C. Huang, ""An approach to program testing"", Computing Surpey, vol. 7, Sept. 1975.||J. C. King, ""A niew Approach to program testing"", Proc. Int. Conf. Reliable Software, 1975.||K. W. Krause, R. W. Smith and M. A. Goodwin, ""Optimal software test planning through automated network analysis"", Proc. 1973 IEEE Symp. Comput. Software Reliability, 1973.||E. F. Miller, ""Structurally based automatic program testing"", EASCON 74.||C. V. Ramamoorthy and S. F. Ho, FORTRAN Automated Code Evaluation System, Berkeley:Electron. Res. Lab., Univ. California, July 1974.||C. V. Ramamoorthy and S. F. Ho, ""Testing large software with automated software evaluation system"", IEEE Trans. Software Eng., Mar. 1975.||D. J. Reifer, ""Automated alds for reliable software"", Proc. Int. Conf. Reliable Software, 1975.||B. Wegbreit, ""Mechanical program analysis"", Commun. Ass. Comput. Mach., vol. 18, Sept. 1975.||",On the Automated Generation of Program Test Data
"J.J. Donovan&&Alfred P. Sloan School of Management, Massachusetts Institute of Technology, Cambridge, MA, USA|H.D. Jacqby&&unknow|","This paper presents the use of the virtual machine concept as a software engineering tool. The focus is on techniques that allow the rapid integration and assimilation of existing data, models, analytical facilities, report generation facilities, and data base management systems. Since many of these models, programs, and facilities run under different operating systems, they often are incompatible with each other. By combining multiple virtual machines in a particular configuration, and allowing for communication among them, it has been possible to overcome these difficulties. The result is a set of software engineering tools that seem particularly useful in decision support systems. We present the application of these tools along with the software techniques used to implement them, and quantify some of their costs and benefits.",10.1109/TSE.1977.231158,IEEE Transactions on Software Engineering,"Virtual machining,Decision support systems,Software engineering,Analytical models,Data analysis,Application software,Software tools,Management information systems,Inspection,Information systems","J. D. Bagley, E. R. Floto, S. C. Hsieh and V. Watson, ""Sharing data and services in a virtual machine system"", Proc. ACM SIGOPS 5th Symp. Operating SystemsPrinciples, pp. 82-88, 1975-Nov.||L. A. Brooks, Final report: Crisis energy management program, Sept. 1976.||J. P. Buzen and U. O. Gagliardi, ""The evolution of virtual machine architecture"", Proc. AFIPS Nat. Comput. Conf, pp. 291-299, 1973.||D. D. Chamberlin and R. F. Boyce, ""'SEQUEL' A structured English query language"", Proc. ACM SIGFIDET Workshop, pp. 249-264, 1974-May.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass. Comput. Mach., vol. 13, pp. 377-387, June 1970.||C. J. Date, An Introduction to Database Systems, MA, Reading:Addison-Wesley, 1975.||E. W. Dikstra, ""The structure of the T. H. E. multiprogramming system"", Commun. Ass. Comput. Mach., vol. 11, pp. 341-346, May 1968.||J. J. Donovan and H. D. Jacoby, GMIS: An experimental system for data management and analysis, MA, Cambridge:M.I.T. Energy Lab., M.I.T., Sept. 1975.||J. J. Donovan and W. R. Keating, NEEMIS: Test of governors presentation, MA, Cambridge:M.I.T. Energy Lab., M.I.T., Feb. 1976.||J. J. Donovan and S. E. Madnick, ""Hierarchical approach to computer system integrity"", IBM Syst. J., vol. 14, pp. 188-202, 1975.||J. J. Donovan and S. E. Madnick, Institutional and ad-hoc decision support systems and their effective use, MA, Cambridge:Center for Information Systems Research, M.I.T., Nov. 1976.||J. J. Donovan and S. E. Madnick, ""Virtual machine advantages in security integrity and decision support systems"", IBM Syst. J., vol. 15, pp. 270-278, 1976.||R. P. Goldberg, ""Survey of virtual machine research"", Computer, vol. 7, pp. 34-35, June 1974.||J. M. Gray and V. Watson, A shared segment and inter-process communication facility for VM/370, Feb. 1975.||R. E. Hall, TSP Manual, Apr. 1975.||R. H. Henninger, NECAP-NASA's Energy Cost Analysis Program Part 1 User's Manual and Part II Engineering Manual, Sept. 1975.||S. C. Hsieh, Inter-virtual machine communication under VM/370, NY, White Plains:IBM, 1976.||IBM virtual machine facility/370: Introduction, NY, White Plains:IBM, 1976.||IBM virtual machine facility/370: CMS user's guide, NY, White Plains:IBM, 1976.||APL econometric planning language, NY, White Plains:IBM, 1976.||S. E. Madnick, ""Time-sharing systems: Virtual machine concept versus conventional approach"", Modem Data, vol. 2, pp. 34-36, Mar. 1969.||S. E. Madnick and J. J. Donovan, Operating Systems, New York:McGraw-Hill, 1974.||TROLL Reference Manual, 1974.||APL/360 Reference Manual, 1972.||R. P. Parmelee, ""Virtual storage and virtual machine concepts"", IBM Syst. J., vol. 11, no. 2, pp. 99-130, 1972.||F. Schober, EPLAN: An APL-based language for econometric modelling and forecasting, PA, Philadelphia:IBM Scientific Center, 1974.||M. S. Scott Morton, Management decision systems: Computer based support for decision making, MA, Boston:Division of Research, Graduate School of Business Administration, Harvard Univ., 1972.||M. M. Zloof, ""Query by example"", Proc. AFIPS 1975 Nat. Comput. Conf., vol. 44, pp. 431-437.||",Virtual Machine Communication for the Implementation of Decision Support Systems
"C. V. Ramamoorthy&&Computer Science Division, Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, CA, USA|K. H. Kim&&Department of Electrical Engineering,  Systems and Computer Science Program, University of Southern California, Los Angeles, CA, USA|W. T. Chen&&Computer Science Division, Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, CA, USA|","The usefulness of software monitors in testing large programs is discussed. Several types of testing strategies based on the use of monitors are surveyed. Since there is a computational overhead involved in employing monitors, attempts are made to minimize the number of monitors employed. This optimisation problem is formulated and analyzed in graph theoretic terms. Implementation aspects are considered through both discussion and examples.",10.1109/TSE.1975.6312872,IEEE Transactions on Software Engineering,"Monitoring,Testing,Software,Instruments,Computer science,Systematics,Algorithm design and analysis",,Optimal placement of software monitors aiding systematic testing
"W.H. Harrison&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","This paper presents a systematic approach to the problem of generating good code with a compiler that is easy to construct. A compiler structure is proposed which relies on interprocedural data flow analysis, global optimization, and an intermediate language schema to simplify the task of writing the code generating portions of a compiler without sacrificing code quality. This structure is contrasted with a more conventional structure to explore the reasons why the new structure solves several problems inherent in the conventional structure. Further advantages which accrue from the new structure are also presented.",10.1109/TSE.1979.234204,IEEE Transactions on Software Engineering,"Optimizing compilers,Data analysis,Program processors,Writing,Software reliability,Laboratories,Libraries,Application software,Dictionaries,Arithmetic","F. E. Alien, ""Interprocedural data flow analysis"", Proc. IFIP Congress 74, pp. 398-402, 1974.||F. E. Allen and J. Cocke, ""A catalogue of optimizing transformations"" in Design and Optimization of Compilers, NJ, Englewood Cliffs:Prentice-Hall, pp. 1-30, 1972.||J. M. Barth, Interprocedural data flow analysis based on transitive closure, Sept. 1976.||J. L. Carter, ""A case study of a new code generation technique for compilers"", Commun. Ass. Comput. Mach., vol. 20, pp. 914-920, Dec. 1977.||M. Elson and S. T. Rake, ""Code generation technique for large language compilers"", IBM Syst. J., vol. 9, no. 3, pp. 166-188, 1970.||W. Harrison, ""Compiler analysis of the value ranges for variables"", IEEE Trans. Software Eng., vol. SE-3, pp. 243-250, May 1977.||W. Harrison, Formal semantics of a schematic intermediate language, Nov. 1976.||S. S. Herrick and D. V. Donnely, ""A survey of optimization techniques in compilers"" in Nat. Tech. Inf. Serv., Rome Air Devel. Center, Sept. 1975.||S. N. Zilles and B. H. Liskov, ""Specification techniques for data abstractions"", IEEE Trans. Software Eng., vol. 1, pp. 7-18, Mar. 1975.||D. Lomet, Predicting the effects of call point informatioii on called procedure optimization, IBM Internal Memo., Oct. 1975.||D. lomet, Data flow analysis in the presence of procedure calls, Nov. 1975.||C. B. Jones, Formal definition in compiler development, Feb. 1976.||B. K. Rosen, Data flow analysis for procedural languages, Apr. 1976.||B. K. Rsoen, Data flow analysis for recursive PL/I programs, Jan. 1975.||T. C. Spillman, ""Exposing side effects in a PL/I optimizing compiler"", Proc. IFIP Congr. 71, pp. 376-381, 1971.||J. D. Ullman, ""Data flow analysis"", 2nd USA‑Japan Computer Conf., 1975.||G. Urschler, Complete redundant expression elimination in flow diagrams, Aug. 1974.||",A New Strategy for Code Generation—the General-Purpose Optimizing Compiler
"N.S. Prywes&&Department of Computer and Information Science, Moore School, University of Pennsylvania, Philadelphia, PA, USA|A. Pnueli&&Weizmann Institute of Science, Rehovot, Israel|","The paper describes the compilation of a program specification, written in the very high level nonprocedural MODEL language, into an object, PL/1 or Cobol, procedural language program. Nonprocedural programming languages are descriptive and devoid of procedural controls. They are therefore easier to use and require less programming skills than procedural languages. The MODEL language is briefly presented and illustrated followed by a description of the compilation process. An important early phase in the compilation is the representation of the specification by a dependency graph, denoted as array graph, which expresses the data flow interdependencies between statements. Two classes of algorithms which utilize this graph are next described. The first class checks various completeness, nonambiguity, and consistency aspects of the specification. Upon detecting any problems, the system attempts some automatic correcting measures which are reported to the user, or alternately, when no corrections appear as reasonable, it reports the error and solicits a modification from the user. The second class of algorithms produces an intermediate design of an object program in a language independent form. Finally, PL/1 or Cobol code is generated.",10.1109/TSE.1983.236736,IEEE Transactions on Software Engineering,"Algorithm design and analysis,Phased arrays,High level languages,Debugging,Computer languages,Flow graphs,Error correction,Documentation,Program processors,Data structures","E. A. Ashcroft and W. W. Wadge, ""Lucid–A nonprocedural language with iteration"", Commun. Ass. Comput. Mach., vol. 20, no. 7, pp. 519-526, July 1977.||J. B. Dennis, First version of a data flow procedure language, MA, Cambridge:MIT, May 1975.||N. Deo and P. Mateti, ""On algorithms for enumerating all circuits of a graph"", SIAM J. Comput., vol. 5, no. 1, Mar. 1976.||J. L. Gana, Use and extension of an automatic program generator for model building in social and engineering sciences, 1978.||A. W. Holt, ""Introduction to occurrence systems"" in Associative Information Techniques, New York:American Elsevier, pp. 175-202, 1971.||D. B. Johnson, ""Finding all the elementary circuits of a directed graph"", SIAM J. Comput., vol. 4, no. 1, pp. 77-84, 1975.||B. Langefors, ""Information system design computations using generalized matrix algebra"", BIT, vol. 5, no. 2, 1965.||B. M. Leavenworth and J. E. Sammet, ""Overview of non-procedural languages"", Proc. Symp. Very-High-Level Languages ACM SIGPLAN Notices, 1974-Apr.||MODEL Il–Automatic program generator user manual, Jan. 1978.||J. F. Nunamaker, On the design and optimization of information processing systems, 1969.||C. A. Petri, ""Kommunikation Mit Automaten"" in Schriften des Rheinisch–Westfalischen Inst. für Instrumentelle Matematik an der Universitat Bonn Hft. 2, Bonn, 1962.||K. Lu, MODEL program generator: System and programming documentation, 1982.||K. Lu, Program optimization based on a non-procedural specification, 1981.||N. Prywes, A. Pnueli and S. Shastry, ""Use of a non-procedural specification language and associated program generator in software development"", ACM Trans. Programming Languages and Syst., vol. 1, no. 2, pp. 196-217, Oct. 1979.||L. G. Tesler and H. J. Enea, ""A language design for concurrent processes"", Proc. Spring Joint Comput. Conf. AFIPS, pp. 403-408, 1968.||S. Shastry, Verification and correction of non-procedural specification in automatic generation of programs, 1978.||R. E. Tarjan, ""Depth first search and linear graph algorithm"", SIAM J. Comput., vol. 1, no. 2, pp. 140-160, 1972.||",Compilation of Nonprocedural Specifications into Computer Programs
"B.C. De Roze&&Office of the Secretary of Defense, Washington D.C., DC, USA|T.H. Nyman&&unknow|","The importance of software in defense systems continues to intensify as new systems emerge in response to increasing threats and declining force levels. The need to manage this software as a critical component of defense systems over their life cycle is becoming widely recognized. A general awareness of this need as an institutional problem requiring special attention within the Office of the Secretary of Defense has been growing as software problems have reached top level defense management visibility with increasing regularity. Software costs are continuing to multiply in step with advancing weapons systems sophistication, and opportunities for cost avoidance now are leveraged against large dollar investments. These conditions characterize the computer industry at large, but very little overall focus has been visible to improve the software development process. Consequently, the Department of Defense (DoD) has undertaken a two part effort to accelerate both near-term and long-term improvements in software development for weapons system applications. These efforts, the establishment of software life cycle management policy and practices, and the vigorous development and application of new software technology are discussed in considerable depth.",10.1109/TSE.1978.231517,IEEE Transactions on Software Engineering,"Technology management,Costs,Weapons,Programming,Application software,Software systems,Investments,Computer industry,Acceleration,Software development management","DoD weapon system software acquisition and management study, vol. I and II, June 1975.||A. Kossiakoff, DoD weapon systems software management study, June 1975.||J. H. Manley, Findings and recommendations of the joint logistics commanders software reliability work group (SRWG report), MD:Headquarters, Air Force Systems Command (XRF), Andrews AFB, vol. I and II, Nov. 1975.||J. Goldberg, Proceedings of a Symposium on the high cost of software, 1973-Sept.-17-19.||Proceedings: Software cost and sizing workshop, 1974-Oct.||H. A. Richardson, Abridged proceedings from the software management conference-First series 1976, 1977-Mar.-22-23.||W. L. Trainer, ""Software—From satan to savior"", Proc. NAECON Conf., 1973-May.||B. C. De Roze, Defense systems software management plan, Office of the Assistant Secretary of Defense (Installations and Logistics), Mar. 1976.||Major system acquisition, Jan. 1977.||Life cycle events, Feb. 1977.||T. H. Nyman, Information processing technology, RDT&E Technical Area Descriptions, pp. 279-298, Apr. 1977.||T. H. Nyman, ""Defense system software R&D technology plan"" in R&D Technology Panel to the Management Steering Committee for Embedded Computer Resources, Office of the Under Secretary of Defense for Research and Engineering, Department of Defense, Nov. 1977.||Software Acquisition Management Guidebook Series, MA, Hanscom AFB:USAF Electronic Systems Division.||Monitoring and reporting software development status, Sept. 1975.||Regulations specifications and standards, Oct. 1975.||Contracting for software acquisition, Jan. 1976.||Statement of work preparation, Jan. 1977.||Software development and maintenance facilities, Apr. 1977.||Software documentation requirements, Apr. 1977.||Computer programming configuration management, Aug. 1977.||Software acquisition management guidebook: Software quality assurance, Aug. 1977.||Overview of software development and management, OH, Wright-Patterson AFB:Aeronautical Systems Division (AES).||Software acquisition process.||Summary of related standards and regulations.||Technical aspects relating to software acquisition.||Structured Programming Series, NY, Griffis AFB:USAF Rome Air Development Center, vol. 1-15, July 1975.||Programming language standards.||Pre-compiler specifications.||Pre-compiler program documentation.||Data structuring.||Program support library requirements.||Program support library program specifications.||Documentation standards.||Program design study.||Management data collection and reporting.||Chief programmer team operations.||Estimating software resource requirements.||Training materials.||Software tool impact.||Validation and verification.||Final report.||B. List, ""A major crossroads in the development of avionics systems"", Astronaut. Aeronaut., Jan. 1973.||W. J. Kenny and C. D. May, ""The CDC 480-AN/AYK-14(V) computer system"", Proc. COMPCON Fall 1977 IEEE Comput. Soc. Int. Conf., 1977-Sept.-6-9.||W. E. Burr and W. R. Smith, ""Comparing architectures"", Datamation, pp. 48-52, Feb. 1977.||W. L. Schiller, The design and specification of a security kernel for the PDP 11-45, MA, Bedford:the MITRE Corp., May 1975.||W. Carlson, ""National software works"", AIIE Conf. Distributed Syst., 1977-July.||""Higher order DoD requirements for computer programming languages-revised IRONMAN"" in DoD Higher Order Language Working Group to the Management Steering Committee for Embedded Computer Resources, Office of the Under Secretary of Defense for Research and Engineering, July 1977.||F. Hollister, Advanced command and control architectural testbed (ACCAT), VA, Arlington:Defense Advanced Research Projects Agency/ IPT, Sept. 1977.||",The Software Life Cycle—A Management and Technological Challenge in the Department of Defense
"A. Reuter&&Department of Computer Sciences, Technical University of Darmstadt, Darmstadt, Germany|","A special UNDO log algorithm combining the advantages of update in place strategies with the shadow page concept is introduced. It is to support applications demanding high rates of possibly long update transactions as well as fast UNDO recovery. By doubling the disk space for the database, UNDO loggng can be performed with a minimum of additional I/O operations. Thus, we gain a performance comparable to systems without any UNDO loggg. Since in this algorithm one logical slot consists of two physical blocks, the name TWIST (twin slot) algorithm is proposed.",10.1109/TSE.1980.234491,IEEE Transactions on Software Engineering,"Database systems,Transaction databases,Performance gain,System recovery,Application software,Information systems,Costs,Partitioning algorithms,Indexes","M. M. Astrahan, ""System R: Relational approach to data base management"", ACM Trans. Database Syst., vol. 1, pp. 97-137, June 1976.||CODASYL DDL J. Develop., June 1973.||W. Effelsberg, Die Optimierung der Verwaltung des Systempuffers in Datenbanksystemen, Nov. 1978.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, pp. 624-633, Nov. 1976.||J. N. Gray, ""Notes on database operating systems"" in Lecture Notes in Computer Science 60 Advanced Course on Operating Systems, Berlin:Springer-Verlag, 1978.||J. N. Gray, The recovery manager of a data management system, Aug. 1979.||Th. Härder, Implementierung von Datenbanksystemen, Müinchen:Hanser-Verlag, 1978.||Th. Härder and A. Reuter, ""Optimization of logging and recovery in a database system"" in Data Base Architecture, Amsterdam:North-Holland, pp. 151-168, 1979.||R. A. Lorie, ""Physical integrity in a large segmented database"", ACM Trans. Database Syst., vol. 2, pp. 91-104, Mar. 1977.||D. R. Ries and M. Stonebraker, ""Effects of locking granularity in a database management system"", ACM Trans. Database Syst., vol. 2, pp. 233-246, Sept. 1977.||Plattenspeichersystem 3465/3414-04 Reference Manual, 1976.||J. S. M. Verhofstad, ""Recovery techniques for database systems"", ACM Comput. Surveys, vol. 1O, pp. 167-195, June 1978.||",A Fast Transaction-Oriented Logging Scheme for Undo Ro overy
"D.L. Parnas&&Fachbereich Informatik, Technische Hochschule, Darmstadt, Germany|G. Handzel&&Fachbereich Informatik, Technische Hochschule, Darmstadt, Germany|H. Wurges&&Fachbereich Informatik, Technische Hochschule, Darmstadt, Germany|","The authors are engaged in a project to produce a precise description of a design for a family of operating systems. The design decisions ue being expressed by means of formal module specifications. In an attempt to write a concise specification of one of the most critical modules, a ""virtual memory mechanism,"" some previously discussed specification techniques proved to be inadequate. The specification was much too large. Through a series of improvements in both the design and the specification techniques we have achieved a much more compact description. This paper begins with the motivation for the design, explains the problems discovered in earlier approaches, and describes the improvements that were made. Finally, the design and its specification are explained.",10.1109/TSE.1976.233836,IEEE Transactions on Software Engineering,"Operating systems,Testing,Computer science,Application software,Software design,Permission,Protection","D. L. Parnas, On the design and development of program families, Fachbereich Informatik, Feb. 1975.||W. R. Price, Implications of a virtual memory mechanism for implementing protection in a family of operating systems, June 1973.||W. R. Price and D. L. Parnas, ""The design of the virtual memory aspects of a virtual machine"", Proc. ACM SIGARCH-SIGOPS Workshop on Virtual Computer Systems, 1973-Mar.||A. N. Habermann, L. Flon and L. Cooprider, ""Modularization and hierarchy in a family of operating systems"", Proc. 5th Symp. Operating Systems Principles, 75-Nov.||SIGOPS, vol. 9, no. 5, 1975.||Commun. Ass. Comput. Mach., vol. 5, 1976.||D. L. Parnas, Some hypotheses about the uses hierarchy for operating systems, Fachbereich Informatik, Mar. 1976.||R. M. Graham, ""Protection in an information processing utility"", Commun. Ass. Comput. Mach., vol. 11, May 1968.||P. Brinch Hansen, ""The nucleus of a multiprogramming system"", Commun. Ass. Comput. Mach., vol. 13, Apr. 1970.||W. Wulf, ""HYDRA: The kernel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, June 1974.||P. J. Courtois, On the near-complete decomposibility of networks of queues and of stochastic models of multiprogramming computing systems, Nov. 1971.||P. J. Courtois, ""Decomposibility instability and saturation in a multiprogramming system"", Commun. Ass. Comput. Mach., vol. 18, July 1975.||R. A. Meyer and L. H. Seawright, ""A virtual machine time‑sharing system"", IBM Systems J., vol. 9, no. 3, 1970.||G. J. Popek and R. P. Goldberg, ""Formal requirements for virtualizable third generation architectures"", Commun. Ass. Comput. Mach., vol. 17, July 1974.||D. L. Parnas and G. Handzel, More on specification techniques for software modulos, Fachbereich Informatik, Feb. 1975.||D. L. Parnas and D. P. Siewiorek, ""Use of the concept of transparency in the design of hierarchically structured systems"", Commu. Ass. Comput. Mach., vol. 18, July 1975.||E. W. Dijkstra, ""The structure of the T.H.E.-multiprogramming system"", Commun. Ass. Comput. Mach., vol. 11, May 1968.||B. H. Liskov, ""The design of the Venus operating system"", Commun. Ass. Comput. Mach., vol. 15, Mar. 1972.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., vol. 15, May 1972.||B. H. Liskov and S. Zilles, ""Specification techniques for data abstractions"", IEEE Trans. Software Eng., vol. SE-1, Mar. 1975.||J. V. Guttag, The specification and application to programming of abstract data types, Sept. 75.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, Aug. 1975.||D. L. Parnas, J. E. Shore and D. Weiss, ""Abstract types defined as classes of variables"", Proc. Conf. Data, 1976-Mar.-22-24.||SIGPLAN Notices, vol. 8, no. 21, 1976.||D. L. Pamas, W. Bartussek, G. Handzel and H. Würges, Using predicate transformers to verify the effects of real programs.||W. Bartussek and H. Würges, Proving that an implementation meets its abstract specification.||",Design and Specification of the Minimal Subset of an Operating System Family
"H. Samet&&Department of Computer Science, University of Maryland, College Park, MD, USA|","Requirements for a machine description facility for compiler testing are discussed. The compiler testing procedure consists of proving that programs are correctly translated by the compiler at hand. This is achieved by use of a common intermediate representation for both the source and object programs. The intermediate representation for the object program is built by use of a process termed symbolic interpretation. This process interprets a set of procedures which describe the effects of machine language instructions corresponding to the target machine on a suitable computation model in a manner consistent with an execution level definition of the high level language. Some of the important factors which enter into such a definition are discussed. These include architectural constraints posed by the target machine, and a description facility for memory and data types. Once such a definition is formulated, the actual instruction set of the target machine can be described. The highlights and limitations of such a definition facility are discussed in the context of a specific LISP implementation on a PDP-10 computer.",10.1109/TSE.1977.231159,IEEE Transactions on Software Engineering,"Program processors,Application software,Computer aided instruction,Computational modeling,High level languages,Wiring,Registers,System testing,Performance evaluation,Contracts","G. Bell and A. Newell, Computer Structures: Readings and Examples, New York:McGraw-Hill, 1971.||L. P. Deutsch, An interactive program verifier, May 1973.||PDP-10 System Reference Manual, Dec. 1969.||PDP-11 Reference Manual, Dec. 1973.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. Applied Mathematics, vol. 19, pp. 19-32, 1967.||C. R. Hollander, Decompilation of object programs, 1973.||J. C. Huang, ""An approach to program testing"", Comput. Surveys, vol. 7, pp. 113-128, Sept. 1975.||S. S. Husson, Microprogramming: Principles and Practices, NJ, Englewood Cliffs:Prentice-Hall, 1970.||K. E. Iverson, A Programming Language, New York:Wiley, 1962.||J. King, A program verifier, 1969.||J. A. N. Lee, Computer Semantics, New York:Van Nostrand Reinhold, pp. 346-347, 1972.||G. B. Leeman, W. C. Carter and A. Birman, ""Some techniques for microprogram validation"", Proc. 1974 IFIP Cong., pp. 76-80.||G. B. Leeman, ""Some problems in certifying microprograms"", IEEE Trans. Comput., vol. C-24, pp. 545-553, May 1975.||R. L. London, ""The current state of proving programs correct"", Proc. Ass. Comput. Mach. 25th Annu. Conf., pp. 39-46, 1972.||J. McCarthy, ""Recursive functions of symbolic expressions and their computation by machine"", Commun. Ass. Comput. Mach., vol. 3, pp. 184-195, Apr. 1960.||""Revised report on the algorithmic language ALGOL 60"", Commun. Ass. Comput. Mach., vol. 3, pp. 299-314, May 1960.||F. J. Neuhold, ""The formal description of programming languages"", IBM Syst. J., vol. 10, pp. 86-113, 1971.||Stanford LISP 1.6 manual, 1972.||H. Samet, Automatically proving the correctness of translations involving optimized code, 1975.||H. Samet, A normal form for LISP programs, MD, College Park:Dep. Comput. Sci., Univ. Maryland, 1976.||D. C. Smith, MLISP, CA, Stanford:Dep. Comput. Sci., Stanford Univ., Oct. 1970.||N. Suzuki, ""Verifying programs by algebraic and logical reductions"", Proc. 1975 Int. Conf Reliable Software, pp. 473-481, 1975-Apr.||T. Winograd, Procedures as a representation for data in a computer program for understanding natural language, MA, Cambridge:Massachusetts Inst. Tech., Feb. 1971.||N. Wirth, ""The programming language PASCAL"", Acta Informatica, vol. 1, pp. 35-63, 1971.||",A Machine Description Facility for Compiler Testing
"Randall F. Scott&&Command Control and Communications Directorate, U.S. Air Force Headquarters, Washington, D.C.|Dick B. Simmons&&Data Processing Center, Texas A&M University, College Station, Tex. 77843|",Methods of studying programmer productivity are difficult to find. The classical methods of observation and statistical analysis are in many cases inappropriate. This paper describes a simulation approach in which programmers are considered to be individual processors. Relative group productivity is then measured based upon the productivity levels and communications relationships of the processors.,10.1109/TSE.1975.6312873,IEEE Transactions on Software Engineering,"Productivity,Computational modeling,Educational institutions,Programming,Computers,Program processors",,Predicting programming group productivity a communications model
"E. Towster&&Department of Computer Science, University of Southwestern Louisiana, Lafayette, NY, USA|","Many problems of block structure derive from the remote specification of parts of the local environment. An alternative to block structure is proposed, in which the local environment is described within each program module. Concise environment descriptions are made possible by creating a tree whose terminal nodes are declarations and whose intermediate nodes can represent all of their descendant terminal node declarations. The tree encompasses all of the data used by the program and can thus be thought of as the data structure for the entire program. Each intermediate node of the tree names an abstract data structure that is implemented from the data named in its descendant nodes. Top-down refinement of abstract data structures consists of creating descendant nodes, and terminates when all terminal nodes of the tree have been created. This activity occurs as a normal part of program development, along with the top-down refinement of program modules. The tree can be used in place of a symbol table as a referencing structure for compilation or interpretation. Compilation time wili then increase linearly with the length of the program and the referencing structure can grow dynamically during compilation.",10.1109/TSE.1979.234205,IEEE Transactions on Software Engineering,"Tree data structures,Computer languages,Psychology,Data structures,Computer science,Humans","R. B. Kieburtz, Steps toward verifiable programs, Nov. 1972.||W. Wulf and M. Shaw, ""Global variable considered harmful"", Sigplan Notices, vol. 8, pp. 28-34, Feb. 1973.||J. Earley, Naming structure and modularity in programming languages, Aug. 1973.||J. E. George and G. R. Sager, ""Variables–Bindings and protection"", Sigplan Notices, vol. 8, pp. 18-29, Dec. 1973.||L. Presser and J. R. White, ""Making global variables beneficial"", IFIP Conf. Proc., pp. 413-418, 1974.||D. L. Parnas, ""On the need for fewer restrictions in changing compile-time environments"", Sigplan Notices, vol. 10, pp. 29-36, May 1975.||E. W. Dijkstra, ""An essay on the notion: The scope of variables"" in A Discipline of Programming, NJ, Englewood Cliffs:Prentice‑Hall, 1976.||P. A. Carr, Name management in the construction of large programs, Aug. 1976.||P. Naur, ""Answers to comments on Algol 60"", Commun. Ass. Comput. Mach., vol. 4, pp. a16-a17, Feb. 1961.||D. E. Knuth and J. N. Merner, ""Algol 60 confidential"", Commun. Ass. Comput. Mach., vol. 4, pp. 268-272, June 1961.||R. Conway and D. Gries, An Introduction to Programming, MA, Cambridge:Winthrop, pp. 142-143, 1975.||H. D. Mills, ""Top-down programming in large systems"" in Debugging Techniques in Large Systems, NJ, Englewood Cliffs:Prentice-Hall, 1971.||H. D. Mills, Mathematical foundations for structured programming, MD, Gaithersburg:IBM Corp., 1972.||C. L. McGowan and J. R. Kelley, Top-Down Structured Programming Techniques, New York:Mason/ Charter, 1975.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 1, pp. 309-3 10, 1969.||E. Towster, Chunk structure–A convention for explicit declaration of environments and top-down refinement of data, 1978.||J. J. Donovan, Systems Programming, New York:McGraw‑Hill, 1972.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 3, 1973.||P. J. Denning, ""Virtual memory"", Computing Surveys, vol. 2, pp. 153-189, Sept. 1970.||O.-J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||B. Liskov and S. Zilles, ""Programming with abstract data types"", Sigplan Notices, vol. 9, pp. 50-59, Apr. 1974.||F. T. Baker, ""Chief programmer team management of production programming"", IBM Syst. J., vol. 11, pp. 56-73, 1972.||G. A. Miller, ""The magical number seven plus or minus two: Some limits on our capacity for processing information"", Psychological Review, vol. 63, pp. 81-96, Mar. 1956.||G. A. Miller, The Psychology of Communication, New York:Basic Books, 1967.||H. A. Simon, ""How big is a chunk?"", Science, vol. 183, pp. 482-488, Feb. 1974.||D. K. Dirlam, ""Most efficient chunk sizes"", Cognitive Psychology, vol. 3, pp. 355-359, 1972.||PLII Programming: A Manual of Style, pp. 239-240, 1970.||G. M. Weinberg, The Psychology of Computer Programming, New York:Van Nostrand, pp. 224-229, 1971.||D. Frost, ""Psychology and program design"", Datamation, vol. 21, pp. 137-138, May 1975.||B. Shneiderman, ""Exploratory experiments in programmer behavior"", Int. J. Comput. Information Sciences, vol. 5, no. 2, pp. 123-143, 1976.||J. B. Dennis, ""An example of programming with abstract data types"", Sigplan Notices, vol. 10, no. 7, pp. 25-29, July 1975.||PASCAL User Manual and Report, 1974.||B. Shneiderman, ""Experimental testing in programming languages stylistic considerations and design techniques"", Proc. Nat. Comput. Conf., pp. 653-656, 1975.||R. A. Snowdon, ""Pearl–A system for the preparation and validation of structured programs"" in Program Test Methods, NJ, Englewood Cliffs:Prentice-Hall, 1973.||C. A. R. Hoare, ""Data reliability"", Proc. Int. Conf. on Reliable Software Sigplan Notices, vol. 10, pp. 528-533, 1975-June.||J. E. Urban, A specification language and its processor, 1978.||R. L. London, ""A view of program verification"", Proc. Int. Conf. on Reliable Software Sigplan Notices, vol. 10, pp. 534-545, 1975-June.||M. Foley and C. A. R. Hoare, ""Proof of a recursive program: Quicksort"", The Computer J., vol. 14, pp. 391-395, Nov. 1971.||M. S. Laventhal, Verification of programs operating on structured data, MA, Cambridge:Project MAC, M.I.T., Mar. 1974.||C. A. R. Hoare, ""Proof of correctness of data representations"", Actalnformatica, vol. 1, pp. 271-281, 1972.||",A Convention for Explicit Declaration of Environments and Top-Down Refinement of Data
"F.G. Pagan&&Department of Computer Science, Southem Illinois University, Carbondale, IL, USA|","The concept of abstract syntax is commonly applied to the formal specification of programming language semantics and is also useful in the broader context of software design. This paper proposes a scheme for the representation of abstract syntax specifications in the form of easily understood charts. The structuring primitives considered are those of scalar enumeration, heterogeneous aggregation, homogeneous lists and sets, disjunction, and partial functions. Secondarily, a related system of charts for depicting particular objects with a given structure is proposed. Examples are given to illustrate the use of these diagrammatic notations in the contexts of language description and software design and documentation.",10.1109/TSE.1983.237016,IEEE Transactions on Software Engineering,"Computer languages,Software design,Formal specifications,Documentation,Data structures,Computer science,Writing,Education,Application software","F. DeRemer and R. Jullig, ""Tree-affix dendrogrammars for languages and compilers"" in Semantics-Directed Compiler Generation (Lecture Notes in Computer Science), Berlin:Springer‑Verlag, vol. 94, pp. 300-319, 1980.||P. Brinch Hansen, ""The design of Edison"", Software–Practice and Experience, vol. 11, pp. 363-396, 1981.||The Vienna DevelopmentMethod: The Meta-Language (Lecture Notes in Computer Science), Berlin:Springer-Verlag, vol. 61, 1978.||M. Marcotty, H. F. Ledgard and G. V. Bochmann, ""A sampler of formal definitions"", Comput. Surveys, vol. 8, pp. 191-276, 1976.||P. Wegner, ""The Vienna definition language"", Comput. Surveys, vol. 4, pp. 5-63, 1972.||M.J.C. Gordon, The Denotational Description of Programming Languages, New York:Springer-Verlag, 1979.||J. C. Cleaveland and R. C. Uzgalis, Grammars for Programming Languages, New York:Elsevier, North-Holland, 1977.||F. G. Pagan, An experiment in the use of formal specifications in user manuals for programming languages, Carbondale:Dep. Comput. Sci., Southern Illinois Univ., 1981.||J. M. Watt, J.E.L. Peck and M. Sintzoff, ""ALGOL 68 (revised) syntax chart"", ALGOL Bull., no. 37, pp. 68, 1975.||",A Diagrammatic Notation for Abstract Syntax and Abstract Structured Objects
"J.D. Cooper&&United States Navy, Washington D.C., DC, USA|","Software management is considered from the corporate headquarters viewpoint. This perspective encompasses all facets of management, but specifically dealt with are those that are brought to bear on software management obstacles and ways to cope with them are presented. Standardization is presented as the most effective management device available at the corporate level for enhancing the overall software posture. Corporate management actions available for favorably influencing the quality of software over its life cycle and research initiatives are described.",10.1109/TSE.1978.231518,IEEE Transactions on Software Engineering,"Planning,Software maintenance,Software performance,Costs,Standardization,Software development management,Programming,Project management,Technology management,Quality management","F. P. Brooks, The Mythical Man-Month, MA, Reading:Addison-Wesley, 1975.||B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, May 1973.||S. L. Elshoff, ""An analysis of some commercial PL/I programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 113-120, June 1976.||C. L. McGowan and J. R. Kelly, Top-Down Structured Programming Techniques, New York:Petrocelli/Charter, 1975.||G. M. Weinberg, The Psychology of Computer Programming, NJ, Princeton:Van Nostrand Reinhold, 1971.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", CAEM, Dec. 1972.||W. C. Hetzel, Program Test Methods, NJ, Englewood Cliffs:Prentice-Hall, 1973.||E. W. Dijkstra, ""GOTO statements considered harmful"", Commun. Ass. Comput. Mach., vol. 11, Mar. 1968.||",Corporate Level Software Management
"W.T. Hardgrave&&Center for Programming Sciences and Technology, Institute for Computer Sciences and Technology, National Bureau of Standards, Washington D.C., USA|","This paper defines and demonstrates four philosophies for processing queries on tree structures; shows that the data semantics of queries shuld be described by designating sets of nodes from which v values for attnbutes may be returned to the data consumer; shows that the data semantics of database processing can be specified totally independent of any madhine, file structure, or implementation; shows that set theory is a natural and effective vehicle for analyzing the semantics of queries on tree structures; and finally, shows that Bolts is an adequate formalism for conveying the semantics of tree structure processing.",10.1109/TSE.1980.234492,IEEE Transactions on Software Engineering,"Time division multiplexing,Tree data structures,Database languages,Database systems,Data models,Set theory,Vehicles,Fasteners,Bars","R. E. Bleier, ""Treating hierarchical data structures in the SDC time-shared data management system (TDMS)"", Proc. ACM Nat. Conf. 1967, pp. 41-49, 1967.||R. E. Bleier and A. H. Vorhaus, ""File organization in the SDC time-shared data management system (TDMS)"", Proc. IFIP Congr. 1968, vol. 2, pp. 1245-1252, 1968.||W. T. Hardgrave, Theoretical aspects of Boolean operations on tree-structures and implications for generalized data managment, Aug. 1972.||""BLOTS: A retrieval language for tree-structured data-base systems"" in Information Systems COINS IV, New York:Plenum, pp. 137-160, 1974.||Information Management System General Information Manual.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. L, 1968.||J. B. Rothnie and W. T. Hardgrave, ""Data model theory: A beginning"", Proc. 5th Texas Conf. Comput. Syst., 1976-Oct.||""Special Issue: Database Management Systems"", Computing Surveys, vol. 8, Mar. 1976.||E. H. Sibley and W. T. Hardgrave, ""Data model theory and positional set processing"", Joint USSR/USA Conf. on Data-Base Syst., 1977-Nov.||SYSTEM 2000 Reference Manual, 1974.||D. C. Tsichritzis and F. H. Lochovsky, ""Hierarchical data-base management"", Computing Surveys, vol. 8, Mar. 1976.||W. Kent, ""Review of 'Hierarchical data-base management: A survey"", Computing Rev., vol. 17, pp. 401, Oct. 1976.||E. I. Lowenthal, A functional approach to the design of storage structures for generalized data management systems, Aug. 1971.||F. B. Ray, Directed graph structures for data management: Theory storage structures and algorithms, Aug. 1972.||",Ambiguity in Processing Boolean Queries on TDMS Tree Structures: A Study of Four Different Philosophies
"T.J. McCabe&&Department of Defense, National Security Agency, Fort Meade, MD, USA|","This paper describes a graph-theoretic complexity measure and illustrates how it can be used to manage and control program complexity. The paper first explains how the graph-theory concepts apply and gives an intuitive explanation of the graph concepts in programming terms. The control graphs of several actual Fortran programs are then presented to illustrate the correlation between intuitive complexity and the graph-theoretic complexity. Several properties of the graph-theoretic complexity are then proved which show, for example, that complexity is independent of physical size (adding or subtracting functional statements leaves complexity unchanged) and complexity depends only on the decision structure of a program.",10.1109/TSE.1976.233837,IEEE Transactions on Software Engineering,"Software testing,System testing,Graph theory,Fluid flow measurement,Software measurement,Linear programming,Software engineering,Software systems,Software maintenance,National security","C. Berge, Graphs and Hypergraphs, The Netherlands, Amsterdam:North-Holland, 1973.||B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, vol. 19, pp. 48-59, May 1973.||W. B. Cammack and H. J. Rogers, Improving the programming process, Oct. 1973.||D. E. Knuth, ""Structured programming with GOTO statements"", Computing Surveys, vol. 6, pp. 261-301, Dec. 1974.||R. Kosaraju, ""Analysis of structured programs"", J. Comput. Syst. Sci., vol. 9, pp. 232-255, Dec. 1974.||1972.||H. Legard and M. Marcotty, ""A generalogy of control structures"", Commun. Assoc. Comput. Mach., vol. 18, pp. 629-639, Nov. 1975.||H. D. Mills, Mathematical foundations for structured programming, MD, Gaithersburg:Federal System Division, IBM Corp., 1972.||",A Complexity Measure
"D.E. Knuth&&Department of Computer Science, University of Stanford, Stanford, CA, USA|","This paper discusses dynamic properties of data structures under insertions and deletions It is shown that, in certain circumstances, the result of n random insertions and m random deletions will be equivalent to n-m random insertions, under various interpretations of the world ""random"" and under various constraints on the order of insertions and deletions.",10.1109/TSE.1977.231160,IEEE Transactions on Software Engineering,"Data structures,Binary search trees,US Government,Computer science,Tree data structures,Artificial intelligence","A. V. Aho, J. Hopcroft and J. D. Ullman, The Design and Analysis of Computer Algorithms, MA, Reading:Addison-Wesley, pp. 470, 1974.||M. R. Brown, The analysis of a practical and nearly optimal priority queue, pp. 102, Mar. 1977.||T. N. Hibbard, ""Some combinatorial properties of certain trees with applications to searching and sorting"", J. Ass. Comput. Mach., vol. 9, pp. 13-28, Jan. 1962.||A. Jonassen, The stationary p-tree forest, pp. 88, Oct. 1976.||A. Jonassen and D. E. Knuth, ""A trivial algorithm whose analysis isn't"", J. Comput. Syst. Sci..||G. D. Knott, Deletion in binary storage trees, pp. 93, May 1975.||D. E. Knuth, ""The Art of Computer Programming"" in Sorting and Searching, MA, Reading:Addison-Wesley, vol. 3, pp. 722, 1973.||J. Vuillemin, ""A data structure for manipulating priority queues"", Commun. Ass. Comput. Mach..||",Deletions That Preserve Randomness
"Howard A. Sholl&&Department of Electrical Engineering and Computer Science, University of Connecticut, Storrs, CO, USA|Taylor L. Booth&&Department of Electrical Engineering and Computer Science, University of Connecticut, Storrs, CO, USA|","An engineering-oriented performance model of a computation is developed by extending the concept of a computation structure to cover the performance costs appropriate to software modelling. The model allows both serial and parallel (multiprocessor) configurations,and the evaluation of both time space parameters for alternate realizations. A brief discussion on the use of the model as a mechanism to guide the performance optimisation of programs is included.",10.1109/TSE.1975.6312874,IEEE Transactions on Software Engineering,"Computational modeling,Parallel processing,Computers,Flow graphs,Probabilistic logic,Organizations,Software",,Software performance modeling using computation structures
"M.S. Moriconi&&Computer Science Laboratory, SRI International, Inc., Menlo Park, CA, USA|","Since developing and maintaining formally verified programs is an incremental activity, one is not only faced with the problem of constructing specifications, programs, and proofs, but also with the complex problem of determining what previous work remains valid following incremental changes. A system that reasons about changes must build a detailed model of each development and be able to apply its knowledge, the same kind of knowledge an expert would have, to integrate new or changed information into an existing model.",10.1109/TSE.1979.234206,IEEE Transactions on Software Engineering,"Operating systems,File systems,Software maintenance,Induction generators,Prototypes,Proposals,Programming profession,Error correction,Drain avalanche hot carrier injection,Contracts","A. L. Ambler, D. I. Good, J. C. Browne, W. F. Burger, R. M. Cohen, C. G. Hoch, et al., ""Gypsy: A language for specification and implementation of verifiable programs"", Proc. ACM Conf. Language Design for Reliable Software SIGPLAN Notices, vol. 12, pp. 1-10, 1977-Mar.||R. S. Boyer and J S. Moore, ""A lemma driven automatic theorem prover for recursive function theory"", Proc. 5th Int. Conf. Artificial Intelligence, vol. 1, pp. 511-519, 1977-Aug.||L. P. Deutsch, An interactive program verifier, 1973.||May 1973.||J. Doyle, Truth maintenance systems for problem solving, Jan. 1978.||B. Elspas, R. E. Shostak and J. M. Spitzen, A verification system for Jocit/J3 programs (Rugged Programming Environment–RPE/2), Apr. 1977.||R. W. Floyd, ""Toward interactive design of correct programs"", Proc. IFIP Congr. 71, pp. 7-10, 1972.||D. I. Good, R. L. London and W. W. Bledsoe, ""An interactive program verification system"", IEEE Trans. Software Eng., vol. SE-1, pp. 59-67, Mar. 1975.||C. E. Hewitt and B. Smith, ""Towards a programming apprentice"", IEEE Trans. Software Eng., vol. SE-I, pp. 26-45, Mar. 1975.||E. L. Ivie, ""The programmer's workbench–A machine for software development"", Commun. Ass. Comput. Mach., vol. 20, pp. 746-753, Oct. 1977.||J. C. King, A program verifier, 1969.||D. C. Luckham, ""Program verification and verification-oriented programming"", Proc. IFIP Cong. 77, pp. 783-793, 1977.||M. S. Moriconi, A system for incrementally designing and verifying programs, Dec. 1977.||||M. S. Moriconi, Interactive design and verification: A message switching network example, May 1979.||Lecture Notes in Computer Science, Springer-Verlag.||C. Rich and H. E. Shrobe, ""Initial report on a Lisp programmer's apprentice"", IEEE Trans. Software Eng., vol. SE-4, pp. 456-467, Nov. 1978.||L. Robinson and K. N. Levitt, ""Proof techniques for hierarchically structured programs"", Commun. Ass. Comput. Mach., vol. 20, pp. 271-283, Apr. 1977.||O. Roubine and L. Robinson, Special Reference Manual, Jan. 1977.||N. Suzuki, ""Verifying programs by algebraic and logical reduction"", Proc. Int. Conf. Reliable Software, pp. 473-481, 1975-Apr.||Interlisp Reference Manual, Oct. 1978.||W. Teitelman, ""Toward a programming laboratory"", Proc. Int. Joint Conf. Artificial Intelligence, pp. 1-8, 1969-May.||B. Wegbreit, ""The ECL programming system"", AFIPS Conf. Proc., vol. 39, pp. 25 3-262, 1971-Nov.||",A Designer/Verifier's Assistant
"G.H. MacEwen&&Department of Computing and Information Science, Queen's University, Kingston, ONT, Canada|","This paper describes the design of a prototype experimental secure operating system kernel called xsl that supports compile-time enforcement of an information flow policy. The security model chosen is an extension of Feiertag's model modified to state requirements in terms of program analysis functions. A prototype flow analyzer for Pascal programs, based on Denning's model, has been designed and implemented for incorporation into xs1. In addition, a flow analyzer, based on London's model, has also been designed and implemented. Both kinds of enforcement are supported in xsl. Both program anallyzers use an intermediate code program representation, originally designed for code optimization. Implementation of the flow analyzers is in Euclid with the remainder of xsl in PascaL",10.1109/TSE.1983.236864,IEEE Transactions on Software Engineering,"Information security,Operating systems,Kernel,Design methodology,Information analysis,Prototypes,Design optimization,Control systems,Computer security,Protection","D. E. Denning, ""A lattice model of secure information flow"", Commun. Ass. Comput. Mach., vol. 19, pp. 236-243, May 1976.||D. E. Denning and P. J. Denning, ""Certification of programs for secure information flow"", Commun. Ass. Comput. Mach., vol. 20, pp. 504-513, July 1977.||T. B. London, The semantics of information flow, Jan. 1977.||A. L. Wilkinson, ""A penetration analysis of a Burroughs large system"", SIGOPS, vol. 15, pp. 14-25, Jan. 1981.||R. J. Feiertag, ""Proving multi-level security of a system design"", SIGOPS, vol. 11, pp. 57-65, Nov. 1977.||A. L. Mennie and G. H. MacEwen, ""Information flow certification using an intermediate code program representation"", IEEE Trans. Software Eng., vol. SE-7, pp. 594-607, Nov. 1981.||A. Chuah, An information flow analyzer for a secure system.||A. Rudmik and E. S. Lee, ""Compiler design for efficient code generation and program optimization"", SIGPLAN, vol. 14, pp. 127-138, Aug. 1979.||B. W. Lampson, Report on the programming language Euclid, vol. 12, Feb. 1977.||G. H. MacEwen and T. P. Martin, ""Abstraction hierarchies in top-down design"", J. Syst. Software, vol. 2, pp. 213-224, Mar. 1982.||L. Robinson, ""A formal methodology for the design of operating system software"" in Current Trends in Programming Methodology, NJ, Englewood Cliffs:Prentice‑Hall, pp. 61-110, 1977.||L. Snyder, ""On the systhesis and analysis of protection systems"", SIGOPS, vol. 11, pp. 141-150, Nov. 1977.||R. J. Feiertag, A technique for proving specifications are multilevel secure, Jan. 1980.||G. H. MacEwen, A hierarchical security model for program certification systems, Jan. 1981.||Bell Syst. Tech. J., vol. 57, July-Aug. 1978.||D. L. Parnas, ""On a buzzword: Hierarchical structure"", Proc. IFIP, vol. 74, pp. 336-339, 1974-Aug.||G. H. MacEwen, ""Hierarchical structure in operating systems"", Proc. EUROCOMP Conf. Software Syst. Eng., pp. 125-150, 1976-Sept.||F. DeRemer and H. Kron, ""Programming-in-the-large versus programming-in-the-small"", IEEE Trans Software Eng., vol. SE-2, pp. 80-86, June 1976.||C. Khanna, The protection mechanism for the xs1 operating system.||D. Andrews, Implementation of a secure operating system kernel, 1982.||J. R. Cordy and R. C. Holt, Specification ofConcurrent Euclid, July 1980.||",The Design for a Secure System Based on Program Analysis
"W.C. Cave&&Prediction Systems, Inc., Manasquan, NJ, USA|A.B. Salisburi&&unknow|","This paper describes project management methods used for controlling the life cycle of large-scale software systems deployed in multiple instaltations over a wide geographic area. A set of management milestones is offered along with requirements and techniques for establishing and maintaining control of the project. In particular, a quantitative measure of software quality is proposed based upon functional value, availability, and maintenance costs. Conclusions drawn are based on the study of several cases and are generally applicable to both commercial and military systems.",10.1109/TSE.1978.231519,IEEE Transactions on Software Engineering,"Project management,Control systems,Software quality,Environmental management,Programming,Software development management,Software systems,Software measurement,Cost function,Quality management","S. Bloom, ""Software quality control"", 1973 IEEE Symp. Comput. Software Rel. Rec., 1973.||W. C. Cave, The Incremental Method for Management Control of Software Development, NJ, Manasquan:Shalmar Corp., 1975.||H. F. Ledgard and W. C. Cave, ""COBOL under control"", Commun. Ass. Comput. Mach., vol. 19, pp. 601-608, Nov. 1976.||P. V. Norden, ""Useful tools for project management"" in Management of Production, MD, Baltimore:Penguin, pp. 71-101, 1970.||L. H. Putnam, ""A macro-estimating methodology for software development"", Dig. Papers Fall COMPCON '76 Thirteenth IEEE Computer Soc. Int. Conf., pp. 138-143, 1976-Sept.||A. L. Sherr, ""Developing and testing a large programming system"" in Program Test Methods, NJ, Englewood Cliffs:Prentice-Hall, 1972.||T. R. Snyder, ""Rate charting"", Datamation, pp. 44-47, Nov. 1976.||",Controlling the Software Life Cycle—The Project Management Task
"J. Labetoulle&&IRIA, Le Chesnay, France|G. Pujolle&&Ecole Nationale Superieure des Telecommunications, Paris, France|","In this paper a new method for analyzing complex queueing networks is proposed: the isolation method. As an example, we study packet switching networks with finite buffer size at each node.",10.1109/TSE.1980.234493,IEEE Transactions on Software Engineering,"Intelligent networks,Mathematical model,Computer networks,Queueing analysis,Packet switching,Databases,Complex networks,Transforms,Laplace equations,Iterative methods","K. M. Chandy, ""The analysis and solution for general queueing networks"", Proc. 6th Annu. Princeton Conf. Inform. Sci. Syst., pp. 219-224, 1972.||R. R. Muntz, Poisson departure processes and queueing networks, 1972.||K. M. Chandy, J. M. Howard and D. F. Towsley, ""Product form and local balance in queueing networks"", J. Ass. Comput. Mach., vol. 24, no. 2, pp. 250-263, 1977.||F. Baskett, K. M. Chandy, R. R. Muntz and F. G. Palacios, ""Open closed and mixed networks of queues with different classes of customers"", J. Ass. Comput. Mach., vol. 22, pp. 248-263, 1975.||W. J. Stewart, ""Practical considerations in the numerical analysis of Markovian models"", Proc. Comput. Performance (IFIP WG 7.3), 1977.||K. M. Chandy, U. Herzog and L. Woo, Approximate analysis of general queueing network, 1974.||P. J, Courtois, Decomposability Queueing and Computer System Applications (ACM Monograph Series), New York:Academic, 1977.||B. Avi-Itzhak and P. Heyman, ""Approximate queueing models for multiprogramming computer systems"", Oper. Res., vol. 21, pp. 1212-1230, 1973.||E. Gelenbe and G. Pujolle, ""The behaviour of a single queue in a general queueing network"", Acta Informatica, vol. 7, pp. 123-136, 1976.||P. Kuhn, ""Analysis of complex queueing networks by decomposition"", Proc. 8th Int. Teletraffic Cong., 1976.||M. Pennotti and M. Schwartz, ""Congestion control in store and forward tandem links"", IEEE Trans. Comput., vol. C-23, pp. 1434-1443, 1975.||H. Rudin, An introduction to flow control, 1976.||I. Rubin, ""Path delays in communication networks"", Appl. Math. Optimiz., vol. 1, 1974.||J. Labetoulle and G. Pujolle, ""A study of queueing networks with deterministic service and applications to computer networks"", Acta Informatica, vol. 7, pp. 183-195, 1976.||G. Pujolle, ""The influence of protocols on the stability conditions in packet-switching networks"", IEEE Trans. Commun., vol. COM-27, pp. 611-619, 1979.||S. S. Lam, ""Store-and-forward buffer requirements in a packet switching network"", IEEE Trans. Comput., vol. C-24, pp. 394-403, 1976.||P. Schweitzer and S. S. Lam, Buffer overflow in a store-and‑forward network node, 1975.||S. S. Lavenberg, Stability and maximum departure rate of certain open queueing networks having finite capacity constraints, 1975.||P. Schweitzer, Maximum throughput in finite capacity open queueing networks, 1976.||H. Kobayashi, ""Application of the diffusion approximation to queueing networks"", J. Ass. Comput. Mach., vol. 21, pp. 316-328, 1974.||J. Labetoulle and G. Pujolle, ""Modelling of packet switching communication networks with finite buffer size at each node"", Proc. Comput. Performance Evaluation (IFIP WG 7.3), 1977.||E. Gelenbe, ""On approximate computer models"", J. Ass. Comput. Mach., vol. 22, pp. 261-269, 1975.||M. Badel and A. V. Y. Shum, ""Accuracy of an approximate computer system model"", Proc. Modelling and Performance Eval-uation of Comput. Syst., pp. 11-34, 1976.||J. Leroudier and M. Parent, Discrete event simulation modelling of computer systems for performance evaluation, 1976.||J. Labetoulle and G. Pujolle, ""On some possible improvements in the HDLC protocol"", Proc. Int. Conf. Commun. (ICC 79), 1979.||J. Labetoulle and G. Pujolle, TARO: A local network.||J. Labetoulle, G. Pujolle and N. Mikou, ""Study of flows in an X25 environment"", Proc. Int. Symp. on Flow Control, 1979.||D. Stoyan, ""ueueing networks-–nsensitivity and a heuristic a approximation"", ElK, vol. 14, no. 3, pp. 135-143, 1978.||",Isolation Method in a Network of Queues
"J.E. Ball&&Department of Computer Science, University of Rochester, Rochester, NY, USA|J. Feldman&&Department of Computer Science, University of Rochester, Rochester, NY, USA|J.R. Low&&Department of Computer Science, University of Rochester, Rochester, NY, USA|R. Rashid&&Department of Computer Science, University of Rochester, Rochester, NY, USA|P. Rovner&&Department of Computer Science, University of Rochester, Rochester, NY, USA|","Rochester's Intelligent Gateway (RIG) system provides convenient access to a wide range of computing facilities. The system includes five large minicomputers in a very fast internal network, disk and tape storage, a printer/plotter and a number of display terminals. These are connected to larger campus machines (IBM 360/65 and DEC KL10) and to the ARPANET. The operating system and other software support for such a system present some interesting design problems. This paper contains a high-level technical discussion of the software designs, many of which will be treated in more detail in subsequent reports.",10.1109/TSE.1976.229890,IEEE Transactions on Software Engineering,"Intelligent systems,Computer networks,Microcomputers,ARPANET,Machine intelligence,Operating systems,Ethernet networks,Printers,Intelligent networks,Software systems","D. Bobrow and B. Raphael, ""New programming languages for AI research"", ACM Computing Surveys, vol. 6, pp. 153-174, 1974.||BCPL Reference Manual, 1975.||R. M. Metcalfe and D. R. Boggs, ""Ethernet: Distributed packet switching for local computer networks"", Commun. ACM, 1975.||R. Schank and R. Abelson, ""Scripts plans and knowledge"", Proc. 4th Int. Joint Conf. Artificial Intelligence, pp. 151-157, 1975.||R. F. Sproull and E. Thomas, ""A network graphics protocol"", SIGGRAPH-ACM, vol. 8, 1974.||D. C. Swinehart, Copilot: A multiple process approach to interactive programming systems, 1974.||D. C. Walden, ""A system for interprocess communication in a resource sharing computer network"", Commun. ACM, vol. 15, pp. 221-230, 1972.||N. Wilhelm, Computer engineering research facility, NY, Rochester:Univ. Rochester, 1975.||","RIG, Rochester's Intelligent Gateway: System Overview"
"J. Gait&&Institute of Computer Science and Technology, National Bureau of Standards, Gaithersburg, MD, USA|","During the next few years a new pseudorandom number generator will become available on many computer systems. A concern for the security of computer data has led to the adoption of a Data Encryption Standard (DES) by the National Bureau of Standards. This standard specifies a nonlinear cryptographic algorithm which can be used inter alia as a source of pseudorandom numbers in software applications, such as those involving order statistics, where the usual linear congruential and generalized feedback shift register generators seem to be inadequate. Results of testing the DES as a pseudorandom number generator indicate that the algorithm is more than satisfactory for this purpose.",10.1109/TSE.1977.231161,IEEE Transactions on Software Engineering,"Cryptography,Computer security,Data security,National security,NIST,Software standards,Software algorithms,Application software,Statistics,Feedback","Data Encryption Standard, Jan. 1977.||D. Knuth, Seminumerical Algorithms, MA, Reading:Addison‑Wesley, 1969.||M. D. MacLaren and G. Marsaglia, ""Uniform random number generators"", J. Ass. Comput. Mach., vol. 12, pp. 83-89, 1965.||""Encryption algorithm for computer data protection"", Federal Register Notice, vol. 40, pp. 12067-12250, 1975.||H. Blinchikoff and Z. Zverov, Filtering in the Time and Frequency Domains, New York:Wiley, 1976.||C. E. Shannon, ""Communication theory of secrecy systems"", Bell Syst. Tech. J., vol. 27, pp. 69-656, 1949.||H. Feistel, ""Cryptography and Computer Privacy"", Sci. Amer., vol. 228, pp. 15-23, 1973.||C. Meyer, ""Enciphering data for secure transmission"", Comput. Des., pp. 129-134, Apr. 1974.||C. Meyer and W. Tuchman, ""Pseudo-random codes can be cracked"", Electron. Des., vol. 23, pp. 74-76, 1972.||D. H. Lehmer, Proc. 2nd Symp. Large Scale Digital Computing Mach. Cambridge, pp. 141-146, 1951.||",A New Nonlinear Pseudorandom Number Generator
"Robert E. Noonan&&Department of Computer Science, University of Maryland, College Park, MD, USA|","In the author's view structured programming consists of the use of the following: structure, abstraction, and specification. The purpose of this paper is to develop formal specifications for a nontrivial program in order to facilitate a proof of correctness. It is shown how the specifications serve as an abstraction for the program. A proof of correctness then consists of merely showing that the program at each level meets its formal specifications. Under this methodology lower levels of the program can be changed without affecting higher levels.",10.1109/TSE.1975.6312875,IEEE Transactions on Software Engineering,"Formal specifications,Programming,Grammar,Arrays,Specification languages,Production",,Structured programming and formal specification
"T.E. Cheatham&&Center for Research in Computing Technology, Harvard University, Cambridge, MA, USA|G.H. Holloway&&Center for Research in Computing Technology, Harvard University, Cambridge, MA, USA|J.A. Townley&&Center for Research in Computing Technology, Harvard University, Cambridge, MA, USA|","Symbolic evaluation is a form of static program analysis in which symbolic expressions are used to denote the values of program variables and computations. It does not require the user to specify which path at a conditional branch to follow nor how many cycles of a loop to consider. Instead, a symbolic evaluator uses conditional expressions to represent the uncertainty that arises from branching and develops and attempts to solve recurrence relations that describe the behavior of loop variables.",10.1109/TSE.1979.234207,IEEE Transactions on Software Engineering,"Programming profession,Computer bugs,Uncertainty,Heart,Productivity,Degradation,Computer languages,Data structures,Humans","R. S. Boyer, B. Elspas and K. N. Levitt, ""SELECT–A formal system for testing and debugging programs by symbolic execution"", Proc. Int. Conf on Reliable Software, pp. 234-245, 1975-Apr.-21-23.||T. E. Cheatham and J. A. Townley, ""Symbolic evaluation of programs–A look at loop analysis"", Proc. ACMSymp. Symbolic and Algebraic Computation, pp. 90-96, 1976.||T. E. Cheatham and D. B. Washington, Program loop analysis by solving first order recurrence relations, May 1978.||T. E. Cheatham, Semantic models for programming languages, MA, Cambridge:Cent. Res. Comput. Tech., Harvard Univ., July 1978.||L. A. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept. 1976.||W. R. Conrad, Rewrite user's guide, MA, Cambridge:Cent. Res. Computing Technology, Harvard Univ., Aug. 1976.||W. R. Conard, COST user's guide, MA, Cambridge:Cent. Res. Comput. Tech., Harvard Univ., Nov. 1976.||W. R. Conard, PROBE user's guide, MA, Cambridge:Cent. Res. Comput. Tech., Harvard Univ., June 1976.||L. P. Deutsch, An interactive program verifier, May 1973.||B. Elspas, The semiautomatic generation of inductive assertions for proving program correctness, July 1974.||L. D. Fosdick and L. J. Osterweil, ""Data flow analysis in software reliability"", Comput. Surveys, vol. 8, pp. 305-330, Sept. 1976.||S. M. German, ""Automating proofs of the absence of common runtime errors"", Conf Rec. 5th Annu. ACM Symp. Principles of Programming Languages, pp. 105-118, 1978-Jan.-23-25.||S. L. Hantler and J. C. King, ""An introduction to proving the correctness of programs"", Comput. Surveys, vol. 8, pp. 331-353, Sept. 1976.||G. H. Holloway, User's guide to the expression analyzer and query facility, MA, Cambridge:Cent. Res. Comput. Tech., Harvard Univ., May 1976.||W. E. Howden, ""Symbolic testing and the DISSECT symbolic evaluation system"", IEEE Trans. Software Eng., vol. SE-3, pp. 266-278, July 1977.||S. Igarashi, R. L. London and D. C. Luckham, ""Automatic program verification I: A logical basis and its implementation"", Acta Informatica, vol. 4, pp. 145-182, 1975.||M. Karr, Summation in finite terms, Feb. 1976.||S. Katz and Z. Manna, ""Logical analysis of programs"", Commun. Assoc. Comput. Mach., vol. 19, pp. 188-206, Apr. 1976.||J. C. King, A program verifier, June 1969.||J. C. King, ""Symbolic execution and program testing"", Commun. Assoc. Comput. Mach., vol. 19, pp. 385-394, July 1976.||B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell and G. J. Popek, ""Report on the programming language Euclid"", Sigplan Notices, vol. 12, Feb. 1977.||D. Loveman, ""Program improvement by source-to-source transformation"", J. Assoc. Comput. Mach., vol. 24, pp. 121-145, Jan. 1977.||ECL programmer's manual, Dec. 1974.||C. G. Nelson and D. C. Oppen, ""A simplifier based on efficient decision algorithms"", Conf. Rec. 5th Annu. ACM Symp. Principles of Programming Languages, pp. 141-150, 1978-Jan.-23-25.||J. A. Robinson, ""A machine oriented logic based on the resolution principle"", J. Assoc. Comput. Mach., vol. 12, pp. 23-41, Jan. 1965.||J. F. Rulifson, J. A. Derkson and R. J. Waldinger, QA4: A procedure calculus for intuitive reasoning, CA, Menlo Park:Artificial Intelligence Cent., Stanford Res. Inst., Nov. 1972.||G. R. Ruth, Analysis of algorithm implementations, May 1974.||R. L. Sites, Proving that computer programs terminate cleanly, May 1974.||T. Standish, D. Harriman, D. Kibler and J. Neighbors, The Irvine program transformation catalogue, Irvine:Dep. Inform. and Comput. Sci., Univ. California, Jan. 1976.||N. Suzuki and K. Ishihata, ""Implementation of an array bound checker"", Conf. Rec. 4th Ann. ACM Symp. Principles of Programming Languages, pp. 132-143, 1977-Jan.-17-19.||J. A. Townley, A symbolic interpreter for EL1, MA, Cambridge:Cent. Res. Comput. Tech., Harvard Univ., Nov. 1976.||J. A. Townley, The analysis of pointers in programs, MA, Cambridge:Cent. Res. Comput. Tech., Harvard Univ., Oct. 1978.||J. A. Townley, An incremental approach to resolution-based theorem proving, Aug. 1978.||J. A. Townley, ""Program analysis techniques for software reliability"", ACM Workshop on Reliable Software, 1978-Sept.||",Symbolic Evaluation and the Analysis of Programs
"M.W. Du&&Institute of Computer Engineering, National Chiao Tung University, Hsinchu, Taiwan|T.M. Hsieh&&Institute of Electronic Engineering, National Chiao Tung University, Hsinchu, Taiwan|K.F. Jea&&Department of Computer Science, University of Wisconsin, Madison, Madison, WI, USA|D.W. Shieh&&Institute for Information Industry, System Development Center, Taiwan|",A new approach is proposed for the design of perfect hash functions. The algorithms developed can be effectively applied to key sets of large size. The basic ideas employed in the construction are rehash and segmentation. Analytic results are given which are applicable when problem sizes are small. Extensive experiments have been performed to test the approach for problems of larger size.,10.1109/TSE.1983.236866,IEEE Transactions on Software Engineering,"Performance evaluation,Testing,Performance analysis,Information retrieval,Databases,Program processors,Councils,Computer science,Design methodology,Algorithm design and analysis","M. R. Anderson and M. G. Anderson, ""Comments on perfect hashing functions: A single probe retrieving method for static sets"", Commun. Ass. Comput. Mach., vol. 22, pp. 104, Feb. 1979.||W. Buchholz, ""File organization and addressing"", IBM Syst. J., vol. 2, pp. 86-111, June 1963.||R. J. Cichelli, ""Minimal perfect hash functions made simple"", Commun. Ass. Comput. Mach., vol. 23, pp. 17-19, Jan. 1980.||F. N. Davis and D. E. Barton, Combinational Chances, London:Griffin, 1962.||M. W. Du, K. F. Jea and D. W. Shieh, ""The study of new perfect hash schemes"", Proc. COMPSAC' 80, pp. 341-347, 1980-Oct.||M. W. Du and H. C. Lin, ""The design of a memory saving Chinese input/output system"", Proc. NCS, pp. 8.1-8.10, 1979-Dec.||W. Feller, An Introduction to Probability Theory and Its Applications, New York:Wiley, vol. 1, 1950.||S. P. Ghosh, Data Base Organization for Data Management, New York:Academic, 1977.||G. Jaeschke and G. Osterburg, ""On Chichelli's minimal perfect hash functions method"", Commun. Ass. Comput. Mach., vol. 23, pp. 728-729, Dec. 1980.||G. Jaeschke, ""Reciprocal hashing: A method for generating minimal perfect hashing functions"", Commun. Ass. Comput. Mach., vol. 24, pp. 829-833, Dec. 1981.||K. F. Jea, The study of the static properties of a new perfect hash scheme, May 1980.||L. R. Johnson, ""An indirect chaining method for addressing on secondary keys"", Commun. Ass. Comput. Mach., vol. 4, pp. 218-222, May 1981.||D. E. Knuth, The Art of Computer Programming Vol. 3 Sorting and Searching, MA, Reading:Addison-Wesley, 1973.||C. L. Liu, Introduction to Combinatorial Mathematic, New York:McGraw-Hill, 1968.||V. Y. Lum, P.S.T. Yuen and M. Dodd, ""Key-to-address transform techniques: A fundamental performance study on large existing formatted files"", Commun. Ass. Comput. Mach., vol. 14, pp. 228-239, Apr. 1971.||W. D. Maurer and T. G. Lewis, ""Hash table method"", Comput. Surveys, vol. 7, pp. 5-19, Mar. 1975.||R. Morris, ""Scatter storage techniques"", Commun. Ass. Comput. Mach., vol. 1, pp. 38-44, Jan. 1968.||C. A. Olson, ""Random access file organization for indirectly accessed records"", Proc. ACM 24th Nat. Conf., pp. 539-549, 1969.||W. W. Peterson, ""Addressing for random-access storage"", IBM J. Res. Develop., vol. 1, pp. 130-146, Apr. 1957.||G. Schay and W. G. Spruth, ""Analysis of a file addressing method"", Commun. Ass. Comput. Mach., vol. 5, pp. 459-462, Aug. 1962.||D. G. Severance, ""Identifier search mechanisms: A survey and generalized model"", Comput. Surveys, vol. 6, pp. 175-194, Sept. 1974.||R. Sprugnoli, ""Perfect hashing functions: A single probe retrieving method for static sets"", Commun. Ass. Comput. Mach., vol. 20, pp. 841-850, Nov. 1977.||M. Tainiter, ""Addressing for random-access storage with multiple bucket capacities"", J. Ass. Comput. Mach., vol. 10, pp. 307-315, July 1963.||",The Study of a New Perfect Hash Scheme
"R.C. McHenry&&Federal Systems Division, IBM, Corporation, Gaithersburg, MD, USA|C.E. Walston&&Federal Systems Division, IBM, Corporation, Gaithersburg, MD, USA|",This paper describes weapon system software life cycle management from a contractor perspective. Four procurement strategies–each requiring two or more-contracts–are examined and their impact on the contractor and the software process are described.,10.1109/TSE.1978.231520,IEEE Transactions on Software Engineering,"Software development management,Weapons,Contracts,Procurement,Software maintenance,Life testing,Software testing,Proposals,Software design,Software performance","""DOD Directive 5000.29"", Management of Computer Resources in Major Defense Systems, Apr. 1976.||C. E. Walston and C. P. Felix, ""A method of programming measurement and estimation"", IBM Syst. J., vol. 16, no. 1, 1977.||G. L. Krivonak.||L. H. Putnam, A general solution to the software sizing and estimating problem, pp. 345-361.||B. W. Boehm, ""Software engineering"", IEEE Trans. Comput., vol. C-25, pp. 1226-1241, Dec. 1976.||D. Tiechrow and E. A. Hershey, ""PSL/PSA: A computer-aided technique for structured documentation and analysis of information processing systems"", IEEE Trans. Software Eng., vol. SE-3, pp. 41-48, Jan. 1977.||D. T. Ross, ""Structured analysis (SA): Language for communicating ideas"", IEEE Trans. Software Eng., vol. SE-3, pp. 16-34, Jan. 1977.||T. E. Bell, D. C. Bixler and M. E. Dyer, ""An extendable approach to computer-aided software requirements engineering"", IEEE Trans. Software Eng., vol. SE-3, pp. 49-60, Jan. 1977.||C. L. McGowan and J. R. Kelly, Top Down Structured Programming Techniques, New York:Petrocelli/Charter, 1975.||G. J. Myers, Reliable Software Through Composite Design, New York:Petrocelli/Charter, 1975.||E. Yourdan and L. L. Constantine, Structured Design, New York:Yourdan, 1975.||R. C. McHenry, ""A proposed software development process"", Proc. 1Oth Hawaii Conf. Syst. Sci., 1977.||R. C. McHenry and C. L. McGowan, Software Process: Management Engineering.||D. L. Walker.||",Software Life Cycle Management: Weapons Process Developer
"P.S. Kritzinger&&Department of Computer Science, University of Stellenbosch, Stellenbosch, South Africa|A.E. Krzesinski&&Department of Computer Science, University of Stellenbosch, Stellenbosch, South Africa|P. Teunissen&&Department of Computer Science, University of Stellenbosch, Stellenbosch, South Africa|","Multiclass queuing network models of multiprogramming computer systems are frequently used to predict the performance of computing systems as a function of user workload and hardware configuration. This paper examines three different methods for incorporating operating system overhead in multiclass queuing network models. The goal of the resultant model is to provide an accurate account of the processing performance and the system CPU overhead of each of the several different types of jobs (batch, timesharing, transaction processing, etc.) that together make up the multiprogramming workload. The first method introduces an operating sysbtm workload consisting of a fixed number of jobs to represent system CPU overhead processing. The second method extends the jobs' CPU service requests to include explicitly the CPU overhead necessary for system processing. The third method employs a communicating set of user and system job classes so that the CPU overhead can be modeled by switching jobs from user to system class whenever they require system CPU service. The capabilities and accuracy of the three methods are assessed and compared against performance and overhead data measured on a Univac 1110 computer.",10.1109/TSE.1980.234494,IEEE Transactions on Software Engineering,"Intelligent networks,Operating systems,Central Processing Unit,Predictive models,Computer networks,Resource management,Hardware,Computer network reliability,Computer science,Africa","M. Badel, E. Gelenbe, J. Leroudier and D. Potier, ""daptive o optimization of a time-sharing system's performance"", Proc. IEEE, vol. 63, pp. 958-965, 1975-June.||W. S. Gerber, ""QTRACE/SNAP–A system for measuring and modelling the UNIVAC 1110 operating system"", USE Fall Conf. Tech. Papers Minneapolis, 1977-Oct.-10-14.||""Queueing network models of computer performance"", Computing Surveys (Special Issue), vol. 10, Sept. 1978.||H. Kobayashi and M. Reiser, On generalization of job routing behaviour in a queueing network model, Oct. 1975.||A. Krzesinski, W. S. Gerber and P. Teunissen, ""A multiclass network model of a multiprogramming timesharing computer system"", Proc. 1977 IFIP Congress, pp. 481-486, 1977-Aug.||R. R. Muntz and J. Wong, Efflcient computational procedures for closed queueing networks with the product form solution, CA, Los Angeles:Comput. Sci. Dep., School of Eng. Appl. Sci., Univ. California.||SIP Level 4R2, Dec. 1975.||L. Lipsky and J. D. Church, ""Applications of a queueing network model for a computer system"", Computing Surveys, vol. 9, pp. 205-221, Sept. 1977.||",Incorporating System Overhead in Queuing Network Models
"J.L. Elshoff&&Computer Science Department, General Motors Research and Development Laboratories, Warren, MI, USA|","Two sets of commercial PL/I programs are studied. One set represents programming practice before the introduction of structured programming techniques and the other set after their introduction. The use of these new methods is found to make a measurable difference on the quality of the programs. A few minor changes in the use of PL/I are noted. Substantial modifications to the control structure of the programs are measured. Also, some improvements in the qualitative aspects of the two sets are discussed. Although, they are much improved, further alterations can make the programs still better. The time and training required to introduce structured programming techniques will begin paying dividends within six months.",10.1109/TSE.1977.231162,IEEE Transactions on Software Engineering,"Programming profession,Computer languages,Productivity,Guidelines,Frequency,Computer science,Personnel,Displays,Utility programs,Data processing","O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||Datamation (Special Issue on Structured Programming), vol. 19, no. 6, Dec. 1973.||Comput. Surpeys (Special Issue on Programming), vol. 6, no. 4, Dec. 1974.||J. L. Elshoff, ""A numerical profile of commercial PL/I programs"", Software-Practice and Experience, vol. 6, no. 4, pp. 505-526, Oct.-Nov. 1976.||J. L. Elshoff, ""An analysis of some commercial PL/ I programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 113-120, June 1976.||",The Influence of Structured Programming on PL/I Program Profiles
"R.F. Boisvert&&Division of Mathematical Sciences, Purdue University, Lafayette, IN, USA|J.R. Rice&&Division of Mathematical Sciences, Purdue University, Lafayette, IN, USA|E.N. Houstis&&Department of Mathematics and Computer Science, University of South Carolina, Columbia, SC, USA|",This paper describes a system to systematically compare the performance of various methods (software modules) for the numerical solution of partial differential equations. We discuss the general nature and large size of this performance evaluation problem and the data one obtains. The system meets certain design objectives that ensure a valid experiment: 1) precise definition of a particular measurement; 2) uniformity in defimition of variables entering the experiment; and 3) reproducibility of results. The ease of use of the system makes it possible to make the large sets of measurements necessary to obtain confidence in the results and its portability allows others to check or extend the measurements. The system has four parts: 1) semiautomatic generation of problems for experimental input; 2) the ELLPACK system for actually solving the equation; 3) a data management system to organize and access the experimental data; and 4) data analysis programs to extract graphical and statistical summaries from the data.,10.1109/TSE.1979.230175,IEEE Transactions on Software Engineering,"Partial differential equations,Software performance,Difference equations,Differential equations,Particle measurements,Reproducibility of results,Data analysis,Data mining,Software systems,Terminology","M. Hollander and D. A. Wolfe, ""7"" in Nonparametic Statistical Methods, New York:Wiley, 1973.||E. N. Houstis, R E. Lynch, T. S. Papatheodorou and J. R. Rice, ""Development evaluation and selection of methods for elliptic partial differential equations"", Annu. Assoc. Calcul. Analog., vol. 11, pp. 98-105, 1975.||E. N. Houstis, R. E. Lynch, T. S. Papatheodorou and J. R. Rice, ""Evaluation of numerical methods for elliptic partial differential equations"", J. Comput. Phys., vol. 27, pp. 323-350, June 1978.||E. N. Houstis and T. S. Papatheodorou, ""Comparison of fast direct methods for elliptic problems"" in Advances in Computer Methods for Partial Differential Equations, NJ, New Brunswick:IMACS, pp. 46-52, 1977.||E. N. Houstis and T. S. Papatheodrou, ""Algorithm XXX FFT9: Fast solution of Helmholtz type partial differential equations"", ACM Trans. Math. Software, 1979.||E. N. Houstis and J. R. Rice, A population of elliptic partial differential equations in two variables, 1979.||E. N. Houstis and J. R. Rice, The performance of high order methods on elliptic partial differential equations with singularities, 1979.||J. R. Rice, ""The algorithm selection problem"" in Advances in Computers, New York:Academic, vol. 15, pp. 65-118, 1976.||J. R. Rice, ""ELLPACK: A research tool for elliptic partial differential equations software"" in Mathematical Software III, New York:Academic, pp. 319-342, 1977.||J. R. Rice, ""Methodology for the algorithm selection problem"", Proc. IFIP Conf. Numerical Software Performance Evaluation, 1979.||",A System for Performance Evaluation of Partial Differential Equations Software
"M.K. Sinha&&National Centre for Software Development and Computing Techniques, Tata Institute of Fundamental Research, Mumbai, India|","A methodology has been proposed for solving database problems requiring only approximate solutions. Data items are classified as sensitive and nonsensitive. An approximate transaction modifies only the nonsensitive data items which need not satisfy strong consistency constraints, and provides results only up to a degree of approximation. Further, it is shown that such an approach improves the performance in situations where transaction conflicts are frequent. Additionally, the methodology provides users as well as data managers with mechanisms to control the precision of the computation, preserving the qualitative characteristics of the data items.",10.1109/TSE.1983.236867,IEEE Transactions on Software Engineering,"Transaction databases,System recovery,Quality management,Concurrency control,Programming","C. J. Date, An Introduction to Database Systems, MA, Reading:Addison-Wesley, 1981.||P. A. Bernstein and N. Goodman, ""Concurrency control in distributed database systems"", ACM Comput. Surveys, vol. 13, June 1981.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notion of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, Nov. 1976.||J. N. Gray, R. A. Lorie, G. R. Putzolu and I. L. Traiger, ""Granularity of locks and degree of consistency in a shared database"" in Modelling in Database Management Systems, North-Holland, 1976.||J. N. Gray, ""Notes on database operating systems"", Adv. Course Oper. Syst., 1977.||P. A. V. Hall and G. R. Dowling, ""Approximate string matching"", ACM Comput. Surveys, vol. 2, no. 4, 1980.||L. Lamport, ""Time clocks and ordering of events in a distributed system"", Commun. Ass. Comput. Mach., vol. 21, July 1978.||R. A. Lorie, ""Physical integrity in a large segmented database"", ACM Trans. Database Syst., vol. 2, no. 1, 1977.||N. H. Nie, C. H. Hull, J. G. Jenkins, K. Steinbrenner and D. H. Bent, SPSS–Statistical Package for the Social Sciences, New York:McGraw-Hill, 1970.||D. P. Reed, Naming and synchronisation in a decentralised computer system, 1978.||P. A. Samuelson, Economics–An Introductory Analysis, New York:McGraw-Hill, 1964.||G. Schlageter, ""Process synchronisation in database systems"", ACM Trans. Database Syst., vol. 3, no. 3, 1978.||D. G. Severance and G. M. Lohman, ""Differential files: Their application to the maintenance of large databases"", ACM Trans. Database Syst., vol. 1, no. 3, 1970.||L. Svobodova, personal communication.||R. H. Thomas, ""A majority consensus approach to the concurrency control for multiple copy databases"", ACM Trans. Database Syst., vol. 4, June 1979.||S.J.P. Todd, ""The Peterlee relational test vehicle–A system over‑view"", IBM Syst J., vol. 15, Aug. 1976.||",Nonsensitive Data and Approximate Transactions
"L.H. Putnam&&Space Division, Information Systems Programs, General Electric Company Limited, Arlington, VA, USA|","Application software development has been an area of organizational effort that has not been amenable to the normal managerial and cost controls. Instances of actual costs of several times the initial budgeted cost, and a time to initial operational capability sometimes twice as long as planned are more often the case than not.",10.1109/TSE.1978.231521,IEEE Transactions on Software Engineering,"Costs,Productivity,Software development management,Project management,State estimation,Job shop scheduling,Software standards,Computer industry,Programming profession,Financial management","F. P. Brooks, The Mythical Man-Month, MA, Reading:Addison-Wesley, 1975.||L. H. Morin, Estimation of resources for computer programming projects, 1973.||P. F. Gehring and U. W. Pooch, ""Software development management"", Data Management, pp. 14-18, Feb. 1977.||P. F. Gehring, ""Improving software development estimates of time and cost"", 2nd Int. Conf. Software Engneering, 1976-Oct.-13.||P. F. Gehring, A quantitative analysis of estimating accuracy in software development, Aug. 1976.||J. D. Aron, ""A subjective evaluation of selected program development tools"", Software Life Cycle Management Workshop, 1977-Aug.||P. V. Norden, ""Useful tools for project management"" in Management of Production, MD, Baltimore:Penguin, pp. 71-101, 1970.||P. V. Nordon, ""Project life cycle modelling: Background and application of the life cycle curves"", Software Life Cycle Management Workshop, 1977-Aug.||L. H. Putnam, ""A macro-estimating methodology for software development"", Dig. of Papers Fall COMPCON '76 13th IEEE Computer Soc. Int. Conf., pp. 138-143, 1976-Sept.||L. H. Putnam, ""ADP resource estimating: A macro-level forcasting methodology for software development"", Proc. 15th Annu. U.S. Army Operations Res. Symp., pp. 323-327, 1976-Oct.-26-29.||L. H. Putnam, ""A general solution to the software sizing and estimating problem"", Life Cycle Management Conf. Amer. Inst. of Industrial Engineers, 1977-Feb.-8.||L. H. Putnam, ""The influence of the time-difficulty factor in large scale software development"", Dig. of Papers IEEE Fall COMPCON '77 15th IEEE Computer Soc. Int. Conf., pp. 348-353, 1977-Sept.||L. H. Putnam and R. W. Wolverton, ""Quantitative management: Software cost estimating"", COMPSAC '77 IEEE Computer Soc. 1st Int. Computer Software and Applications Conf., 1977-Nov.-8-10.||C. E. Walston and C. P. Felix, ""A method of programming measurement and estimation"", IBM Syst. J., vol. 16, pp. 54-73, 1977.||E. B. Daly, ""Management of software development"", IEEE Trans. Software Eng., vol. SE-3, pp. 229-242, May 1977.||W. E. Stephenson, An analysis of the resources used in the safeguard system software development, Aug. 1976.||Software cost estimation study: Guidelines for improved cost estimating, Aug. 1977.||G. D. Detletsen, R. H. Keer and A. S. Norton, Two generations of transaction processing systems for factory control, 1976.||Software systems development: A CSDL project history, June 1977.||T. C. Jones, ""Program quality and programmer productivity"", IBM Syst. J., vol. 17, 1977.||Software systems development: A CSDL project history, June 1977.||A. D. Suding, ""Hobbits dwarfs and software"", Datamation, pp. 92-97, June 1977.||T. J. Devenny, An exploratory study of software cost estimating at the electronic systems division, July 1976.||D. H. Johnson, Application of a macro-estimating methodology for software development to selected C group projects, May 1977.||J. R. Johnson, ""A working measure of productivity"", Datamation, pp. 106-108, Feb. 1977.||R. E. Merwin, Data processing experience at NASA–Houston Manned Spacecraft Center, Jan. 1970.||B. P. Lientz, E. B. Swanson and G. E. Tompkins, Characteristics of application software maintenance, Graduate School of Management, 1976.||R. E. Bellman, ""Mathematical model making as an adaptive process"", Mathematical Optimization Techniques, Apr. 1963.||G. E. P. Box and L. Pallesen, Software budgeting model, Madison:Mathematics Research Center, University of Wisconsin, Feb. 1977.||""Management Information Systems"", A Software Resource Macro-Estimating Procedure, Feb. 1977.||A. M. Pietrasanta, ""Resource analysis of computer program system development"" in On the Management of Computer Programming, NJ, Princeton:Auerbach, pp. 72, 1970.||",A General Empirical Solution to the Macro Software Sizing and Estimating Problem
"J.E. Allchin&&Department of Computer Science, University of Stanford, Stanford, CA, USA|",The programming language Modula is reviewed for its ability to support the wide variety of time usages required in a process control system. It is shown that in many instances concurrent languages supporting device control and multiprogramming may need additional facilities for the support of time.,10.1109/TSE.1980.234495,IEEE Transactions on Software Engineering,"Process control,Delay effects,Clocks,Computer languages,Switching systems,Force control,Computer science,Hardware,Condition monitoring,Communication system control","G. R. Andrews, ""The design of a message switching system: An application and evaluation of Modula"", IEEE Trans. Software Eng., vol. SE-5, pp. 138-147, Mar. 1979.||N. Wirth, ""Modula: A langauge for modular multiprogramming"", Software–Practice and Experience, vol. 7, pp. 3-35, 1977.||N. Wirth, ""The use of Modula"", Software–Practice and Experience, vol. 7, pp. 37-65, 1977.||N. Wirth, ""Design and implemention of Modula"", Software–Practice and Experience, vol. 7, pp. 67-84, 1977.||H. K. Reghbati and V. C. Hamacher, ""A note on the suitability of Modula for process control applications"", Software–Practice and Experience, vol. 8, pp. 233-234, 1978.||R. C. Holt, Structured Concurrent Programming with Operating Systems Applications, MA, Reading:Addison-Wesley, 1978.||J. D. Ichbiah, ""Rationale for the design of the ADA programming language"", SIGPLAN Notices, vol. 14,6, June 1979.||",Modula and a Question of Time
"B. Walke&&Research Institute, AEG Telefunken, Ulm, Germany|","This paper describes a method for increasing the batch-processing efficiency of medium and large scale scientific computer systems with a small main memory. A program-replacement algorithm, RESEP, is defined whose goal is to always keep the CPU busy. RESEP temporarily transfers selected programs from main memory to the secondary storage. Reallocation of such programs is also performed by this algorithm.",10.1109/TSE.1977.231163,IEEE Transactions on Software Engineering,"Throughput,Operating systems,Time sharing computer systems,Application software,Large-scale systems,Computer applications,Algorithm design and analysis,Queueing analysis,US Government,Processor scheduling","J. P. Buzen, ""Computational algorithms for closed queueing networks with exponential servers"", Commun. Ass. Comput. Mach., vol. 16, pp. 527-531, Sept. 1973.||B. Walke, ""Queueing networks with degenerate exponential servers"" in Wiss. Berichte AEG-TELEFUNKEN, West Germany:Elitera Press Berlin, pp. 153-157, 1975.||B. Walke, ""Verdrangende Arbeitsspeicher-Belegungsstrategien zur Durchsatzsteigerung von Rechenanlagen"" in Elektron. Rechenanlagen, West Germany:Oldenbourg Press Munich, vol. 17, pp. 171-176, 1975.||T. Tanaka, ""An analysis of multiprogramming system using a cyclic queueing model"", Syst. Comput. Contr., vol. 1, pp. 37-45, 1970.||R. R. Muntz, ""Analytic models for computer performance analysis"" in Lecture Notes in Computer Science, New York:Springer-Verlag, vol. 8, pp. 246-265, 1974.||D. P. Gaver and G. S. Shedler, ""Processor utilization in multiprogramming systems via diffusion approximations"", Oper. Res., vol. 21, pp. 569-576, Mar./Apr. 1973.||S. Sherman, F. Baskett and J. C. Browne, ""Trace-driven modeling and analysis of CPU scheduling in a multiprogramming system"", Commun. Ass. Comput. Mach., vol. 15, pp. 1063-1069, Dec. 1972.||W. A. Wulf, ""Performance monitors for multiprogramming systems"", Proc. ACM 2nd Symp. Operating Systems Principles, 1969-Oct.||J. C. Browne, J. Lan and F. Baskett, ""The interaction of multi‑programming job scheduling and CPU scheduling"", 1972 Fall Joint Comput. Conf. AFIPS Conf Proc., vol. 40, pp. 13-21, 1972.||",Program Replacement for Better Throughput
"R.E. Fairley&&Department of Computer Science, Colorado State University, Fort Collins, CO, USA|","ALADDIN is an interactive facility for debugging and testing of assembly language programs. ALADDIN differs from traditional debuggers by allowing the user to specify breakpoint assertions, rather than breakpoint locations. Assertions are logical relations among various components of the program state. If an assertion becomes false during execution of the object program a breakpoint is executed and control is passed to the user's terminal. ALADDIN can also be used as a testing tool to verify that asserted behavior matches actual behavior under various sets of input data and test conditions.",10.1109/TSE.1979.230176,IEEE Transactions on Software Engineering,"Assembly,Debugging,Software tools,Productivity,High level languages,Programming profession,Application software,Software testing,Program processors,Documentation","M. V. Wilkes, ""Software engineering and structured programming"", IEEE Trans. Software Eng., vol. SE-2, pp. 274-276, Dec. 1976.||D. Gries, Compiler Construction for Digital Computers, New York:Wiley, 1971.||R. P. Case and A. Padegs, ""Architecture of the IBM system/370"", Commun. Assoc. Comput. Mach., vol. 21, pp. 73-96, Jan. 1978.||",Aladdin: Assembly Language Assertion Driven Debugging Interpreter
"H.S. Koch&&Graduate School of Management, University of Rochester, Rochester, NY, USA|P. Kubat&&Graduate School of Management, University of Rochester, Rochester, NY, USA|","A decision procedure to determine when computer software should be released is described. This procedure is based upon the cost-benefit for the entire company that has developed the software. This differs from the common practice of only minimizing the repair costs for the data processing division. Decision rules are given to determnine at what time the system should be released based upon the results of testing the software. Necessary and sufficient conditions are identified which determine when the system should be released (immediately, before the deadline, at the deadline, or after the deadline). No assumptions are made about the relationship between any of the model's parameters. The model can be used whether the software was developed by a first or second party. The case where future costs are discounted is also considered.",10.1109/TSE.1983.236868,IEEE Transactions on Software Engineering,"Software testing,System testing,Cost function,Programming,Data processing,Predictive models,Sufficient conditions,Project management,Software reliability,Computer industry","B. W. Boehm, ""Software engineering"", IEEE Trans. Comput., vol. C-25, no. 12, pp. 1226-1241, Dec. 1976.||E. B. Daly, ""Management of software development"", IEEE Trans. Software Eng., vol. SE-3, pp. 229-242, May 1977.||Z. Jelinski and P. Moranda, ""Software reliability research"" in Statistical Computer Performance Evaluation, New York:Academic, pp. 465-484, 1972.||P. Kubat and H. Koch, On estimation of number of errors and reliability of software systems, Univ. Rochester, Graduate School of Management, May 1980.||M. Lipow, ""Prediction of software failures"", J. Syst. Software, vol. 1, no. 1, pp. 71-75, 1979.||K. Okumoto and A. Goel, ""Optimum release-time for software systems based on reliability and cost criteria"", J. Syst. Software, vol. 1, no. 4, pp. 315-318, 1980.||",Optimal Release Time of Computer Software
"P.B. Hansen&&Department of Computer Science, University of Southern California, Los Angeles, CA, USA|J. Staunstrup&&unknow|","This paper presents a constructive approach to the problem of specifying, implementing, and verifying operations that will give concurrent processes exclusive access to a resource. The method eliminates the need for auxiliary variables and establishes the correctness of a whole class of solutions to the same problem. The solutions are derived directly from the specifications using a language construct called guarded regions. Several new solutions to well-known exclusion problems are presented.",10.1109/TSE.1978.233856,IEEE Transactions on Software Engineering,"Specification languages,Delay,Programming profession,Sufficient conditions,Computer science","P. Brinch Hansen, ""Structured multiprogramming"", Commun. Ass. Comput. Mach., vol. 15, pp. 574-578, July 1972.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, July 1973.||P. Brinch Hansen, ""The solo operating system"", Software–Practice and Experience, vol. 6, pp. 141-205, Apr.-June 1976.||R. H. Campbell and A. N. Haberman, The specification of process synchronization by path expressions, England, Newcastle upon Tyne:Comput. Lab., Univ., Jan. 1974.||E. W. Dijkstra, ""Hierarchical ordering of sequential processes"", Acta lnformatica, vol. 1, pp. 115-138, 1971.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||A. N. Habermann, ""Synchronization of communicating processes"", Commun. Ass. Comput. Mach., vol. 15, pp. 171-176, Mar. 1972.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-583, Oct. 1969.||C. A. R. Hoare, ""Towards a theory of parallel programming"" in Operating Systems Techniques, New York:Academic, 1972.||S. Owicki and D. Gries, ""Verifying properties of parallel programs"", Commun. Ass. Comput. Mach., vol. 19, pp. 279-285, May 1976.||P. Gilbert and W. J. Chandler, ""Interface between communicating parallel processes"", Commun. Ass. Comput. Mach., vol. 15, pp. 427-437, June 1972.||J. Staunstrup, Specification verification and implementation of concurrent programs, CA, Los Angeles:Dept. Comput. Sci., Univ. Southern California, May 1978.||",Specification and Implementation of Mutual Exclusion
"A.C. Davies&&Department of Electrical and Electronic Engineering, City University, London, UK|","A recently proposed analogy between discrete systems and flowcharts is discussed. It is pointed out that the analog of Kirchhoff's voltage law does not apply to flowcharts, and that the analogy is likely to be of limited value as an aid to program analysis.",10.1109/TSE.1980.234496,IEEE Transactions on Software Engineering,"Flowcharts,Resistors,Kirchhoff's Law,Testing,Voltage,Probability","U. R. Kodres, ""Discrete systems and flowcharts"", IEEE Trans. Software Eng., vol. SE-4, pp. 521-525, Nov. 1978.||Z. Manna and R. Waldinger, ""The logic of computer programming"", IEEE Trans. Software Eng., vol. SE-4, pp. 199-229, May 1978.||C. A. Desoer and E. S. Kuh, Basic Circuit Theory, New York:McGraw-Hill, 1969.||P. Penfileld, R. Spence and S. Duinker, Tellegen's Theorem and Electrical Networks, MA, Cambridge:MIT Press, 1970.||U. R. Kodres, ""Analysis of real-time systems by data flowgraphs"", IEEE Trans. Software Eng., vol. SE-4, pp. 169-178, May 1978.||",The Analogy Between Electrical Networks and Flowcharts
"N. Dershowitz&&Stanford Artificial Intelligence Laboratory, Department of Computer Science, University of Stanford, Stanford, CA, USA|Z. Manna&&Stanford Artificial Intelligence Laboratory, Department of Computer Science, University of Stanford, Stanford, CA, USA|","An attempt is made to formulate techniques of program modification, whereby a given program that achieves one goal can be transformed into a new program that uses the same principles to achieve a different goal. For example, a program that uses the binary search paradigm to calculate the square root of a number may be modified to divide two numbers in a similar manner, or vice versa. The essence of the approach is to find an analogy between the specifications of the given and desired programs, and then to transform the given program accordingly.",10.1109/TSE.1977.231170,IEEE Transactions on Software Engineering,"Debugging,Concrete,Programming profession,Recycling,Automatic programming,Contracts,Computer languages,Mathematics,Artificial intelligence,Computer science","N. Dershowitz and Z. Manna, Inference rules for program annotation, CA, Stanford:Dep. Comput. Sci. Rep., Stanford Univ., Sept. 1977.||N. Detshowitz and Z. Manna, ""On automating structured programming"", Proc. Colloques IRIA on Proving and Improving Programs, pp. 167-193, 1975-July.||R. E. Fikes, P. E. Hart and N. J. Nilsson, ""Learning and executing generalized robot plans"", Artificial Intelligence, vol. 3, no. 4, pp. 251-288, 1972.||S. L. Gerhart, ""Knowledge about programs: A model and case study"", Proc. Int. Conf Reliable Software, pp. 88-95, 1975-Apr.||S. M. German and B. Wegbreit, ""A synthesizer of inductive assertations"", IEEE Trans. Software Eng., vol. SE-1, pp. 68-75, Mar. 1975.||S. M. Katz and Z. Manna, ""Logical analysis of programs"", Commun. Ass. Comput. Mach., vol. 19, pp. 188-206, Apr. 1976.||R. E. Kling, Reasoning by analogy with applications to heuristic problem solving: A case study, Aug. 1971.||Z. Manna and R. J. Waldinger, ""Knowledge and reasoning in program synthesis"", Artificial Intelligence, vol. 6, no. 2, pp. 175-208, 1975.||G. J. Sussman, A computational model of skill acquisition.||A Computer Model of Skill Acquisition, New York:American Elsevier, 1975.||J. H. Wensley, ""A class of nonanalytical iterative processes"", Computer J., vol. I, pp. 163-167, Jan. 1959.||A QLISP Reference Manual, Mar. 1976.||",The Evolution of Programs: Automatic Program Modification
"G.V. Bochmann&&Département d'I.R.O., Université de Montreal, Montreal, QUE, Canada|T. Joachim&&Centre National du Traitement de l'Information, France|","This paper describes experience with an implementation of the X25 communication protocols for accessing public data networks. Ihe implementation effort is characterized by: 1) the development of a formalized protocol specification on which all further implementation work is based, and 2) the use of Concurrent Pascal as the implementation language. The main features of the formalized protocol specification are given, and a method for deriving a protocol implementation based on parallel processes, monitors, and classes is explained. The overall structure of the system and the step-wise refinements leading to the complete implementation are discussed. Some comments on the possible implementation on multiple microprocessors are also given.",10.1109/TSE.1979.230181,IEEE Transactions on Software Engineering,"Access protocols,Microprocessors,Circuits,Real time systems,Programming,Natural languages,Physical layer","CCITT Recommendation X.25, 1976.||T. Joachim, Implantation du protocole standard X.25 a partir d'un modèle de formalisation et de mécanismes abstraits de programmation, Dec. 1977.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, 1975.||G. V. Bochmann and J. Gecsei, ""A unified model for the specification and verification of protocols"", Proc. IFIP Congr. 1977, pp. 229-234.||G. V. Bochmann and R. J. Chung, ""A formalized description of HDC classes of procedures"", Proc. IEEE Nat. Telecommun. Conf., pp. 03a 2-1-2-11, 1977.||H. A. Schmid, ""On the efficient implementation of conditional critical regions and the construction of monitors"", Acta Inform., vol. 6, pp. 227-249, 1976.||P. Desjardins, Un pilote pour controleur de communication dans Solo-Sigma, Canada, P.Q., Montreal:I.R.O., Univ. Montreal.||A. M. Rybczynski, ""Collection of questions and answers on X.25"", working document, 1977.||G. V. Bochmann, Specification and verification of computer communication protocols, Canada, P.Q., Montreal:I.R.O., Univ. Montreal, 1978.||D. Belsnes, ""X.25 DTE implement in Simula"", Proc. Eurocomp 78.||""IFIP Working Group 6.1"", Proposal for an intemetwork end-to‑end transport protocol.||Proc. Comput. Network Protocols Symp., 1978.||J. K. Cavers, ""Implementation of X. 25 on a multiple microprocessor system"", Proc. Int. Commun. Conf., 1978.||D. L. A. Barber, T. Kalin and C. Solomonides, ""An implementation of the X.25 interface in a datagram network"", Proc. Comput. Network Protocols Symp., pp. e6-1-e6-5, 1978.||",Development and Structure of an X.25 Implementation
"P.R. McMullin&&Applied Physics Laboratory, Johns Hopkins University, Laurel, MD, USA|J.D. Gannon&&Department of Computer Science, University of Maryland, College Park, MD, USA|","This paper describes our experience specifying, implementing, and validating a record-oriented text editor similar to one discussed in [7]. Algebraic axioms served as the specification notation; and the implementation was tested with a compiler-based system that uses the axioms to test implementations with a finite collection of test cases. Formal specifications were sometimes difficult to produce, but helped reveal errors during unit testing. Thorough exercising of the implementations by the specifications resulted in few errors persisting until integration.",10.1109/TSE.1983.236869,IEEE Transactions on Software Engineering,"Formal specifications,Computer aided software engineering,System testing,User interfaces,Computer science,Production,Information retrieval,Displays,Programming profession,Contracts","J. C. Cleaveland, ""Mathematical specifications"", SIGPLAN Notices, vol. 15, pp. 31-42, Dec. 1980.||S. L. Gerhart and D. S. Wile, ""Preliminary report on the delta experiment: Specification and verification of a multiple-user file updating module"", Proc. Specifications of Reliable Software, pp. 198-211, 1979-Apr.||J. Guttag and J. J. Horning, ""Formal specification as a design tool"", Proc. 7th ACM Principles ofProgramming Languages, pp. 251-261, 1981-Jan.||J. D. Gannon, P. R. McMullin and R. G. Hamlet, ""Data abstraction implementation specification and testing"", TOPLAS, vol. 3, pp. 211-223, July 1981.||R. G. Hamlet, ""Testing program with finite sets of data"", Comput. J., vol. 20, pp. 232-237, Aug. 1977.||W. E. Howden, ""Completeness criteria for testing elementary program functions"", Proc. Sthlnt. Conf. Software Eng., pp. 235-243, 1981-Mar.||B. W. Kernighan and P. J. Plauger, Software Tools in Pascal, MA, Reading:Addison-Wesley, 1981.||P. R. McMullin, DAISTS: A system for using specifications to test implementations, 1982.||",Combining Testing with Formal Specifications: A Case Study
"N. Francez&&Department of Mathematics, Division of Computer Science, Tel-Aviv University, Ramat-Aviv, Israel|","A parallel program, Dijkstra's ""on-the-fly"" garbage collector, is proved correct using analysis along the lines suggested by Francez and Pnueli for cyclic programs. The method is briefly reviewed, and the proof is compared to another proof by D. Gries, based on a method by S. Owickd. The differences between the two approaches are discussed.",10.1109/TSE.1978.233857,IEEE Transactions on Software Engineering,"Mathematics,Computer science,Counting circuits","E. W. Dijkstra, ""On the fly garbage collection–An exercise in cooperation"", WorkingMaterial for the NATO International Summer School on Language Hierarchies and Interfaces, 1975.||Lecture Notes in Computer Science No. 46, New York:Springer, 1976.||N. Francez and A. Pnueli, ""A proof method for cyclic (sequential and concurrent) programs"", Proc. Int. Conf Parallel Processing, 1976-Aug.||Acta Inform., vol. 9, pp. 133-157, Apr. 1978.||N. Francez, The logical analysis of cyclic programs, 1976.||D. Gries, ""An exercise in proving parallel programs correct"", Commun. Ass. Comput. Mach., vol. 20, pp. 921-930, Dec. 1977.||R. W. Floyd, ""Assigning meaning to programs"" in Mathematical Aspects of Computer Science, RI, Providence:American Mathematical Society, 1967.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||R. M. Burstall, ""Program proving as hand simulation with a little induction"" in Information Processing 74, The Netherlands, Holland:Edinhoven, 1974.||J. Schwarz, Event based reasoning–A system for proving correct termination of program, 1975.||S. Owicki, Axiomatic proof techniques for parallel programs, pp. 75-251, 1975.||S. Owicki and D. Gries, ""An axiomatic proof technique for parallel programs I"", Acta Inform., vol. 6, pp. 319-340, 1976.||W. de Roever, Dijkstra's predicate transformers nondeterminism recursion and termination, Rennes Univ., 1976.||J. W. de Bakker and L. G. L. T. Meertens, ""On the completeness of the inductive assertions method"", J. Comput. Syst. Sci., vol. 11, pp. 3 13-357, 1975.||F. Kroöer, A uniform logical basis for the description specification and correctness proof techniques of programs, The Technical Univ. of Munich, 1976.||E. A. Ashcroft, Intermittent assertion proof in LUCID, 1976.||E. A. Ashcroft and W. Wadge, ""Program proving without tears"" in Proving and Improving Programs, Colloquium, IRIA, pp. 99-114, 1975.||Z. Manna and R. Waldinger, Is 'sometime' sometimes better than 'always'? Intermittent assertions in proving program correctness, June 1976.||A. Pnueli, ""The temporal logic of programs"", Proc. FOCS 1977, 1977-Oct.||A. Pnueli, ""A temporal semantics for concurrent programs"" in Comput. Sci., Univ. of Pennsylvania, Nov. 1977.||",An Application of a Method for Analysis of Cyclic Prog rams
"P. Bourret&&ONERA CERT/DERI, Toulouse, France|P. Cros&&ONERA CERT/DERI, Toulouse, France|",This cofrespondence presents two ldnds of errors which occur when data supplied by software monitors are gathered. Various ways of assessing their effects are suggested.,10.1109/TSE.1980.234497,IEEE Transactions on Software Engineering,"Error correction,Operating systems,Software measurement,Distortion measurement,Algorithms,Time measurement,Kernel,Clocks,Delay effects,Hardware","L. Boi, Evaluation des systèmes d'exploitation et des ordinateurs par les techniques de mesure, France, Toulouse:Cepadues.||L. Rose and B. Gaudeul, Compte-rendu de la campagne de mesures effectèau Centre Informatique National de l'ARRCO, France, Rocquencourt:C.T.I., Apr. 1978.||L. Boi, P. Cros, J. P. Drucbert, J.-Y. Rousselot, P. Bourret and R. Trepos, ""A performance evaluation of the CII SIRIS 8 operating system"", Proc. 2nd Int. Workshop Modelling and Performance Evaluation Comput. Syst., 1976-Oct.||M. Badel and A. V. Y. Shum, ""Accuracy of an approximate computer system model"", Proc. 2nd Int. Workshop Modelling and Performance Evaluation Comput. Syst., 1976-Oct.||G. Boulaye, B. Decouty, G. Michel, P. Rolin and G. Wagner, ""A computer measurement and control system"", Proc. 3rd Int. Symp. Modelling and Performance Evaluation Comput. Syst., 1977-Oct.||B. Gaudeul, ""Mesures réalisées à l'aide d'un moniteur de rendement"", Proc. Mesures et Évaluation des Systèmes Informatiques, 1974-Oct.||",Presentation and Correction of Errors in Operating System Measurements
"M.R. Paige&&Analytic Sciences Corporation, Reading, MA, USA|","In recent years, applications of graph theory to computer software have given fruitful results and attracted more and more attention. A program graph is a graph structural model of a program exhibiting the flow relation or connection among the elements (statements) in the program.",10.1109/TSE.1977.231171,IEEE Transactions on Software Engineering,"Graph theory,Programming profession,Application software,Open loop systems,Computer science,Logic testing,Software testing,System testing","R. M. Karp, ""A note on the application of graph theory to digital computer programming"", Inform. Contr., vol. 3, pp. 179-190, 1960.||M. R. Paige, ""Structural techniques of program validation"", Dig. 1974 COMPCON, pp. 161-164, 1974-Feb.||M. R. Paige, ""Automated generation of software testcases"", Proc. 1974 European Computing Congr., pp. 1-12, 1974-May.||J. R. Brown, ""Automated software quality assurance—A case study of three systems"" in Program Test Methods, NJ, Englewood Cliffs:Prentice-Hall, 1973.||C. V. Ramamoorthy, ""Design and construction of an automated software evaluation system"", Proc. 1973 IEEE Symp. Computer Software Reliability, pp. 28-37.||L. G. Stucki, ""Automatic generation of self-metric software"", Proc. 1973 IEEE Symp. Computer Software Reliability, pp. 94-100.||K. W. Krause, ""Optional software test planning through automated network analysis"", Proc. 1973 IEEE Symp. Computer puter Software Reliability, pp. 18-22.||R. M. Karp and R. E. Miller, ""Properties of a model for parallel computations: Determinacy termination queueing"", SIAM J. Appl. Math., vol. 14, pp. 1390-1411, Nov. 1966.||G. Estrin, ""SNUPER COMPUTER—A computer in instrumentation automation"", AFIPS Spring Joint Computer Conf., 1967.||E. C. Russell and G. Estrin, ""Measurement based automatic analysis of FORTRAN programs"", AFIPS Spring Joint Computer Conf., 1969.||M. R. Paige and G. Benson, ""The use of software probes in testing Fortran programs"", Comput., pp. 40-47, July 1974.||F. E. Allen and J. Cocke, ""Theoretical studies of optimization"", Proc. Symp. Compiler Optimization, pp. 1-24, 1970-July.||M. Hecht and J. D. Ullman, ""Flowgraph reducibility"", SIAM J. Appl. Math., vol. 1, pp. 188-202, June 1972.||S. C. Kleene, ""Realization of events in nerve nets and finite automata"" in Automata Studies, NJ, Princeton:Princeton University Press, pp. 3-42, 1956.||M. R. Paige, ""Program graphs an algebra and their implication for programming"", IEEE Trans. Software Eng., vol. SE-1, pp. 286-291, Sept. 1975.||",On Partitioning Program Graphs
"K.M. Chandy&&Department of Computer Sciences, University of Technology, Austin, TX, USA|J. Misra&&Department of Computer Sciences, University of Technology, Austin, TX, USA|","The problem of system simulation is typically solved in a sequential manner due to the wide and intensive sharing of variables by all parts of the system. We propose a distributed solution where processes communicate only through messages with their neighbors; there are no shared variables and there is no central process for message routing or process scheduling. Deadlock is avoided in this system despite the absence of global control. Each process in the solution requires only a limited amount of memory. The correctness of a distributed system is proven by proving the correctness of each of its component processes and then using inductive arguments. The proposed solution has been empirically found to be efficient in preliminary studies. The paper presents formal, detailed proofs of correctness.",10.1109/TSE.1979.230182,IEEE Transactions on Software Engineering,"Computer aided software engineering,Centralized control,Process control,Protocols,Logic,Routing,System recovery,Control systems,Distributed control,Costs","K. M. Chandy, V. Holmes and J. Misra, Distributed simulation of networks.||Computer Networks.||K. M. Chandy and J. Misra, A non-trivial example of concurrent processing: Distributed simulation.||Proc. COMPSAC, 1978-Nov.-16-18.||J. B. Dennis, First version of a data flow procedure language, MIT, Nov. 1973.||J. B. Dennis, ""Packet communication architecture"", Proc. 1975 Sagamore Comput. Conf. Parallel Processing, pp. 224-229, 1975-Aug.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, 1972.||E. W. Dijkstra, ""On-the-fly garbage collection: An exercise in cooperation"", Working Material NATO Summer School on Language Hierarchies and Interfaces, 1975.||E. W. Dijkstra, ""Self-stabilizing systems in spite of distributed control"", Commun. Ass. Comput. Mach., vol. 17, pp. 643-644, Nov. 1974.||A. N. Habermann, ""Synchronization of communicating processes"", Commun. Ass. Comput. Mach., vol. 15, pp. 171-176, 1972.||C. A. R. Hoare, ""Communicating sequential processes"", Commun. Ass. Comput. Mach., vol. 21, no. 8, Aug. 1978.||||S. S. Owicki and D. Gries, ""An axiomatic proof technique for parallel programs"", Acta Informatica, vol. 6, no. 3, pp. 319-340, 1976.||S. S. Patil, Coordination of asynchronous events, May 1970.||M. Seethalakshmi, Performance analysis of distributed simulation, Univ. Texas at Austin.||N. Wirth, ""Program development by stepwise refinement"", Commun. Ass. Comput. Mach., vol. 14, pp. 221-227, 1971.||V. Holmes, 1978.||J. D. Peacock, J. W. Wong and E. Manning, ""Distributed simulation using a network of microcomputers"", Computer Networks.||K. M. Chandy and J. Misra.||",Distributed Simulation: A Case Study in Design and Verification of Distributed Programs
"S.J. Zeil&&Department of Computer and Information Science, University of Massachusetts, Amherst, MA, USA|","Many testing methods require the selection of a set of paths on which tests are to be conducted. Errors in arithmetic expressions within program statements can be represented as perturbing functions added to the correct expression. It is then possible to derive the set of errors in a chosen functional class which cannot possibly be detected using a given test path. For example, test paths which pass through an assignment statement ""X := f(Y)"" are incapable of revealing if the expression ""X -f( Y)"" has been added to later statements. In general, there are an infinite number of such undetectable error perturbations for any test path. However, when the chosen functional class of error expressions is a vector space, a finite characterization of all undetectable expressions can be found for one test path, or for combined testing along several paths. An analysis of the undetected perturbations for sequential programs operating on integers and real numbers is presented which permits the detection of multinomial error terms. The reduction of the space of (potential undetected errors is proposed as a criterion for test path selection.",10.1109/TSE.1983.236870,IEEE Transactions on Software Engineering,"Testing,Computer errors,Error correction,Arithmetic,Military computing,Information science,Computer languages,Design methodology,Sequential analysis","L. A. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept. 1976.||L. A. Clarke, J. Hassell and D. J. Richardson, ""A close look at domain testing"", IEEE Trans. Software Eng., vol. SE-8, pp. 380-390, July 1982.||E. I. Cohen, A finite domain-testing strategy for computer program testing, 1978.||G. Dahlquist and A. Bjork, Numerical Methods, NJ, Englewood Cliffs:Prentice-Hall, 1974.||R. A. De Millo, F. G. Sayward and R. J. Lipton, ""Hints on test data selection: Help for the practicing programmer"", IEEE Computer, vol. 11, pp. 34-41, Apr. 1978.||R. A. De Millo, F. G. Sayward and R. J. Lipton, Program mutation: A new approach to program testing, 1979.||J. L. Elshoff, ""An analysis of some commercial PL/I programs"", IEEE Trans Software Eng., vol. SE-2, pp. 113-120, June 1976.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, pp. 156-173, June 1975.||J. Hassell, L. A. Clarke and D. J. Richardson, A close look at domain testing, 1980.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 280-215, Sept. 1976.||W. E. Howden, ""Algebraic program testing"", Acta Informatica, vol. 10, pp. 53-66, 1978.||W. E. Howden, ""An evaluation of the effectiveness of symbolic testing"", Software-Practice and Experience, vol. 8, pp. 381-397, 1978.||D. E. Knuth, ""An empirical study of FORTRAN programs"", Software–Practice and Experience, vol. 1, pp. 105-133, Apr.-June 1971.||C. V. Ramamoorthy, S. F. Ho and W. T. Chen, ""On the automated generation of program test data"", IEEE Trans. Software Eng., vol. SE-2, pp. 293-300, Dec. 1976.||L. J. White, F. C. Teng, H. Kuo and D. Coleman, An error analysis of the domain testing strategy, 1978.||L. J. White and E. 1. Cohen, ""A domain strategy for computer program testing"", IEEE Trans. Software Eng., vol. SE-6, pp. 247-257, May 1980.||S. J. Zeil and L. J. White, ""Sufficient test sets for path analysis testing strategies"", Proc. 5th Int. Conf. Software Eng. IEEE Comput. Soc., pp. 184-191, 1981.||S. J. Zeil, Selecting sufficient sets of test paths for program testing, 1981.||",Testing for Perturbations of Program Statements
"S. Katz&&IBM Israel Scientific Center, Haifa, Israel|","Optimizing a computer program is defined as improving the execution time without disturbing the correctness. We show how to use invariants from a proof of correctness in order to change the statement in and around the program's loops. This approach is shown to systematize existing optimization methods, and to sometimes allow stronger optimizations than are possible under the standard transformation approach.",10.1109/TSE.1978.233858,IEEE Transactions on Software Engineering,"Optimization methods,Program processors,Optimizing compilers,Testing,Cities and towns,Registers,Flowcharts,Law,Legal factors","F. E. Allen, ""Program optimization"" in Annu. Rev. Automat. Programming, New York:Pergamon, vol. 5, 1969.||F. E. Allen, ""A basis for program optimization"", Proc. IFIPS, vol. 1, 1971-Aug.||F. E. Allen and J. Cocke, ""A catalogue of optimizing transformations"" in Design and Optimization of Compilers, NJ, Englewood Cliffs:Prentice-Hall, pp. 1-30, 1972.||R. Burstall and J. Darlington, ""A transformation system for developing recursive programs"", J. Ass. Comput. Mach., vol. 24, pp. 44-67, Jan. 1977.||T. E. Cheatham and B. Wegbreit, ""A laboratory for the study of automating programming"", Poc. 1972 Spnng Joint Computer Conf, pp. 11-20.||J. Darlington and R. Burstall, ""A system which automatically improves programs"", Proc. 3rd Int. Conf Artificial Intelligence, pp. 479-485, 1973.||N. Dershowitz and Z. Manna, Inference rules for program annotation, Stanford Al Lab., Oct. 1977.||B. Elspas, The semiautomatic generation of inductive assertions for proving program correctness, July 1974.||S. Gerhart, ""Correctness-preserving program transformations"", Proc. 2nd ACM Symp. Principles of Programming Languages, pp. 54-65, 1975-Jan.||S. Katz, Logical analysis and invariants of programs, Aug. 1976.||S. Katz and Z. Manna, ""A heuristic approach to program verification"", Proc. 3rd Int. Conf. Artificial Intelligence, pp. 500-512, 1973.||S. Katz and Z. Manna, ""ogical analysis of programs"", Commun. Ass. Comput. Mach., vol. 19, pp. 188-206, Apr. 1976.||D. Knuth, ""Structured programming with GøTø statements"", Ass. Comput. Mach. Computing Surveys, vol. 6, Dec. 1974.||Z. Manna, ""The correctness of programs"", J Comput. Syst. ScL, vol. 3, pp. 119-127, May 1969.||B. Wegbreit, ""The synthesis of loop predicates"", Commun. Ass. Comput. Mach, vol. 17, pp. 102-112, Feb. 1974.||N. Wirth, Systematic Programming, NJ, Englewood Cliffs:Prentice-Hall, 1973.||",Program Optimization Using Invariants
"Y.M. Babad&&Arthur Andersen and Company, Chicago, IL, USA|J.A. Hoffer&&Department of Managerial Studies, Case Western Reserve University, Cleveland, OH, USA|","The literature on physical database design in general, and on file segmentation in particular, typically ignores any consideration of data security and the cost to enforce it. If records can be physically designed so that all data elements in a given record type have identical security restrictions for a given user, then data element level security enforcement can be transformed into the less costly file level security enforcement for that user and rie. Similarly, if all record types have identical security restrictions, file based security might be sufficient. This paper extends an earlier model for file segmentation to include security considerations. The extended model embeds the security measures into the logical file structure and exploits a four category taxonomy of security restriction types. The model is used to generalize the interaction between element level selective security and physical database design.",10.1109/TSE.1980.230488,IEEE Transactions on Software Engineering,"Data security,Databases,Taxonomy,Memory,Protection,Costs,Current measurement,Companies","J. M. Babad, ""A record and file partitioning model"", Commun. Ass. Comput. Mach., vol. 20, pp. 22-31, Jan. 1977.||J. M. Babad and J. A. Hoffer, Security controls in distributed data bases, 1979-Feb.||J. Banerjee, R. I. Baum and D. K. Hsiao, ""Concepts and capabilities of a database computer"", Ass. Comput. Mach. TODS, vol. 3, pp. 347-384, Dec. 1978.||D. D. Chamberline, ""Views authorization and locking in a relational data base system"", Proc. Nat. Comput. Conf., pp. 425-430, 1975.||Data Base Task Group Report, May 1971.||R. W. Conway, W. L. Maxwell and H. L. Morgan, ""On the implementation of security measures in information systems"", Commun. Ass. Comput. Mach., vol. 15, pp. 211-220, Apr. 1972.||R. W. Conway, W. L. Maxwell and H. L. Morgan, ""Selective security capabilities in ASAP–A file management system"", Proc. AFIPS SJCC, pp. 1181-1185, 1972.||R. Conway and D. Strip, ""Selective partial access to a database"", Proc. ACM Nat. Conf., pp. 85-89, 1976.||R. A. Duhne, Optimal design of a generalized file organization, 1976.||M. J. Eisner and D. G. Severance, ""Mathematical techniques for efficient record segmentation in large shared data bases"", J. Ass. Comput. Mach., vol. 23, pp. 619-635, Oct. 1976.||E. B. Fernandez, ""Authorization model for a shared data base"", Proc. SIGMOD Conf., pp. 23-31, 1975.||E. B. Fernandez and C. Wood, ""The relationship between operating system and database system security: A survey"", Proc. IEEE COMPSAC, pp. 453-462, 1979.||H. R. Hartson and D. K. Hsaio, ""Full protection specifications in the semantic model for database protection languages"", Proc. ACM Nat. Conf., pp. 90-95, 1976.||J. A. Hoffer, ""An integer programming formulation of computer data base design problems"", Inform. Sci., vol. 11, pp. 29-48, July 1976.||J. A. Hoffer and D. G. Severance, ""The use of cluster analysis in physical data base design"", Proc. 1st Very Large Data Base Conf., pp. 69-86, 1975.||S. R. Kennedy, Mathematical models of computer file organization, June 1973.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 1, 1969.||S. T. March and D. G. Severance, ""The determination of efficient record segmentations and blocking factors for large shared databases"", Ass. Comput. Mach. TODS, vol. 2, pp. 279-296, Sept. 1977.||G. J. Popek, ""Protection structures"", Comput., vol. 7, pp. 22-23, June 1974.||R. J. Saltzer, ""Protection and control of information sharing in MULTICS"", Commun. Ass. Comput Mach., vol. 17, pp. 388-402, July 1974.||M. Scholnick, ""A clustering algorithm for hierarchical structures"", Ass. Comput. Mach. TODS, vol. 2, pp. 27-44, Mar. 1977.||M. Stonebraker, ""Implementation of integrity constraints and views by query modification"", Proc. SIGMOD Conf., pp. 65-78, 1975.||M. Stonebraker and P. Rubinstein, ""The INGRES protection system"", Proc. ACMNat. Conf., pp. 80-84, 1976.||M. Stonebraker, ""The design and implementation of INGRES"", Ass. Comput. Mach. TODS, vol. 1, pp. 189-222, Sept. 1976.||F. G. Woodward and L. J. Hoffman, ""Worst-case costs for dynamic data element security decisions"", Proc. ACM Annu. Conf., pp. 539-544, 1974.||",Data Element Security and Its Effects on File Segmentation
"J.-L. Baer&&Department of Computer Science, University of Washington, Seattle, WA, USA|C.S. Ellis&&Department of Computer Science, University of Washington, Seattle, WA, USA|","The problem of designing compilers for a multiprocessing environment is approached. We show that by modeling an existing sequential compiler, we gain an understanding of the modifications necessary to transform the sequential structure into a pipeline of processes. The pipelined compiler is then evaluated through measurements and simulation. Properties of the model, a generalized Petri Net, are also discussed.",10.1109/TSE.1977.231172,IEEE Transactions on Software Engineering,"Parallel processing,Computational modeling,Pipelines,Petri nets,Design methodology,Computer architecture,High level languages,Proposals,Production,Springs","T. Agerwala, 1975.||J.-L Baer, ""Theoretical aspects of multiprocessing"", Computer Surveys, vol. 5, pp. 31-80, Mar. 1973.||J.-L. Baer, ""Modeling for parallel computation: A case study"", Proc. of the 1973 Sagamore Comput. Conf Parallel Processing, pp. 13-22, 1973.||A. J. Bernstein, ""Analysis of programs for parallel processing"", IEEE Trans. Electron. Comput., vol. EC-15, pp. 757-762, Oct. 1966.||M. E. Conway, ""Design of a separable transition-diagram compiler"", Commun. Ass. Comput. Mach., vol. 6, pp. 396-408, July 1963.||J. B. Dennis, ""Modular asynchronous control structures for a high-performance processor"", Rec. Project MAC Conf Concurrent System and Parallel Computation, pp. 55-80, 1970.||F. L. Deremer, ""Simple LR(k) grammars"", Commun. Ass. Comput. Mach., vol. 14, pp. 453-460, 1971.||M. K. Donnegan and S. Katzhe, ""Lexical analysis and parsing techniques for a vector machine"", Proc. Conf Program. Language and Compilers for Parallel and Vector Machines SIGPLAN Notices, vol. 10, pp. 138-145, 1975-Mar.||C. A. Ellis, ""Parallel compiling techniques"", Proc. ACM 26th Nat. Conf, pp. 508-519, 1971.||M. J. Gonzales and C. V. Ramamoorthy, ""Program suitability for parallel processing"", IEEE Trans. Comput., vol. C-20, pp. 647-654, June 1971.||K. P. Gostelow, V. G. Cerf, G. Estrin and S. A. Volansky, ""Proper termination of flow of control in programs involving concurrent processes"", Proc. ACM Annu. Conf., vol. 2, pp. 742-754, 1972.||M. Hack, ""The recursive equivalence of the reachability problem and the liveness problem for Petri Nets and vector addition systems"", Proc. 15th IEEE SWAT Symp., pp. 156-164, 1974.||H. Krohn, ""A parallel approach to code generation for Fortran like compilers"", Proc. Conf Program. Language and Compilers for Parallel and Vector Machines SIGPLAN Notices, vol. 10, pp. 146-152, 1975-Mar.||D. J. Kuck, Y. Muraoka and S. C. Chen, ""On the number of operations simultaneously executable in FORTRAN like programs and their resulting speed up"", IEEE Trans. Comput., vol. C-21, pp. 1293-1309, Dec. 1972.||G. Leach, XPL/S a systems implementation language for the Xerox Sigma computers, 1974.||N. Lincoln, ""Parallel programming techniques for compilers"", SIGPLAN Notices, vol. 5, Oct. 1970.||W. M. McKeeman, J. J. Horning and D. B. Wortman, A Compiler Generator, NJ, Englewood Cliffs:Prentice-Hall, 1970.||J. D. Noe and G. Nutt, ""Macro E-nets for representation of parallel systems"", IEEE Trans. Comput., vol. C-22, pp. 718-727, Aug. 1973.||s. Patil and J. Dennis, ""The description and realization of digital systems"", Proc. COMPCON 72 Dig., pp. 223-227, 1972.||J. L. Peterson and T. Bredt, ""A comparison of models of parallel computation"", Proc. IFIP Congr. 1974, pp. 466-470, 1974-Aug.||C. W. Rose, ""LOGOS and the software engineer"", Proc. Fall Joint Comput. Conf., vol. 41, pp. 311-323, 1972.||M. Zosel, ""A parallel approach to compilation"", Conf. Rec. ACM Symp. Principles of Programming Languages, pp. 59-70, 1973-Oct.||","Model, Design, and Evaluation of a Compiler for a Parallel Processing Environment"
"W. Polak&&Artificial Intelligence Laboratory, University of Stanford, Stanford, CA, USA|",This paper describes in some detail the computer-aided proof of a permutation program obtained using the Stanford Pascal verifier. We emphasize the systematic way in which a proof can be developed from an intuitive understanding of the program. The paper fillustrates the current state of the art in automatic program verification.,10.1109/TSE.1979.230183,IEEE Transactions on Software Engineering,"Artificial intelligence,Lead","Stanford resolution theorem prover: A user manual, 1971.||F. W. von Henke and D. C. Luckham, Automatic program verification III: A methodology for verifying programs, Stanford Artificial Intelligence Lab., 1974.||C. A. R. Hoare, ""An axiomatic basis of computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||S. Igarashi, R. L. London and D. C. Luckham, ""Automatic program verification I: Logical basis and its implementation"", Acta Informatica, vol. 4, pp. 145-182, 1975.||D. E. Knuth, ""Mathematical analysis of algorithms"", Proc. 1971 IFIP Congr. Information Processing, 1972.||D. C. Luckham, J. J. Morales and J. F. Schreiber, Applications of theorem proving.||Stanford Verification Group Stanford Pascal Verifier User Manual, Mar. 1979.||N. Suzuki, ""Verifying programs by algebraic and logical reduction"", IEEE Int. Proc. Conf. Reliable Software, pp. 473-481, 1975.||",An Exercise in Automatic Program Verification
"J.W. Laski&&School of Engineering and Computer Science, Oakland University, Rochester, MI, USA|B. Korel&&School of Engineering and Computer Science, Oakland University, Rochester, MI, USA|",Some properties of a program data flow can be used to guide program testing. The presented approach aims to exercise use-definition chains that appear in the program. Two such data oriented testing strategies are proposed; the first involves checking liveness of every definition of a variable at the point(s) of its possible use; the second deals with liveness of vectors of variables treated as arguments to an instruction or program block. Reliability of these strategies is discussed with respect to a program containing an error.,10.1109/TSE.1983.236871,IEEE Transactions on Software Engineering,"Testing,Computer science,Data analysis,Information analysis,Runtime,Instruments,Data engineering,Reliability engineering,Control systems","W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-214, Sept. 1976.||W. E. Howden, Symbolic testing-design techniques costs and effectiveness, DC, Washington:Nat. Bureau Standards, Dep. Commerce, May 1977.||C. V. Ramamoorthy and S.B.F. Ho, ""Testing large software with automated software evaluation system"", IEEE Trans. Software Eng., vol. SE-1, pp. 46-58, Mar. 1975.||W. E. Howden, ""Methodology for the generation of test data"", IEEE Trans. Comput., vol. C-24, pp. 554-559, May 1975.||J. C. Huang, ""Detection of data flow anomaly through program instrumentation"", IEEE Trans. Software Eng., vol. SE-5, pp. 226-236, May 1979.||L. J. Osterweil and L. D. Fosdick, Data flow analysis as an aid in documentation assertion generation validation and error detection, Sept 1974.||L. D. Fosdick and L. J. Osterweil, ""Data flow analysis in software reliability"", Comput. Surveys, vol. 8, pp. 305-330, Sept. 1976.||J. W. Laski, ""A hierarchical approach to program debugging"", SIGPLAN Notices, vol. 15, pp. 77-85, Jan. 1980.||J. M. Barth, ""A practical interprocedural data flow analysis algorithm"", Commun. Ass. Comput. Mach., vol. 21, pp. 724-736, Sept 1978.||M. S. Hecht, ""A simple algorithm for global data flow analysis problems"", SIAM J. Comput., vol. 4, pp. 519-532, Dec. 1975.||K. Kennedy, ""A comparison of two algorithms for global data flow analysis"", SIAM J. Comput., vol. 5, pp. 158-180, Mar. 1976.||F. E. Allen, A Basis for Program Optimization Information Processing 71, North-Holland, pp. 385-390, 1972.||M. S. Hecht and J. Ullman, ""Characterizations of reducible flow graphs"", J. Ass. Comput. Mach., vol. 21, pp. 367-375, July 1974.||B. K. Rosen, ""High-level data flow analysis"", Commun. Ass. Comput. Mach., vol. 20, 10, pp. 712-724, Oct. 1977.||F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Ass. Comput Mach., vol. 19, pp. 137-147, Mar. 1976.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, pp. 156, 1975.||E. J. Weyuker and T. J. Ostrand, ""Theories of program testing and the application for revealing subdomains"", IEEE Trans. Software Eng., vol. SE-6, pp. 236-246, May 1980.||L. J. White and E. 1. Cohen, ""A domain strategy for computer program testing"", IEEE Trans. Software Eng., vol. SE-6, pp. 247-257, May 1980.||W. E. Howden, ""Functional program testing"", IEEE Trans. Software Eng., vol. SE-6, pp. 162-169, Mar. 1980.||J. W. Laski, The Semantic Analysis of Modular Programs (An Approach Towards the Software Reliability Studies), Warsaw:Polish Sci Pub. PWN, 1981.||R. G. Hamlet, ""Testing programs with finite sets of data"", Comput. J., vol. 20, no. 3, pp. 232-237, 1977.||S. L. Gerhart and L. Yelowitz, ""Observations of fallibility in applications of modem programming methodologies"", IEEE Trans Software Eng., vol. SE-3, pp. 195-207, Sept. 1976.||",A Data Flow Oriented Program Testing Strategy
"T.F. Gannon&&Sperry Univac Technical Research Center, Blue Bell, PA, USA|S.D. Shapiro&&Department of Electrical Engineering, Stevens Institute of Technology, Hoboken, NJ, USA|","A systematic method of providing software system fault recovery with maximal fault coverage subject to resource constraints of overall recovery cost and additional fault rate is presented. This method is based on a model for software systems which provides a measure of the fault coverage properties of the system in the presence of computer hardware faults. Techniques for system parameter measurements are given. An optimization problem results which is a doubly-constrained 0,1 Knapsack problem. Quantitative results are presented demonstrating the effectiveness of the approach.",10.1109/TSE.1978.233859,IEEE Transactions on Software Engineering,"Fault tolerant systems,Software systems,Software design,Hardware,Fault detection,Fault tolerance,System recovery,Costs,Software measurement,Control systems","J. Goldberg, P. G. Newmann and J. H. Wensley, Survey of fault-tolerant computing systems (revised), Stanford Res. Inst., Aug. 1972.||W. G. Boricius, W. C. Carter and P. R. Schneider, ""Reliability modeling techniques and trade-off studies for self-repairing computers"", IBM Res., Feb. 1969.||S. J. Bavuso, Impact of coverage on the reliability of a fault tolerant computer, Sept. 1975.||F. P. Mathew, Reliability modeling and architecture of ultra‑reliable fault tolerant digital computers, 1970.||J. J. Horning, H. C. Lauer, P. M. Melliar-Smith and B. Randell, ""A program structure for error detection and recovery"" in Operating Systems, New York:Springer-Verlag, pp. 171-187, 1974.||J. B. Goodenough, ""Exception handling: Issues and a proposed notation"", Commun. Ass. Comput. Mach., pp. 683-696, Dec. 1975.||I. D. Hill, ""Faults in functions in ALGOL and FORTRAN"", Computer, pp. 315-316, Mar. 1972.||J. D. Gannon and J. J. Horning, ""Language design for programming reliability"", IEEE Trans. Software Eng., vol. SE-1, pp. 179-191, June 1975.||B. Randell, ""System structure for software fault tolerance"", IEEE Trans. Software Eng., vol. SE-1, pp. 220-232, June 1975.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, 1973.||O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||T. L. Saaty, Optimization in Integers and Related External Problems, New York:McGraw-Hill, pp. 211-215, 1970.||P. C. Gilmore and R. E. Gomory, ""The theory and computations of knapsack functions"", Oper. Res., vol. 14, pp. 1045-1074, 1966.||J. F. Shapiro, ""Dynamic programming algorithms for the integer programming problem–I: The integer programming problem viewed as a knapsack type problem"", Oper. Res., vol. 16, pp. 103-121, 1968.||A. V. Cabot, ""An enumeration algorithm for knapsack problems"", Oper. Res., vol. 18, pp. 306-311, 1970.||J. Yormark, ""Accelerating Greenberg's method for the computation of knapsack functions"", Oper. Res., vol. 20, 1972.||I. H. Yetter, ""High speed fault simulation for Univac 1107 computer system"", Proc. Ass. Comput. Machines Nat. Conf., pp. 265-277, 1968.||F. P. Mathur, ""Reliability modeling analysis and prediction of ultrareliable fault tolerant digital systems"", IEEE Trans. Comput., vol. C-20, pp. 1376-1382, 1971.||S. V. Trufanov, ""Markov model of digital computer operations in the presence of faults"", Eng. Cybern., vol. 9, pp. 291-294, 1971.||P. Cox and K. F. Rankin, ""Reliability in large electronic data processing systems"", Automatic Telephone and Electric Company Ltd., vol. J21, pp. 162-177, 1965.||Z. Kohavi, ""16"" in Switching and Finite Automata Theory, New York:McGraw-Hill, pp. 541-576, 1970.||A. V. Aho and J. D. Ullman, The Theory ofParsing Translation and Compiling Volume 1: Parsing, NJ, Englewood Cliffs:Prentice-Hall, 1972.||B. W. Kerninghan and P. J. Plauger, The Elements of Programming Style, New York:McGraw-Hill, 1974.||D. L. Mills, Transient fault recovery in the distributed computer network, Oct. 1975.||T. F. Gannon, An optimal approach to fault tolerant software system design, Mar. 1977.||PDP 11/45 Processor Handbook, Digital Equipment Corporation, 1973.||A. V. Aho, J. E. Hopcroft and J. D. Ullman, The Design and Analysis of Computer Algorithms, New York:Addison-Wesley, 1974.||F. F. Seilers, M. Y. Hsiao and L. W. Bearnson, Error Detecting Logic for Digital Computers, New York:McGraw-Hill, 1968.||W. Feller, An Introduction to Probability Theory and Its Applications, New York:Wiley, vol. I, 1966.||A. Papoulis, Probability Random Variables and Stochastic Processes, New York:McGraw-Hill, 1965.||S. D. Shapiro, ""Random store and forward communications networks"" in Generalized Networks, Polytechnic Press, pp. 721-733, 1966.||J. G. Kemeny and J. L. Snell, Finite Markov Chains, New York:Van Nostrand, 1960.||",An Optimal Approach to Fault Tolerant Software Systems Design
"E. Gudes&&Department of Computer Science, Pennsylvania State University, University Park, PA, USA|","The design of a secure file system based on user controlled cryptographic (UCC) transformations is investigated. With UCC transformations, cryptography not only complements other protection mechanisms, but can also enforce protection specifications. Files with different access permissions are enciphered by different cryptographic keys supplied by authorized users at access time. Several classes of protection policies such as: compartmentalized, hierarchical, and data dependent are discussed. Several protection implementation schemes are suggested and analyzed according to criteria such as: security, efficiency, and user convenience. These schemes provide a versatile and powerful set of design alternatives.",10.1109/TSE.1980.230489,IEEE Transactions on Software Engineering,"Cryptography,File systems,User-generated content,Control systems,Data security,Power system protection,Communication system control,Permission,Power system security,Data communication","B. Bayer and J. K. Metzger, ""On the encipherment of search trees and random access files"", Ass. Comput. Mach. TODS, vol. 1, Mar. 1976.||R. W. Conway, N. L. Maxwell and H. L. Morgan, ""On the implementation of security measures in information systems"", Commun. Ass. Comput. Mach., vol. 15, Apr. 1972.||W. Diffie and M. E. Hellman, ""A critique of the proposed data encryption standard"", Commun. Ass. Comput. Mach., Mar. 1976.||W. F. Ehrsam, S. M. Matyas, C. H. Meyer and W. L. Tuchman, ""A cryptographic key management scheme for implementing the data encryption standard"", IBM Syst. J., vol. 17, no. 2, 1978.||Federal Register, Mar. 1975.||S. G. Graham and P. J. Denning, ""Protection principles and practice"", AFIPS Conf Proc. Spring Joint Comput. Conf., 1972.||E. Gudes, The application of cryptography to data base security, 1976.||E. Gudes, F. A. Stahl and H. S. Koch, ""Applications of cryptographic transformations to data base security"", Proc. Nat. Comput. Conf., 1976.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 1, 1973.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 3, 1975.||D. Kaufman and K. Auerbach, ""A secure national system for electronic funds transfer"", Proc. AFIPS Nat. Comput. Conf., vol. 45, pp. 129-138, 1976.||E. J. McCauley, A model for data secure systems, 1975.||S. Muftic, The design of a secure computer system, 1976.||Computer security guidelines for implementing the privacy act of 1974, May 1975.||Computer security and the data encryption standard, 1978.||E. I. Organic, The MULTICS System, MA, Cambridge:M.I.T. Press, 1972.||H. E. Petersen and R. Turn, ""Systems implications of information privacy"", AFIPS Conf Proc. Spring Joint Comput. Conf., 1967.||G. B. Purdy, ""A high security log-in procedure"", Commun. Ass. Comput. Mach., vol. 17, Aug. 1974.||C. E. Shannon, ""Communication theory of secrecy systems"", Be1l Syst. Tech. J., vol. 28, no. 4, 1949.||J. L. Smith, W. A. Notz and P. R. Osseck, An experimental application of cryptography to a remotely accessed data system, 1972.||F. A. Stahl, E. Gudes and H. S. Koch, ""The coordination of cryptographic and traditional access copitrol techniques for protection in computer systems"", IEEE Workshop: Trends and Applications-Computer Security and Integrity, 1977-May.||K. G. Walter, W. F. Orden, W. C. Rounds, F. T. Bradshaw, S. R. Ames and D. G. Shumway, Primitive models for computer security, Case Western Reserve Univ., 1973.||E. Wong and T. C. Chiang, ""Canonical structures in attribute based file organization"", Commun. Ass. Comput. Mach., vol. 14, Sept. 1971.||",The Design of a Cryptography Based Secure File System
"G.-C. Roman&&Department of Computer Science, Washington University, Saint Louis, MO, USA|","A new software engineering methodology called program control structuring is proposed. Its development is justified by the need to offer the designer the capability to improve the productivity and quality of software development in the conditions of a ""highly imperfect"" environment. Such an environment is shown to involve the use of transient and inexperienced programmers, frequent alterations to the design specifications, and continuous development. The philosophy behind program control structuring is that of minimizing the probability of error in the design and implementation of large programs by means of language-and problem-dependent standardization. The particular standardization approach used by program control structuring is shown to provide 1) a program structure that is simple and flexible, readily understood, easily developed, and inexpensively maintained, and 2) a high-quality and partially mechanizable structure-oriented documentation scheme. Subsequently, it is suggested that many of the standards are mechanizable in the immediate future as a necessary condition for achieving higher productivity and improved program quality. Finally, the mechanization of software production is proposed as a step needed to precede the development of automatic program generation systems.",10.1109/TSE.1977.231173,IEEE Transactions on Software Engineering,"Production,Productivity,Standardization,Programming environments,Documentation,Computer science,Humans,Control systems,Software engineering,Programming profession","J. D. Aron, The Program Development Process: The Individual Programmer, MA, Reading:Addison-Wesley, 1974.||E. Aschroft and Z. Manna, ""The translation of 'GO-TO' programs to 'WHILE' programs"" in Information Processing 71, The Netherlands, Amsterdam:North-Holland, pp. 250-255, 1972.||C. Bohm and G. Jacopini, ""Flow diagrams turing machines and languages with only two formation rules"", Commun. Ass. Comput. Mach., vol. 9, pp. 366-371, 1966.||O.-J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic Press, 1972.||D. Garfinkel, ""A machine independent language for the simulation of complex chemical and biochemical systems"", Comput. Biomed. Res., vol. 2, pp. 31-44, 1968.||B. W. Kernighan and P. J. Plauger, ""Programming style—Examples and counterexamples"", ACM Comput. Surveys, vol. 6, pp. 303-319, 1974.||H. D. Mills, ""Syntax-directed documentation for PL360"", Commun. Ass. Comput. Mach., vol. 13, pp. 216-222, 1974.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., vol. 15, pp. 1053-1058, 1972.||G.-C. Roman, Program control restructuring—A software engineering methodology, 1976.||E. Yourdon, Techniques of Program Structure and Design, NJ, Englewood Cliffs:Prentice-Hall, 1975.||",An Argument in Favor of Mechanized Software Production
"K. Ekanadham&&Department of Computer Science, State University of New York, Stony Brook, NY, USA|A.J. Bernstein&&Department of Computer Science, State University of New York, Stony Brook, NY, USA|","Protection in capability-based operating systems is comsidered. The concept of a conditional capability, which is a generalization of a conventional capability, is proposed. The conditional capability can only be exercised when certain conditions relating to the context of its use are satisfied. It is shown that such capabilities form a basis upon which features such as domains of protection, revocation, and type extension can be built. The implementation of these features can be isolated into sepuate modules thus leaving the basic protection module uncluttered and simplifying the overall structure of the system.",10.1109/TSE.1979.230184,IEEE Transactions on Software Engineering,"Protection,Kernel,Operating systems,Control systems,Computer science,Permission","A. J. Bernstein and P. Siegel, ""A computer architecture for level structured systems"", IEEE Trans. Comput., vol. C-24, Aug. 1975.||E. Cohen and D. Jefferson, ""Protection in the Hydra operating system"", Proc. 5th ACM Symp. Operating Systems Principles, 1975.||E. W. Dijkstra, ""The structure of the THE multi-programming system"", Commun. Ass. Comput. Mach., vol. 11, May 1968.||J. B. Dennis and E. C. Van Horn, ""Programming semantics for multi‑programmed computations"", Commun. Ass. Comput. Mach., vol. 9, Mar. 1966.||K. Ekanadham and A. J. Bernstein, Level structures–A view point, 1976.||K. Ekanadham, Context approach to protection, 1976.||R. S. Fabry, ""Capability-based addressing"", Commun. Ass. Comput. Mach., vol. 19, July 1974.||E. A. Feustel, ""On the advantages of tagged architecture"", IEEE Trans. Comput., vol. C-22, July 1973.||A. K. Jones, Protection in programmed systems, 1973.||B. W. Lampson, ""Protection"", 5th Annu. Princeton Conf., 1969.||R. Levin, E. Cohen, W. Corwin, F. Pollack and W. Wulf, ""Policy/ mechanism separation in Hydra"", Proc. 5th Symp. Operating Systems Principles, 1975-Nov.||J. H. Morris, ""Protection in programming languages"", Commun. Ass. Comput. Mach., vol. 16, Jan. 1973.||D. D. Redell, Naming and protection in extendible operating systems, 1974.||W. A. Wulf, ""Hydra–The kemel of a multi-processor operating system"", Commun. Ass. Comput. Mach., vol. 17, June 1974.||",Conditional Capabilities
"T. Anderson&&Computing Laboratory, University of Newcastle, Newcastle-upon-Tyne, UK|J.C. Knight&&NASA-Langley Research Center, Hampton, VA, USA|","Real-time systems often have very high reliability requirements and are therefore prime candidates for the inclusion of fault tolerance techniques. In order to provide tolerance to software faults, some form of state restoration is usually advocated as a means of recovery. State restoration can be expensive and the cost is exacerbated for systems which utilize concurrent processes. The concurrency present in most real-time systems and the further difficulties introduced by timing constraints suggest that providing tolerance for software faults may be inordinately expensive or complex. We believe that this need not be the case, and propose a straightforward pragmatic approach to software fault tolerance'which is believed to be applicable to many real-time systems. The approach takes advantage of the structure of real-time systems to simplify error recovery, and a classification scheme for errors is introduced. Responses to each type of error are proposed which allow service to be maintained.",10.1109/TSE.1983.237017,IEEE Transactions on Software Engineering,"Fault tolerant systems,Real time systems,NASA,Aerospace electronics,Delay,Costs,Concurrent computing,Timing,Maintenance,Software systems","T. Anderson and P. A. Lee, Fault Tolerance Principles and Practice, NJ, Englewood Cliffs:Prentice-Hall Int., 1981.||A. Avizienis, ""Fault tolerant systems"", IEEE Trans. Comput., vol. C-25, pp. 1304-1312, Dec. 1976.||R. H. Campbell, K. Horton and G. G. Belford, ""Simulations of a fault tolerant deadline mechanism"", Dig. Papers FTCS, pp. 95-101, 1979-June.||W. C. Carter, ""Hardware fault tolerance"" in Computing Systems Reliability–An Advanced Course, Cambridge Univ. Press, pp. 211-263, 1979.||L. Chen and A. Avizienis, ""N-version programming: A fault‑tolerance approach to reliability of software operation"", Dig. Papers FTCS, pp. 3-9, 1978-June.||T. Gilb, ""Parallel programming"", Datamation, vol. 20, pp. 160-161, Oct. 1974.||T. Gilb, SoftwareMetrics, Cambridge:Winthrop, 1977.||J. B. Goodenough, ""Exception handling: Issues and a proposed notation"", Commun. Ass. Comput. Mach., vol. 18, pp. 683-696, Dec. 1975.||H. Hecht, ""Fault tolerant software for real-time applications"", Comput. Surveys, vol. 8, pp. 391-407, Dec. 1976.||J. J. Horning, ""A program structure for error detection and recovery"", Oper. Syst. Proc. Int. Symp (Lecture Notes in Comput. Sci.), vol. 16, pp. 171-187, 1974.||K. H. Kim, ""An approach to programmer-transparent coordination of recovering parallel processes and its efficient implementation rules"", Proc. Int. Conf. Parallel Processing, pp. 58-68, 1978-Aug.||H. Kopetz, ""Software redundancy in real-time systems"", Proc. IFIP Congress 74, pp. 182-186, 1974-Aug.||P. A. Lee, ""A reconsideration of the recovery block scheme"", Comput. J., vol. 21, pp. 306-3 10, Nov. 1978.||P. A. Lee, N. Ghani and K. Heron, ""A recovery cache for the PDP-11"", IEEE Trans. Comput., vol. C-29, pp. 546-549, June 1980.||P. M. Melliar-Smith and B. Randell, ""Software reliability: The role of programmed exception handling"", Proc. Conf. Language Design for Reliable Software SIGPLAN Notices, vol. 12, pp. 95-100, 1977-Mar.||B. Randell, ""System structure for software fault tolerance"", IEEE Trans. Software Eng., vol. SE-1, pp. 220-232, Mar. 1975.||B. Randell, P. A. Lee and P. C. Treleaven, ""Reliability issues in computing system design"", Comput. Surveys, vol. 10, pp. 123-165, June 1978.||D. L. Russell, ""Process backup in consumer-producer systems"", Proc. 6th Symp. Oper. Syst. Principles, pp. 151-157, 1977-Nov.||""SAFEGUARD data-processing system"", Bell Syst. Tech. J., vol. 54, 1975.||S. K. Shrivastava, ""Concurrent Pascal with backware error recovery"", Software–Practice and Experience, vol. 9, pp. 1001-1020, Dec. 1979.||S. K. Shrivastava and A. A. Akinpelu, Fault tolerant sequential programming using recovery blocks, Mar. 1978.||S. K. Shrivastava and J.-P. Banatre, ""Reliable resource allocation between unreliable processes"", IEEE Trans. Software Eng., vol. SE-4, pp. 230-241, May 1978.||AGS Software Requirements Document, Sperry Flight Syst. Div., Sperry Rand Corp., 1979.||",A Framework for Software Fault Tolerance in Real-Time Systems
"J. Misra&&Department of Computer Science, University of Texas, Austin, Austin, TX, USA|","A method for formal description of programming prinicples is presented in this paper. Programming principles, such as sequential search can be defined and proven even in the absence of an application. We represent a principle as a program scheme which has partially interpreted functions in it. The functions must obey certain input constraints. Use of these ideas in program proving is illustrated with examples.",10.1109/TSE.1978.233860,IEEE Transactions on Software Engineering,"Education,Binary trees,Formal specifications,Functional programming,Computer science,Law,Legal factors,Linear programming,Computer languages","E. W. Dikstra, ""Notes on structured programming"" in Struc-tured Programming, New York:Academic, 1972.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. Applied Mathematics American Mathematical Society, 1967.||D. Gries and N. Gehani, ""Some ideas on data types in high level languages"", Commun. Ass. Comput. Mach., vol. 20, no. 6, pp. 414-420, June 1977.||S. L. Gerhart and L. Yelowitz, ""Control structure abstractions of the backtracking programming technique"", IEEE Trans. Software Eng., vol. SE-2, pp. 285-292, Dec. 1976.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, no. 10, pp. 576-583, 1969.||C. A. R. Hoare and N. Wirth, ""An axiomatic definition of the programming language PASCAL"", Acta Informatica, vol. 2, pp. 335-355.||B. H. Liskov and S. N. Zilles, ""Specification techniques for data abstraction"", IEEE Trans. Software Eng., vol. SE-1, Jan. 1975.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||N. Wirth, ""Program development by stepwise refinement"", Commun. Ass. Comput. Mach., vol. 14, pp. 221-227, 1971.||W. A. Wulf, R. L. London and M. Shaw, Abstraction and verification in Alphard, Information Sciences Institute, Univ. Southern Calif., June 1976.||",An Approach to Formal Definitions and Proofs of Programming Principles
"L.J. Mekly&&Teletype Corporation, Skokie, IL, USA|S.S. Yau&&Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, IL, USA|",An approach to software design representation which is consistent with the concept of engineering blueprints is presented. The main criteria for software engineering blueprints are defined and a network scheme of graphical representation is considered through an overview of Petri net techniques. The concept of an abstract process (AP) is introduced as the basic element of system representation. An abstract process network schema of software design representation is developed and supported by an algebraic system of notation. Methods of AP-net construction are presented and illustrated by examples. The advantages of using the proposed approach in different phases of software engineering are pointed out and the main directions for further research have been identified.,10.1109/TSE.1980.230490,IEEE Transactions on Software Engineering,"Software design,Design engineering,Software engineering,Programming,Automata,Terminology,Process design,Buildings,Instruments","R. E. Fairle, ""Modern software design techniques"", Proc. MRI Symp. Comput. Software Eng., pp. 11-30, 1976.||L. J. Peters and L. L. Tripp, ""Companing software design methodologies"", Datamation, pp. 89-94, Nov. 1977.||R. C. Tausworthe, Standardized Development of Computer Software, NJ, Englewood Cliffs:Prentice-Hall, 1977.||""Infotech State of the Art Report"", Software Engineering Techniques, vol. 1, 2, 1977.||""Infotech State of the Art Report"", Structured Analysis and Design, vol. 1, 2, 1978.||P. Freeman and A. I. Wasserman, Software Design Techniques, New York:IEEE, 1977.||C. V. Ramamoorthy and R. Y. Yeh, Tutorial: Software Methodology, New York:IEEE, 1978.||W. Myers, ""The need for software engineering"", Comput., vol. 11, pp. 12-26, Feb. 1978.||C. A. R. Hoare, ""Software engineering: A keynote address"", Proc. 3rd Int. Conf Software Eng., pp. 1-4, 1978-May.||D. T. Ross, ""Structured analysis (SA): A language for communicating ideas"", IEEE Trans. Software Eng., vol. 3, pp. 16-34, Jan. 1977.||A. I. Wasserman, ""Software engineering: The turning point"", Comput., vol. 11, pp. 30-41, Sept. 1978.||A. I. Wasserman and P. Freeman, ""Software engineering education: Status and prospects"", Proc. IEEE, vol. 66, pp. 886-892, 1978-Aug.||P. Freeman, ""Software design representation: A case study"", Software Practice and Experience, vol. 8, pp. 501-512, Sept.-Oct. 1978.||I. Greif, ""A language for formal problem specification"", Commun. Ass. Comput. Mach., vol. 20, pp. 931-935, Dec. 1977.||A. C. Shaw, ""Software descriptions with flow expressions"", IEEE Trans. Software Eng., vol. SE-4, pp. 242-254, May 1978.||N. Chapin, ""Flowcharting with the ANSI standard: A tutorial"", ACM Comput. Surveys, vol. 2, pp. 119-146, June 1970.||H. A. Sholl and T. L. Booth, ""Software performance modeling using computation structures"", IEEE Trans. Software Eng., vol. SE-1, pp. 414-420, Dec. 1975.||U. R. Kodres, ""Analysis of real-time systems by data flowgraphs"", IEEE Trans. Software Eng., vol. SE-4, pp. 169-178, May 1978.||W. P. Stevens, G. J. Myers and L. L. Constantine, ""Structured design"", IBM Syst. J., vol. 13, no. 2, pp. 115-139, 1974.||J. F. Stay, ""HIPO and integrated program design"", IBM Syst. J., vol. 15, no. 2, pp. 143-154, 1976.||I. Nassi and B. Shneiderman, ""Flowchart techniques for structured programming"", ACM SIGPLAN Notices, vol. 8, pp. 12-26, Aug. 1973.||C. M. Yoder and M. L. Schrag, ""Nassi-Shneiderman charts. An alternative to flowcharts for design"", Proc. Software Quality and Assurance Workshop SIGSOFT Notes, vol. 3, no. 5, pp. 79-86, 1978-Nov.||U. W. Pooch, ""Translation of decision tables"", ACM Comput. Surveys, vol. 6, pp. 125-151, June 1974.||J. R. Metzner and B. H. Barnes, Decision Table Languages and Systems, New York:Academic, 1977.||L. J. Peters and L. L. Tripp, ""Software design representation schemes"", Proc. MRI Symp. Comput. Software Eng., pp. 31-56, 1976.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, pp. 1-81, 1972.||H. F. Ledgard and M. Marcotty, ""A genealogy of control structures"", Commun. Ass. Comput. Mach., vol. 18, pp. 629-639, Nov. 1975.||B. Schneiderman, ""Experimental investigations of the utility of detailed flowcharts in programming"", Commun. Ass. Comput. Mach., vol. 20, pp. 373-381, June 1977.||L. A. Levental and W. C. Walsh, ""Program design: Beware of flowcharting pitfalls"", Digital Design, pp. 20-22, Nov. 1978.||A. T. Cohen and L. S. Levy, ""Structured flowcharts for multiprocessing"", Comput. Languages, vol. 3, no. 4, pp. 209-220, 1978.||U. R. Kodres, ""Discrete systems and flowcharts"", IEEE Trans. Software Eng., vol. SE-4, pp. 521-525, Nov. 1978.||T. DeMarco, Structured Analysis and System Specification, New York:Yourdon, 1978.||S. H. Caine and E. K. Gordon, ""PDL-A tool for software design"", Proc. Nat. Comput. Conf, pp. 271-276, 1975.||P. V. Leer, ""Top-down development using a program design language"", IBM Syst. J., vol. 15, no. 2, pp. 155-170, 1976.||Y. Chu, ""Introducing software blueprint"", Proc. COMPSAC '77, pp. 9-16, 1977-Nov.||C. V. Ramamoorthy and H. H. So, ""Software requirements and specifications: Status and perspectives"" in Tutorial: Software Methodology, New York:IEEE, pp. 43-164, 1978.||M. A. Jackson, Principles of Program Design, New York:Academic, 1975.||J. D. Warnier, Logical Construction of Programs, New York:Van Nostrand Reinhold, 1976.||K. T. Orr, Structured Systems Development, New York:Yourdon, 1977.||S. S. Yau and C. C. Yang, ""An approach to distributed computing system software design"", Proc. 1st Int. Conf. Distributed Comput. Syst., pp. 31-42, 1979-Oct.||P. Lu and S. S. Yau, ""A methodology for representing the formal specification of distributed computing system software design"", Proc. 1st Int. Conf. Distributed Comput. Syst., pp. 212-221, 1979-Oct.||Z. Kohavi, Switching and Finite Automata Theory, New York:McGraw-Hill, 1970.||B. W. Kernighan and P. J. Plauger, The Elements of Programming Style, New York:McGraw-Hill, 1974.||R. D. Gordon, ""Measuring improvements in program clarity"", IEEE Trans. Software Eng., vol. SE-5, pp. 79-90, Mar. 1979.||M. R. Paige, ""Program graphs an algebra and their implications for programming"", IEEE Trans. Software Eng., vol. SE-1, pp. 286-291, Sept. 1975.||T. J. McCabe, ""A complexity measure"", IEEE 7rans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||M. E. Stickney, ""An application of graph theory to software test data selection"", Proc. Software Quality and Assurance Workshop ACM SIGSOFT Notes, vol. 3, pp. 111-115, 1978-Nov.||D. T. Ross, ""Software engineering: Process principles and goals"", Comput., pp. 17-27, May 1975.||J. L. Peterson, ""Petri nets"", ACM Comput. Surneys, vol. 9, pp. 223-252, Sept. 1977.||J. L. Peterson, ""An introduction to Petri nets"", Proc. Nat. Electron. Conf, vol. 32, pp. 144-148, 1978-Oct.||J. B. Dennis, Computation structures: A. Petri nets, pp. 13-23, July 1971.||D. Misunas, ""Petri nets and speed independent design"", Commun. Ass. Comput. Mach., vol. 16, pp. 474-481, Aug. 1973.||G. J. Nutt, ""Evaluation nets for computer system performance analysis"", Proc. Fall Joint Comput. Conf., pp. 279-286, 1972-Dec.||J. D. Noe and G. J. Nutt, ""Macro E-nets for representation of parallel systems"", IEEE Trans. Comput., vol. C-22, pp. 718-727, Aug. 1973.||J. D. Noe, ""Hierarchical modeling with pro-nets"", Proc. Nat. Electron. Conf., vol. 32, pp. 155-160, 1978-Oct.||J.-L. Baer, ""Models for the design simulation and performance evaluation of distributed-function architecture"", Proc. COMP‑CON '74, pp. 81-84, 1974-Feb.||E. E. Balkovich and G. P. Engelberg, ""Research towards a technology to support the specification of data processing system performance requirements"", Proc. 2nd Int. Conf. Software Eng., pp. 110-115, 1976-Oct.||C. Davis and C. Vick, ""The software development system"", IEEE Trans. Software Eng., vol. SE-3, pp. 69-84, Jan. 1977.||J.-L. Baer and C. S. Ellis, ""Model design and evaluation of a compiler for a parallel processing environment"", IEEE Trans. Software Eng., vol. SE-3, pp. 394-405, Nov. 1977.||P. Azena, ""Design and verification of communication procedures: A bottom-up approach"", Proc. 3rd Int. Conf Software Eng., pp. 168-174, 1978-May.||C. Whitby-Strevens, ""Towards the performance evaluation of distributed computing systems"", Proc. COMPSAC '78, pp. 141-146, 1978-Nov.||T. Agerwala, ""Some applications of Petri nets"", Proc. Nat. Electron. Conf., vol. 32, pp. 149-154, 1978-Oct.||W. L. Heimerdinger, ""A Petri net approach to system level fault tolerance analysis"", Proc. Nat. Electron. Conf., vol. 32, pp. 161-165, 1978-Oct.||Y. W. Han, ""Performance evaluation of a digital system using a Petri net-like approach"", Proc. Nat. Electron. Conf., vol. 32, pp. 166-172, 1978-Oct.||J. J. Homing and B. Randell, ""Process structuring"", ACM Comput. Surveys, vol. 5, pp. 5-29, Mar. 1973.||L. J. Mekly, A systems approach to software design representation, 1979.||H. D. Mills, ""The new math of computer programming"", Commun. Ass. Comput. Mach., vol. 18, pp. 43-48, Jan. 1975.||C. Bohm and G. Jacopini, ""Flow-diagrams Turing machines and languages with only two formation rules"", Commun. Ass. Comput. Mach., vol. 9, pp. 366-376, May 1966.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. AsS. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||J. M. Spitzen, ""An example of hierarchical design and proof"", Commun. Ass. Comput. Mach., vol. 21, pp. 1064-1075, Dec. 1978.||D. Gries, ""An illustration of current ideas on the derivation of correctness proofs and correct programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 238-244, Dec. 1976.||B. H. Liskov and S. Zilles, ""Specification techniques for data abstractions"", Proc. Int. Conf Reliable Software, pp. 72-87, 1975-Apr.||D. M. Birke, ""State-transition programming techniques and their use in producing teleprocessing device-control programs"", IEEE Trans. Commun., vol. COM-20, pp. 569-575, June 1972.||K. G. Salter, ""A methodology for decomposing system requirements into data processing requirements"", Proc. 2nd Int. Conf Software Eng., pp. 91-101, 1976-Oct.||P. Chung and B. Gaiman, ""Use of state diagrams to engineer communications software"", Proc. 3rd Int. Conf Software Eng., pp. 215-221, 1978-May.||A. B. Ferrentino and H. D. Mills, ""State machines and their semantics in software engineering"", Proc. COMPSAC '77, pp. 242-251, 1977-Nov.||T. S. Chow, ""Testing software design modeled by finite-state machines"", IEEE Trans. Software Eng., vol. SE-4, pp. 178-187, May 1978.||T. S. Chow, ""Analysis of software design modeled by multiple finite state machines"", Proc. COMPSAC '78, pp. 169-173, 1978-Nov.||J. V. Landau, ""State description techniques applied to industrial machine control"", Comput., vol. 12, pp. 32-40, Feb. 1979.||E. J. Wilkens, ""Finite state techniques in software engineering"", Proc. COMPSAC '77, pp. 691-697, 1977-Nov.||L. C. Carpenter and L. L. Tripp, ""Software design validation tool"", Proc. Int. Conf Reliable Software, pp. 395-400, 1975-Apr.||T. E. Lindquist and R. F. Keller, ""The correctness of programs written in the language KL-1"", Proc. COMPSAC '77, pp. 635-639, 1977-Nov.||D. L. Boyd and A. Pizzarello, ""Introduction to the WELLMADE design methodology"", IEEE Trans. Software Eng., vol. SE-4, pp. 276-282, July 1978.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||A. Ginzburg, Algebraic Theory of Automata (ACM Monograph Series), New York:Academic, 1968.||C. W. Rose, ""LOGOS and the software engineer"", Proc. Fall Joint Comput. Conf., pp. 311-323, 1972-Dec.||J. Backus, ""Can programming be liberated from the von Neumann style? A functional style and its algebra of programs"", Commun. Ass. Comput. Mach., vol. 21, pp. 613-641, Aug. 1978.||",Software Design Representation Using Abstract Process Networks
"M. Marcotty&&Computer Science Department, General Motors Research and Development Laboratories, Warren, MI, USA|F.G. Sayward&&Department of Computer Science, Yale University, New Heaven, CT, USA|",The mechanism used to define the programming language PL/I in the recently adopted American National Standard is presented. This method provides a rigorous though semiformal specification of the language. If uses the model of translation of programs into an abstract form to define the context-free and context-sensitive syntax. The semantics are defined by the interpretation of the abstract form of the program on a hypothetical machine. The method and metalanguage are presented along with several small examples to illustrate the definition technique's features. The complete definition process is shown by the definition of a small example language.,10.1109/TSE.1977.231174,IEEE Transactions on Software Engineering,"Computer languages,Standardization,Computer science,Computer aided manufacturing,ANSI standards,Context modeling,Dictionaries,Aspirin,Drugs,Terminology","A. Aho and J. Ullman, The Theory of Parsing Translation and Compiling, NJ, Englewood Cliffs:Prentice-Hall, vol. 1 and 2, 1973.||K. Alber, P. Oliva and H. Urschler, Concrete syntax of PL/I, June 1968.||K. Alber and P. Oliva, Translation of PL/I into abstract text, June 1968.||C. D. Allen, D. Beech, J. E. Nicholls and R. Rowe, An abstract interpreter of PL/I, 1966.||American National Standard Programming Language PL/I, NY, New York:ANSI X3.53, 1976.||J. W. Backus, ""The syntax and semantics of the proposed international algebraic language of the Zurich ACM-GAMM Conference"", Proc. Int. Conf Information Processing, pp. 125-132, 1959.||D. Beech, R. Rowe, R. A. Larner and J. E. Nicholls, Concrete syntax of PL/I, 1966.||D. Beech, J. E. Nicholls and R. Rowe, A PL/I translator, 1966.||D. Beech, R. Rowe, R. A. Larner and J. E. Nicholls, Abstract syntax of PL/I, 1966.||D. Beech, ""A structural view of PL/I"", Computing Surveys, vol. 2, pp. 33-64, Mar. 1970.||D. Beech and M. Marcotty, ""Unfurling the PL/I standard"", SIGPLAN Notices, vol. 8, pp. 12-43, Oct. 1973.||D. Beech, ""On the definitional method of standard PL/I"", Conf Rec. Principles of Programming Languages, pp. 87-94, 1973-Oct.||C. C. Elgot and A. Robinson, ""Random-access stored-program machines an approach to programming languages"", J. Ass. Comput. Mach., vol. 11, pp. 365-399, 1964.||""Standard ECMA-50 European Computer Manufacturers Association"", Standard for PL/I, 1976.||J. V. Garwick, ""The definition of programming languages by their compilers"" in Formal Language Description Languages for Computer Programming, Amsterdam:North‑Holland, pp. 139-147, 1966.||P. J. Landin, ""Correspondence between Algol 60 and Church's lambda-notation Part I"", Commun. Ass. Comput. Mach., vol. 8, pp. 89-101, Feb. 1965.||P. J. Landin, ""Correspondence between Algol 60 and Church's lambda‑notation Part II"", Commun. Ass. Comput. Mach., vol. 8, pp. 158-165, Mar. 1965.||J. A. N. Lee, Computer Semantics, NY, New York:Van Nostrand Reinhold, 1972.||P. Lucas, K. Laber, K. Bandat, H. Bekic, P. Oliva, K. Walk, et al., Informal introduction to the abstract syntax and interpretation of PL/I, June 1968.||P. Lucas, P. Lauer and H. Stigleitner, Method and notation for the formal definition of programming languages, June 1968.||P. Lucas and K. Walk, ""On the formal description of PL/I"", Annual Review of Automatic Programming, vol. 6, no. 3, pp. 105-182, 1969.||J. McCarthy, ""A formal description of a subset of ALGOL"" in Formal Language Description Languages for Computer Programming, Amsterdam:North-Holland, pp. 1-12, 1966.||J. McCarthy, ""Towards a mathematical science of computation"", Proc. IFIP Congr. 1962, 1963.||T. B. Steel, ""Standards for computers and information processing"" in Advances in Computers, NY, New York:Academic, vol. 8, pp. 103-152, 1967.||K. Walk, K. Alber, K. Bandat, H. Bekic, G. Chroust, V. Kudielka, et al., Abstract syntax for interpretation of PL/I, June 1968.||P. Wegner, ""Operational semantics of programming languages"", Proc. ACM Conf Proving Assertions about Programs SIGPLAN Notices, vol. 8, pp. 128-141, 1972-Jan.||P. Wegner, ""The Vienna definition language"", Computing Surveys, vol. 4, pp. 5-63, Mar. 1972.||A. van Wijngaarden, ""Report on the algorithmic language ALGOL 68"", Numerische Mathematik, vol. 14, pp. 79-218, 1969.||",The Definition Mechanism for Standard PL/I
"D.J. Rypka&&Bell Laboratories, Inc., Naperville, IL, USA|A.P. Lucido&&Department of Industrial Engineering, Texas A and M University, College Station, TX, USA|",Logical resources are defined as shared passive entities that can be concurrently accessed by multiple processes. Concurrency restrictions depend upon the mode or manner in which a process may manipulate a resource. Models incorporating these single unit resources can be used to analyze information locking for consistency and integrity purposes. Mode compatibility is defined and used to derive dead-lock detection and avoidance methods. These methods generalize well-known deadlock results for single unit resources by permitting greater concurrency while still guaranteeing data consistency. This model is applicable to the standard shared (read-only) and exclusive (read-write) access modes as well as a useful subset of those proposed in the CODASYL DBMS report.,10.1109/TSE.1979.230185,IEEE Transactions on Software Engineering,"System recovery,Concurrent computing,Resource management,Operating systems,Computer aided instruction,Information analysis,Database systems,Throughput,Delay,Information science","G. R. Andrews and J. R. McGraw, ""Language features for process interaction"", Proc. ACM Conf. Language Design for Reliable Software, pp. 114-127, 1977-Mar.||R. Bayer and M. Schkolnick, Concurrency of operations on B‑trees, May 1976.||D. C. Chamberlain, R. F. Boyce and I. L. Traiger, ""A deadlock‑free scheme for resource locking in a data base environment"" in Information Processing 74, The Netherlands, Amsterdam:North Holland, pp. 340-343, 1974.||E. G. Coffman, M. J. Elphic and A. Shoshani, ""System deadlocks"", Computing Surveys, vol. 3, pp. 67-78, June 1971.||C. J. Date, An Introduction to Database Systems, MA, Reading:Addison-Wesley, 1975.||R. Deviller, ""Game interpretation of deadlock avoidance problem"", Commun. Ass. Comput. Mach., vol. 20, pp. 741-745, Oct. 1977.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, pp. 624-633, Nov. 1976.||G. C. Everest, ""Concurrent update control and database integrity"" in Data Base Management, The Netherlands, Amsterdam:North Holland, pp. 241-270, 1974.||D. J. Frailey, ""A practical approach to managing resources and avoiding deadlocks"", Commun. Ass. Comput. Mach., vol. 16, pp. 323-329, May 1973.||J. N. Gray, R. A. Lorie and G. R. Putzolu, ""Granularity of locks in a shared database"", Proc. Int. Conf. Very Large Data Bases, pp. 428-451, 1975-Sept.||A. N. Habermann, ""Prevention of system deadlocks"", Commun. Ass. Comput. Mach., vol. 12, pp. 373-377, July 1969.||J. W. Havender, ""Avoiding deadlock in multitasking systems"", IBM Syst. J., vol. 7, no. 2, pp. 74-84, 1978.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||R. C. Holt, ""Comments on prevention of system deadlocks"", Commun. Ass. Comput. Mach., vol. 14, pp. 36-38, Jan. 1971.||R. C. Holt, On deadlock in computer systems, 1971.||R. C. Holt, ""Some deadlock properties of computer systems"", Computing Surveys, vol. 4, pp. 179-196, Sept. 1972.||P. F. King and A. J. Collmeyer, ""Database sharing–an efficient mechanism for supporting concurrent processes"", Proc. 1973 NCC, pp. 271-275.||D. E. Knuth, The Art of Computer Programming: Volume 1–Fundamental Algorithms, MA, Reading:Addison-Wesley, pp. 258-268, 1968.||J. E. Murphy, ""Resource allocation with interlock detection in a multitask system"", Proc. 1968 Fall Joint Comput. Conf., pp. 1169-1176.||R. D. Russell, A model for deadlock-free resource alocation, 1972.||G. Schlageter, ""Access synchronization and deadlock analysis in database systems: An implementation oriented approach"", information Systems, vol. 1, pp. 97-102, Oct. 1975.||A. Shoshani and A. J. Bernstein, ""Synchronization in a parallel–accessed data base"", Commun. Ass. Comput. Mach., vol. 12, pp. 604-607, Nov. 1969.||",Deadlock Detection and Avoidance for Shared Logical Resources
"R.L. Kashyap&&School of Electrical Engineering, Purdue University, West Lafayette, IN, USA|B.J. Oommen&&School of Electrical Engineering, Purdue University, West Lafayette, IN, USA|","Let T(U) be the set of words in the dictionary H which contains U as a substring. The problem considered here is the estimation of the set T(U) when U is not known, but Y, a noisy version of U is available. The suggested set estimate S*(Y) of T(U) is a proper subset of H such that its every element contains at least one substring which resembles Y most according to the Levenshtein metric. The proposed algorithm for-the computation of S*(Y) requires cubic time. The algorithm uses the recursively computable dissimilarity measure Dk(X, Y), termed as the kth distance between two strings X and Y which is a dissimilarity measure between Y and a certain subset of the set of contiguous substrings of X. Another estimate of T(U), namely SM(Y) is also suggested. The accuracy of SM(Y) is only slightly less than that of S*(Y), but the computation time of SM(Y) is substantially less than that of S*(Y). Experimental results involving 1900 noisy substrings and dictionaries which are subsets of 1023 most common English words [11] indicate that the accuracy of the estimate S*(Y) is around 99 percent and that of SM(Y) is about 98 percent.",10.1109/TSE.1983.237018,IEEE Transactions on Software Engineering,"Dictionaries,Databases,Recursive estimation,Computer science,Information retrieval","D. E. Knuth, J. H. Morris and V. R. Pratt, ""Fast pattern matching in strings"", SIAM J. Comput., vol. 6, no. 2, pp. 323-350, 1977.||R. S. Boyer and J. S. Moore, ""A fast string searching algorithm"", Commun. Ass. Comput. Mach., vol. 20, no. 10, pp. 762-772, 1977.||||R. L. Kashyap and B. J. Oommen, ""An effective algorithm for string correction using a generalized edit distance–I. Description of the algorithm and its optimality"", Inform. Sci., vol. 23, no. 2, pp. 123-142, 1981.||R. L. Kashyap and B. J. Oommen, ""An effective algorithm for string correction using a generalized edit distance–II. Computational complexity of the algorithm and some applications"", Inform. Sci., vol. 23, no. 3, pp. 201-217, 1981.||R. L. Kashyap and B. J. Oommen, ""A unifying theory for order preserving properties involving two strings"", Proc. Princeton Conf. on Inform. Sci. Syst., pp. 193-198, 1980.||R. A. Wagner and M. J. Fischer, ""The string to string correction problem"", J. Ass. Comput. Mach., vol. 21, pp. 168-173, 1974.||D. S. Hirschberg, ""Algorithms for the longest common subsequence problem"", J. Ass. Comput. Mach., vol. 24, pp. 664-675, 1977.||T. Okuda, E. Tanaka and T. Kasai, ""A method of correction of garbled words based on the Levenshtein metric"", IEEE Trans. Comput., vol. C-25, pp. 172-177, Feb. 1976.||R. L. Kashyap, ""Syntactic dec. rules for the recognition of spoken words and phrases using a stochastic automaton"", IEEE Trans. Pattern Anal. Machine Intell., vol. PAMI-1, pp. 154-163, 1979.||G. Dewey, Relative Frequency of English Speech Sounds, MA, Cambridge:Harvard Univ. Press, 1923.||",The Noisy Substring Matching Problem
"Kuo-Chung Tai&&Department of Computer Science, North Carolina State University, Raleigh, NC, USA|","A technique for syntactic error correction, called pattern mapping, is developed. A pattern is used to describe how to map or change one string into another. Using a preconstructed list of patterns, for each detected error, the first pattern with successful mapping is found and a correction is made based on this pattern.",10.1109/TSE.1978.233861,IEEE Transactions on Software Engineering,"Error correction,Computer languages,Computer errors,Costs,Phase detection,Program processors,Programming profession,Runtime,Machinery,Computer science","A. V. Aho and T. G. Peterson, ""A minimum distance error correcting parser for context-free languages"", SIAM J. Comput., vol. 1, pp. 305-312, Dec. 1972.||A. V. Aho and J. D. Ullman, Principles of Compiler Design, MA, Reading:Addison-Wesley, 1977.||D. T. Barnard, Automatic generation of syntax-repairing and paragraphing parsers, 1975.||R. W. Conway and T. R. Wilcox, ""Design and implementation of a diagnostic compiler for PL/1"", Commun. Assoc. Comput. Mach., vol. 16, pp. 169-179, Mar. 1973.||F. C. Druseikis and G. D. Ripley, ""Error recovery for simple LR(k) parsers"", Proc. ACM Annu. Conf., pp. 396-400, 1976.||S. Feyock and P. Lazarus, ""Syntax-directed correction of syntax errors"", Software-Practice and Experience, vol. 6, pp. 207-219, Apr. 1976.||C. N. Fischer, D. R. Milton and S. B. Quiring, ""An efficient insertion-only error-corrector for LL(k) parsers"", Proc. 4th ACM Symp. on Principles of Programming Languages, pp. 97-103, 1977.||S. L. Graham and S. P. Rhodes, ""Practical syntactic error recovery"", Commun. Assoc. Comput. Mach., vol. 18, pp. 639-650, Nov. 1975.||D. Gries, ""Error recovery and correction–An introduction to the literature"" in Compiler Construction: An Advanced Course, New York:Springer-Verlag, pp. 627-638, 1974.||L. R. James, A syntax directed error recovery method, 1972.||J. E. LaFrance, ""Optimization of error-recovery in syntax‑directed parsing algorithms"", SIGPLAN Notices, vol. 5, pp. 2-17, Dec. 1970.||R. P. Leinius, Error detection and recovery for syntax-directed compiler systems, 1970.||J. P. Levy, ""Automatic correction of syntax errors in programming languages"", Acta Informatica, vol. 4, pp. 271-292, 1975.||R. Lowrance and R. A. Wagner, ""An extension of the string-to‑string correction problem"", J. Assoc. Comput. Mach., vol. 22, pp. 177-183, Apr. 1975.||G. Lyon, ""Syntax-directed least-error analysis for context-free languages: A practical approach"", Commun. Assoc. Comput. Mach., vol. 17, pp. 3-14, Jan. 1974.||G. T. McGruther, An approach to automating syntax error detection recovery and correction for LR(k) grammars, 1972.||H. L. Morgan, ""Spelling correction in system programs"", Commun. Assoc. Comput. Mach., vol. 13, pp. 90-94, Feb. 1970.||F. E. Muth and A. L. Tharp, ""Correcting human errors in a alphanumeric terminal input"", Inform. Process. Manag., vol. 13, pp. 329-337, 1977.||T. J. Pennello and F. DeRemer, ""A forward move algorithm for LR error recovery"", Conf Rec. 5th ACM Symp. Principles ofProgramming Languages, pp. 241-254, 1978.||S. P. Rhodes, Practical syntactic error recovery for programming languages, 1973.||S. Sippu and E. Soisalon-Soininen, ""On defining error recovery in context-free parsing"" in Automata Languages and Programming, New York:Springer‑Verlag, pp. 492-503, 1977.||K. C. Tai, Syntactic error correction in programming languages, Jan. 1977.||K. C. Tai, ""The recovery of parsing configurations for LR(1) parsers"", Proc. 15th Southeastern Regional ACM Conf., pp. 154-160, 1974.||K. C. Tai, ""Fault-tolerant string processing by pattern mapping"", Proc. ACM Annu. Conf., pp. 336-342, 1977.||R. A. Wagner, ""On the complexity of the extended string-to‑string correction problem"", Proc. 7th ACM Symp. Theory of Computing, pp. 218-223, 1975.||R. A. Wagner and M. J. Fischer, ""The string-to-string correction problem"", J. Assoc. Comput. Mach., vol. 21, pp. 168-173, Jan. 1974.||C. Wetherell, ""Why automatic error correctors fail"", J. Comput. Lang., vol. 2, pp. 179-186, 1977.||",Syntactic Error Correction in Programming Languages
"V.D. Gligor&&Department of Computer Science, University of Maryland, College Park, MD, USA|S.H. Shattuck&&Department of Computer Science, University of Maryland, College Park, MD, USA|","A hierarchically organized and a distributed protocol for deadlock detection in distributed databases are presented in [1]. In this paper we show that the distributed protocol is incorrect, and present possible remedies. However, the distributed protocol remains impractical because ""condensations"" of ""transaction-wait-for"" graphs make graph updates difficult to perform. Delayed graph updates cause the occurrence of false deadlocks in this as well as in some other deadlock detection protocols for distributed systems. The performance degradation that results from false deadlocks depends on the characteristics of each protocol.",10.1109/TSE.1980.230491,IEEE Transactions on Software Engineering,"System recovery,Protocols,Delay,Out of order,Distributed computing,Concurrent computing,Distributed databases,Transaction databases,Degradation,Multiprocessing systems","D. Menasce and R. Muntz, ""Locking and deadlock detection in distributed data bases"", IEEE Trans. Software Eng., vol. SE-5, pp. 195-202, May 1979.||S. S. Isloor and T. A. Marsland, ""An effective 'on-line' deadlock detection technique for distributed data base management systems"", Proc. COMSAC 1978, pp. 283-288.||J. N. Gray, ""Notes on data base operating systems"" in Operating Systems–An Advanced Course, New York:Springer-Verlag, vol. 60, pp. 394-481, 1978.||R. Muntz, personal communication, Oct. 1979.||B. Goldman, Deadlock detection in computer networks, Sept. 1977.||C. Mohan, Distributed data base management-Progress problems some proposals and future directions, 1979-May.||H. C. Sun, Deadlock detection in distributed systems-A preliminary evaluation, 1978.||",On Deadlock Detection in Distributed Systems
"R.L. Kashyap&&School of Electrical Engineering, Purdue University, West Lafayette, IN, USA|S.K.C. Subas&&School of Physics, Universiti Sains Islam Malaysia, Penang, Malaysia|S.B. Yao&&Department of Computer Science, Purdue University, West Lafayette, IN, USA|",The multiple-attribute-tree (MAT) data-base organization is modeled and analyzed. Average retrieval time per query is obtained using a statistical estimation procedure and computationally efficient cost equations are presented. These cost equations are validated using a small experimental data base. Several real-life and generated data bases are used to demonstrate the effectiveness of the multiple-attribute-tree organization in reducing the expected retrieval time per query over conventional methods.,10.1109/TSE.1977.231175,IEEE Transactions on Software Engineering,"Information retrieval,Statistics,Computational modeling,Statistical analysis,Equations,Discrete cosine transforms,Computational efficiency,Costs,Military computing,Physics","C. J. Date, An Introduction to Database Systems, MA, Reading:Addison-Wesley, 1975.||A. F. Cardenas, ""Evaluation and selection of file organization—a model and system"", Commun. Ass. Comput. Mach., vol. 16, Sept. 1973.||A. F. Cardenas and J. P. Sagamang, Doubly-chained tree data base organization—Analysis and design strategies, Apr. 1974.||A. F. Cardenas, ""Analysis and performance of inverted data base structures"", Commun. Ass. Comput. Mach., vol. 18, May 1975.||J. H. Liou and S. B. Yao, ""Multi-dimensional clustering for data base organizations"", Inform. Syst., vol. 2, 1977.||J. B. Rothnie and T. Lozano, ""Attribute based file organization in a paged memory environment"", Commun. Ass. Comput. Mach., vol. 17, Feb. 1974.||S. K. C. Subas, R. L. Kashyap and S. B. Yao, ""Clustering concept and secondary key retrieval for on-line systems"", Proc. Computer Graphics Pattern Recognition and Data Structures Conf., pp. 181-190, 1975-May.||R. O. Duda and P. E. Hart, Pattern Classification and Scene Analysis, New York:Wiley-Interscience, pp. 228-237, 1973.||T. Rotwitt and P. A. D. de Maine, ""Storage optimization of tree structured files representing descriptor sets"", ACM SIGFIDET Workshop, 1971-Nov.||D. K. Hsiao and F. Harary, ""A formal system for information retrieval from-files"", Commun. Ass. Comput. Mach., vol. 13, pp. 67-73, Feb. 1970.||""Corrigendum"", Commun. Ass. Comput. Mach., vol. 13, pp. 266, Apr. 1970.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 1, pp. 473-479, 197 3.||D. Leflovitz, File Structures for On-Line Systems, New York:Spartan, 1969.||S. B. Yao, ""An attribute based model for database access cost analysis"", ACM Trans. Database Syst., vol. 2, pp. 45-67, Mar. 1977.||S. B. Yao, K. S. Das and T. J. Teorey, ""A dynamic database reorganization algorithm"", ACM Trans. Database Syst., vol. 1, pp. 159-174, June 1976.||S. K. C. Subas and R. L. Kashyap, Data base organization: An access and storage method, Sept. 1975.||",Analysis of the Multiple-Attribute-Tree Data-Base Organization
"J. Cohen&&Department of Physics, Brandeis University, Waltham, MA, USA|R. Sitver&&Wharton Computational Services Center, University of Pennsylvania, Philadelphia, PA, USA|D. Auty&&Department of Computer Science, Brown University of Providence, Providence, RI, USA|","Time formulas are symbolic formulas which express the execution time of a program as a function of its input data and of variables representing the time to execute individual operations (e.g., push, pop, transfer, etc.). It is shown that in many cases the time formulas for recursive descent parsers may be generated automatically by a simple inspection of the parser code. These time formulas are instrumental in estimating the gains attained by various types of optimizations. Several of these optimizations are presented and their efficiency gains are estimated. A parser for a simple programming language is generated, optimized, and evaluated using the proposed techniques.",10.1109/TSE.1979.234208,IEEE Transactions on Software Engineering,"Inspection,Instruments,Computer languages,Computer aided instruction,Physics,Computer science","A. Aho and J. D. Ullman, The Theory of Parsing Translation and Compiling, NJ, Englewood Cliffs:Prentice-Hall, vol. I, II, 1972.||F. E. Alien and J. Cocke, ""A catalogue of optimizing transformations"" in Design and Optimization of Compilers, NJ, Englewood Cliffs:Prentice-Hall, pp. 1-30, 1972.||F. L. Bauer, Compiler Construction: An Advanced Course Lecture Notes in Computer Science No. 21, New York:Springer Verlag, 1974.||J. Cohen and C. Zuckerman, ""Two languages for estimating program efficiency"", Commun. Ass. Comput. Mach., vol. 17, pp. 303-308, June 1974.||J. Cohen, ""Experience with a conversational parser generator system"", Software–Practice and Experience, vol. 5, pp. 169-180, 1975.||J. Cohen and M. Roth, ""Analyses of deterministic parsing algorithms"", Commun. Ass. Comput. Mach., vol. 21, pp. 448-458, June 1978.||D. E. Knuth, ""Top-down syntax analysis"", Acta Inform., vol. 1, pp. 79-110, 1971.||D. E. Knuth and F. R. Stevenson, ""Optimal measurement points for program frequency counts"", BIT, vol. 13, pp. 313-322, 1973.||R. Sethi and J. D. Ullman, ""The generation of optimal code for arithmetic expressions"", J. Ass. Comput. Mach., vol. 17, no. 4, pp. 715-728, 1970.||B. Silverberg, personal communication, July 1977.||N. Wirth, Algorithms + Data Structures = Programs, NJ, Englewood Cliffs:Prentice-Hall, 1976.||",Evaluating and Improving Recursive Descent Parsers
"J.R. Jagannathan&&Department of Computer Science, University of Waterloo|R. Vasudevan&&unknow|",The two-phase deadlock detection protocol in the above paperl detects false deadlocks. This is contrary to what the authors claim. The false detection o. f deadlocks is shown using a counterexample.,10.1109/TSE.1983.237019,IEEE Transactions on Software Engineering,"Protocols,System recovery,Database systems,Broadcasting,Resource management,Phase detection,Computer science","J. R. Jagannathan and R. Vasudevan, ""A distributed deadlock detection and resolution. scheme: Performance study"", Proc. 3rd Int. Conf. Distributed Comput. Syst., pp. 496-501, 1982-Oct.||J. R. Jagannathan and R. Vasudevan, Detection and resolution of deadlocks in distributed systems, Dec. 1983.||V. D. Gligor and S. H. Shattuck, ""On deadlock detection in distributed systems"", IEEE Trans. Software Eng., vol. SE-6, pp. 435-440, Sept. 1980.||","Comments on ""Protocols for Deadlock Detection in Distributed Database Systems"""
"A.B. Cremers&&Informatics Department, University of Dortmund, Dortmund, Germany|T.N. Hibbard&&Jet Propulsion Laboratory, California Institute of Technology, Pasadena, CA, USA|","A preliminary example of program development demonstrates that the control-independent implementation of data types can lead to very inefficient code. The concept of a data space, which emphasizes the interaction between data and control structures, is introduced as a formal model of virtual machines. The model consists of three components: a state space X, an information structure F, and a control component p. Formally, X is a set of objects, F a set of functions with common domain X mapping the states to the value sets of certain data types, and p a partial function X → X. Two important points of investigation are the characterization of state space structure and the mechanism of implementation. Good state description is characterized by ""completeness"" and ""orthogonality."" Either property plays a prominent role for the concept of implementation which, in turn, is formally defined as a mapping from a ""virtual"" space to a ""real"" space, via some ""macro"" space. These notions are illugtrated by means of several examples from the area of programming languages.",10.1109/TSE.1978.233862,IEEE Transactions on Software Engineering,"Virtual machining,State-space methods,Space technology,Computer languages,Software design,Mathematical model,Process design,System testing,Guidelines,Mathematics","E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, 1972.||P. Henderson, ""Finite state modeling in program development"", Proc. Int. Conf Reliable Software (available from ACM), pp. 221-227, 1975.||C. A. R. Hoare and P. E. Lauer, ""Consistent and complementary theories of semantics of programming languages"", Acta Informatica, vol. 3, pp. 135-153, 1974.||J. Horning and B. Randell, ""Process structuring"", Computing Surveys, vol. 5, pp. 5-30, 1973.||D. E. Knuth, Fundamental Algorithms: The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. 1, 1973.||LISP 1.5 Programmer's Manual, 1962.||J. McCarthy, ""A basis for a mathematical theory of computation"" in Computer Programming and Formal Systems, The Netherlands, Amsterdam:North Holland, 1963.||M. Minsky, Computation: Finite and Infinite Machines, NJ, Englewood Cliffs:Prentice-Hall, 1967.||""Revised report on the algorithmic language ALGOL 60"", Commun. Ass. Comput. Mach., vol. 6, pp. 1-17, 1963.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., vol. 15, pp. 330-336, 1972.||L. Robinson, K. N. Levitt, P. G. Neumann and A. R. Saxena, ""On attaining reliable software for a secure operating system"", Proc. Int. Conf Reliable Software (available from ACM), pp. 267-284, 1975.||D. Scott and C. Strachey, ""Toward a mathematical semantics for computer languages"", Proc. Symp. Computers and Automnata; also in Microwave Research Institute Symp. Ser., vol. XXI, 1972.||M. Shaw, W. A. Wulf and R. L. London, Abstraction and veriverition in Alphard: Iteration and generators, Aug. 1976.||F. W. Zurcher and B. Randell, ""Iterative multi-level modeling–A methodology for computer system design"", 1968 Proc. IFIP Congress, pp. 867-871, 1968.||",Formal Modeling of Virtual Machines
"C.V. Ramamoorthy&&Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, CA, USA|G.S. Ho&&Bell Laboratories, Inc., Naperville, IL, USA|","Some analysis techniques for real-time asynchronous concurrent systems are presented. In order to model clearly the synchronization involved in these systems, an extended timed Petri net model is used. The system to be studied is first modeled by a Petri net. Based on the Petri net model, a system is classified into either: 1) a consistent system; or 2) an inconsistent system. Most real-world systems fall into the first class which is further subclassified into i) decision-free systems; ii) safe persistent systems; and iii) general systems. Procedures for predicting and verifying the system performance of all three types are presented. It is found that the computational complexity involved increases in the same order as they are listed above.",10.1109/TSE.1980.230492,IEEE Transactions on Software Engineering,"Petri nets,Real time systems,Performance analysis,System performance,Isolation technology,Military computing,Costs,Microprocessors,Computational complexity,Solid state circuits","T. Agerwala and M. J. Flynn, ""On the completeness of representation schemes for concurrent systems"", Conf. Petri Nets and Related Methods, 1975-July.||F. Baskett, K. M. Chandy, R. R. Muntz and F. Palacios-Gomez, ""Open closed and mixed networks of queues with different classes of customers"", J. Ass. Comput. Mach., vol. 22, Apr. 1975.||P. Brinch Hansen, ""Structured multiprogramming"", Commun. Ass. Comput. Mach., vol. 15, July 1972.||P. Brinch Hansen, ""Concurrent programming concepts"", Computing Surveys, vol. 5, Dec. 1973.||F. Commoner, ""Marked directed graphs"", J. Comput. Syst. Sci., vol. 5, 1971.||D. Ferrari, Computer Systems Performance Evaluation, NJ, Englewood Cliffs:Prentice-Hall, 1978.||R. W. Floyd, ""Algorithm 97 shortest path"", Commun. Ass. Comput. Mach., vol. 5, 1962.||K. P. Gostelow, Flow of control resource allocation and the proper termination of programs, Dec. 1971.||M. Hack, Decidability questions for Petri nets, Dec. 1975.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, Oct. 1974.||R. C. Holt, On deadlock in computer systems, Jan. 1971.||R. M. Karp and R. E. MiUler, ""Properties of a model for parallel computation: Determinacy termination queuing"", SIAM J. Appl. Math., vol. 14, Nov. 1966.||R. M. Karp, ""Reducibility among combinatorial problems"" in Complexity of Computer Computations, New York:Plenum, 1972.||Y. E. Lien, ""Termination properties of generalized Petri nets"", SIAM J. Comput., vol. 5, no. 2, June 1976.||T. Murata, ""Petri nets marked graphs and circuit-system theory"", Circuits Syst., vol. 11, June 1977.||J. L. Peterson, ""Petri nets"", Comput. Surveys, vol. 9, Sept. 1977.||J. B. Postel, A graph model analysis of computer communication protocols, Jan. 1974.||C. Ramchandani, Analysis of asynchronous concurrent systems by Petri nets, MA, Cambridge:M.I.T., 1974.||R. Reiter, ""Scheduling parallel computations"", J. Ass. Comput. Mach., vol. 15, Oct. 1968.||R. M. Russell, ""The CRAY-1 computer system"", Commun. Ass. Comput. Mach., vol. 21, Jan. 1978.||",Performance Evaluation of Asynchronous Concurrent Systems Using Petri Nets
"R.R. Oldehoeft&&Department of Mathematics, Arizona State University, Tempe, AZ, USA|","Software science techniques have been used to provide a framework for evaluation of problem solving systems. In that effort, two methods for calculating the level of a language (L and L̂) were used, it was suspected that L̂, while adequate in that application, might be inferior to L. By using a set of hypothetical languagesj each with different intrinsic data structures and operators, it is shown here that when an inappropriate language is applied to some problems, L̂ may reflect an inaccurately large value for language level, and can sometimes be made to yield an arbitrary value. Since L is often as easily applied as L, and does not exhibit this anomalous behavior, it is suggested that its general use is to be preferred.",10.1109/TSE.1977.231177,IEEE Transactions on Software Engineering,"Computer languages,Problem-solving,Data structures,Frequency measurement,Software systems,Software measurement,Software algorithms,Mathematics,Natural languages","N. Bulut, M. H. Halstead and R. Bayer, ""Experimental validation of a structural property of FORTRAN algorithms"", Proc. ACM Nat. Conf., pp. 207-211, 1974.||M. H. Halstead and R. Bayer, Algorithm dynamics, 1972.||M. H. Halstead and P. M. Zislis, Experimental verification of two theorems of software physics, 1973.||M. H. Halstead, ""Toward a theoretical basis for estimating programming effort"", Proc. ACM Nat. Conf., pp. 222-224, 1975.||L. R. Symes and R. R. Oldehoeft, ""Context of problem solving systems"", IEEE Trans. Software Eng., vol. SE-3, pp. 306-309, July 1977.||",A Contrast Between Language Level Measures
"N. Roussopoulos&&Department of Computer Science, University of Texas, Austin, Austin, TX, USA|","A language to support the incremental design of the conceptual schemata of data bases is presented. Abstractions are expressed in terms of high-evel constructs and operations on these abstractions allow the definition of other abstractions. Both abstractions and operations on them are totally independent from the underlying internal representation of the schema, which is created consistently by applying the operators of the language. In addition, the language offers a. number of support facilities for type checking of relationships and graphical displays of the conceptual schemata for easier understanding.",10.1109/TSE.1979.234209,IEEE Transactions on Software Engineering,"Application software,Organizing,Displays,Military computing,Artificial intelligence,Data structures,Instruction sets,Information systems","J. R. Abrial, ""Data semantics"" in Data Management Systems, The Netherlands, Amsterdam:North Holland, 1974.||S. K. Chang and W. H. Cheng, ""Database skeleton and its applications to logical database synthesis"", IEEE Trans. Software Eng., vol. SE-4, pp. 18-30, Jan. 1978.||H. B. Enderton, A Mathematical Introduction to Logic, New York:Academic Press, 1972.||C. Fillmore, ""The case for case"" in Universals in Linguistic Theory, IL, Chicago:Holt, Rinehart and Winston, 1968.||J. J. Florentin, ""Consistency auditing of databases"", Comput. J., vol. 17, no. 1, 1974.||D. Gries and N. Gehani, ""Some ideas on data types in high level languages"", Commun. Assoc. Comput. Mach., vol. 20, no. 8, 1977.||J. V. Guttag, ""Abstract data types and the development of data structures"", Commun. Assoc. Comput. Mach., vol. 20, no. 8, 1977.||B. H. Liskov, S. Snyder, R. Atkinson and C. Schaffert, ""Abstraction mechanisms in CLU"", Commun. Assoc. Comput. Mach., vol. 20, no. 8, 1977.||M. Minsky, ""Minsky's frame theory"", Proc. Theoretical Issues in Natural Language Processing Workshop, 1975.||J. Mylopoulos, P. A. Bernstein and H. K. T. Wong, ""A language facility for designing interactive database-Intensive applications"", Proc. ACM SIGMOD, 1978-June.||D. L. Parnas, ""A technique for the specification of software modules with examples"", Commun. Assoc. Comput. Mach., vol. 15, no. 5, 1973.||M. R. Quilian, ""Semantic memory"" in Semantic Information Processing, MA, Cambridge:MIT Press, 1968.||N. Roussopoulos and J. Mylopoulos, ""Using semantic networks for database management"", Proc. Ist Int. Conf. Very Large Databases, 1975-Sept.||N. Roussopoulos, A semantic network model of databases:.||R. F. Simmons, ""Semantic networks: Their computations and use for understanding English sentences"" in Computer Models of Thought and Language, CA, San Francisco:Freeman, 1973.||J. Sowa, ""Conceptual graphs for a database interface"", IBM J. Res. Develop., vol. 20, no. 4, July 1976.||D. Tsichritzis, Features of a conceptual scheme, July 1975.||T. Winograd, ""Frame representation and the declarative-procedural controversy"" in Representation and Understanding, New York:Academic, 1975.||",CSDL: A Conceptual Schema Definition Language for the Design of Data Base Applications
"I.T. Hawryszkiewycz&&School of Information Sciences, Canberra College of Advanced Education, Belconnen, ACT, Australia|","A system design method where the computer system is adapted to user semantics is described. In the method, user semantics are defined as abstract objects using special languages. Both user data semantics and user operations are defined. A translator converts the abstract definitions into internal machine storage representation and machine instructions. Users can then include the defined operations in user programs. Execution of the user operations transforms the internal state consistently with the definition of the operations.",10.1109/TSE.1983.237025,IEEE Transactions on Software Engineering,"Design methodology,Adaptive systems,Data structures,Data models,Databases,Computer interfaces,Computer architecture,Software design,Computer aided instruction,Computer science education","R. Abrial, ""Data semantics"" in Data Base Management, Amsterdam:North-Holland, 1974.||J. A. Bubenko, ""Information modelling in the context of system development"", Information Processing 80, 1980.||D. L. Childs, ""Description of a set theoretic data structure"", Proceedings AFIPS 1968 FJCC, vol. 3, pp. 557-564, 1968.||I. T. Hawryszkiewycz, The semantics of data base systems, Dec. 1973.||I. T. Hawryszkiewycz, ""Alternate implementations of the conceptual schema"", Inform. Syst., vol. 5, no. 3, pp. 203-217, 1980.||G. M. Nijssen, ""A gross architecture for the next generation of database management systems"" in Modelling in Data Base Management Systems, Amsterdam:North-Holland, pp. 1-24, 1976.||F. Steyer, ""A uniform formal description of data base management systems"", Inform. Syst., vol. 5, no. 2, pp. 127-135, 1980.||D. Tsichritzis and A. Klug, The ANSI/X3/SPARC DBMS framework report of the study group or database management systems, vol. 3, pp. 173-192, 1978.||M. Weber, ""A semantic model of integrity constraints on a relational data base"" in Modelling in Data Base Management Systems, Amsterdam:North-Holland, pp. 269-292, 1976.||P. Wegner, ""The Vienna definition language"", ACM Comput. Surveys, vol. 4, pp. 5-63, Mar. 1972.||",A Semantic Design Method
"Y.H. Chin&&Department of Computer and Information Science, Cleveland State University, Cleveland, OH, USA|","Due to subsequent insertion and deletion, the performance of a file will decline as time goes by. In order to maintain a fast response time at the expense of storage space, a technique commonly known as ""within distributed free space"" has been developed and used in many access methods. In this paper, a procedure to determine and preallocate the size of ""within distributed free space"" is presented. The optimal block size for a data storage area, which minimizes the CPU operations and I/O interruptions, is also described.",10.1109/TSE.1978.233863,IEEE Transactions on Software Engineering,"Environmental management,Delay,Memory,Mathematical model,Information science,System performance,Cost function,System testing","S. R. Arora and A. Gallos, ""Optimization of static loading and sizing of multilevel memory systems"", J. Ass. Comput. Mach., vol. 20, pp. 307-319, Apr. 1973.||J. M. Babad, V. Balachandran and E. A. Stohr, ""Management of program storage in computer"", Management Sci., vol. 23, pp. 380-390, Dec. 1976.||R. Bayer and E. McCreight, ""Organization and maintenance. of large ordered indexes"", Acta Informatica, vol. 1, pp. 173-189, 1972.||Y. H. Chin, J. W. Jou, W. H. Peng and C. C. Yang, ""An automated chinese telephone directory"", Computer, pp. 49-54, May 1975.||P. J. Denning, ""Virtual memory"", Computing Surveys, vol. 2, pp. 153-189, Sept. 1970.||D. G. Keehn and J. O. Lacy, ""VSAM data set design parameters"", IBM Syst. J., vol. 13, pp. 186-212, 1974.||R. C. T. Lee, Y. H. Chin and S. C. Chang, ""Application of principal component analysis to multikey searching"", IEEE Trans. Software Eng., vol. SE-2, pp. 185-193, Sept. 1976.||V. Y. Lum, M. E. Senko, C. P. Wang and H. Ling, ""A cost oriented algorithm for data set allocation in storage hierarchies"", Commun. Ass. Comput. Mach., vol. 18, pp. 318-322, June 1975.||K. Maruyama and S. E. Smith, ""Optimal reorganization of distributed space disk files"", Commun. Ass. Comput. Mach., vol. 19, pp. 634-642, Nov. 1976.||P. L. Meyer, Introductory Probability and Statistical Applications, MA, Reading:Addison-Wesley, pp. 61-63, 1965.||J. R. Slagle, C. L. Chang and R. C. T. Lee, ""Experiments with some cluster analysis algorithms"", Pattern Recognition, vol. 6, pp. 181-188, 1974.||","An Analysis of ""Distributed Free Space"" in an Operating and Data Management Systems Environment"
"A.D. Birrell&&Xerox Palo Alto Research Center, Palo Alto, CA, USA|R.M. Needham&&Computer Laboratory, University of Cambridge, Cambridge, UK|","A file server is a utility provided in a computer connected via a local communications network to a number of other computer. File servers exist to preserve material for the benefit of client machines or systems. It is desirable for a file server to be able to support multiple file directory and access management systems, so that the designer of a client system retains the freedom to design the system that best suits him. For example, he may wish to use the rile server to support a predefimed directory structure or as a swapping disk. The paper explores the dedgn issues associated with such a file server and proposes some solutions.",10.1109/TSE.1980.230493,IEEE Transactions on Software Engineering,"File servers,Network servers,Time sharing computer systems,Computer networks,Communication networks,Laboratories,Access control,Distributed control,Communication system control,Control systems","R. M. Needham and A. D. Birrell, ""The CAP flling system"", 6th Symp. on Oper. Syst. Principles, 1977.||A. D. Birrell and R. M. Needham, ""An asynchronous garbage collector for the CAP filng system"", Oper. Syst. Rev., Apr. 1978.||D. M. Ritchie and K. Thompson, ""The UNIX time-sharing system"", Commun. Ass. Comput. Mach., July 1974.||D. D. Redell, Naming and protection in extensible operating systems, 1974.||H. Dewar, V. Eachus, K. Humphry and P. McLellan, The file‑store, Dep. Comput. Sci., Univ. Edinburgh, Oct. 1977.||J. Israel, J. Mitchell and H. Sturgis, ""Separating data from function in a distributed file system"", Proc. 2nd Int. Symp. Oper. Syst., 1978-Oct.||",A Universal File Server
"R.R. Oldehoeft&&Department of Computer Science, Colorado State University, Fort Collins, CO, USA|L.J. Bass&&Department of Computer Science and Experimental Statistics, University of Rhode Island, Kingston, RI, USA|","Two disciplines have been developed during the past few years for the study of computer software. Software physics has as its purpose the analysis of execution characteristics of programs. Basic measures of software work, time, and shortage occupancy are used to derive measures such as power, capacity usage, and storage work, with applications to the choice of processor and device speeds. Software science is related to information theory. Occurrences of operators and operands in the text of programs are counted to provide measures for a number of relationships; among them are estimates for program length, program and language level, and programming time.",10.1109/TSE.1979.234210,IEEE Transactions on Software Engineering,"Application software,Time measurement,Physics,Software measurement,Additives,Software performance,Power measurement,Velocity measurement,Computer science,Tellurium","R. Chevance and T. Heidet, ""Static profile and dynamic behavior of COBOL programs"", SIGPLAN Notices, vol. 13, pp. 44-57, Apr. 1978.||A. Fitzsimmons and T. Love, ""A review and evaluation of software science"", Computing Surveys, vol. 10, pp. 3-18, Mar. 1978.||M. Halstead, Elements of Software Science, New York:Elsevier, 1977.||L. Hellerman, ""A table of work formulae with derivation and application"", Performance Evaluation Review, vol. 6, pp. 34-54, 1977.||D. Knuth, ""An empirical study of FORTRAN programs"", Software Practice and Experience, vol. 1, pp. 105-133, 1971.||K. Kolence, An Introduction to Software Physics, CA, Palo Alto:Institute for Software Engineering, 1976.||",Dynamic Software Science with Applications
"E.D. Carlson&&IBM Research Laboratory, San Jose, CA, USA|J.R. Rhyne&&IBM Research Laboratory, San Jose, CA, USA|D.L. Weller&&IBM Research Laboratory, San Jose, CA, USA|","Display management software usually provides support for: creating displays on a CRT (cathode ray tube) or other output device; handling user inputs from keyboards, light-pens, and other input devices; and communicating with an application program in terms of these outputs and inputs. We propose a design for a family of display management systems which provide device-independent, high-level support for applications programming. The design involves structuring the display management software as a set of modules, with three levels of interfaces. The key features of this design include: 1) separation of display specifications from the actual data to be displayed; 2) structured output and input specifications; 3) asynchronous, message passing inter-faces; and 4) a software structure based on hiding details of data structures, algorithms and device orders.",10.1109/TSE.1983.237026,IEEE Transactions on Software Engineering,"Displays,Engineering management,Keyboards,Cathode ray tubes,Application software,Graphics,Software engineering,Laboratories,Communication system software,Algorithm design and analysis",,Software Structure for Display Management Systems
"R.C.T. Lee&&Institute of Computer and Decision Sciences, National Tsing Hua University, Hsinchu, Taiwan|J.R. Slagie&&unknow|C.T. Mong&&Air Force Cadet School, Taiwan|","We computer scientists face at least two problems in promoting the use of computerized data-base systems: 1) some important data might be missing; 2) there might be errors in the data. Both of these problems can be quite serious. If they cannot be solved, it will be quite hard to convince potential users that computerized information systems are useful.",10.1109/TSE.1978.225939,IEEE Transactions on Software Engineering,"Books,Computer errors,Sorting,Remuneration,Laboratories,Clustering methods,Error correction,Information systems,Data analysis,Hamming distance","C. L. Chang, ""Finding prototypes for nearest neighbor classifiers"", IEEE TPans. Comput., vol. C-23, pp. 1179-1184, Nov. 1974.||R. Duda and P. Hart, Pattern Cassification and Scene Analysis, New York:Wiley-Interscience, 1973.||S. A. Dudani, ""The distance-weighted K-nearest-neighbor rule"", IEEE Trans. Syst. Man Cybern., vol. SMC-6, pp. 325-327, Apr. 1976.||I. P. Fefligi and D. Holt, ""A systematic approach to automatic editing and imputation"", J. Amer. Stat. Ass., pp. 17-35, Mar. 1976.||R. A. Fisher, ""The use of multiple measurements in taxonomic problems"", Ann. Eugen., pp. 179-188, 1936.||R. J. Freud and H. O. Hartley, ""A procedure for automatic data editing"", J. Amer. Stat. Ass., pp. 341-352, June 1967.||J. Hartigan, ClusteringAnalysis, New York:McGraw-Hill, 1975.||R. C. T. Lee and T. T. Dang, ""Clustering with merging for large input data"", Proc. National Computer Symp. Republic of China, pp. 4-1-4-18, 1976.||W. S. Meisel, Computer-Oriented Approaches to Pattern Recognition, New York:Academic, 1972.||J. I. Naus, T. G. Johnson and R. Montalvo, ""A probabilistic model for identifying errors and data editing"", J. Amer. Stat. Ass., pp. 343-350, Dec. 1972.||C. W. Skinner, ""A heuristic approach to inductive inference in fact retrieval systems"", Commun. Ass. Comput. Mach., vol. 17, pp. 707-712, Dec. 1974.||J. R. Slagle, C. L. Chang and R. C. T. Lee, ""Experiments with some cluster analysis algorithms"", Pattern Recognition, vol. 6, pp. 181-187, 1974.||J. R. Slagle, C. L. Chang and S. Helier, ""A clustering and data‑reorganizing algorithm"", IEEE Trans. Syst. Man Cybern., vol. SMC-5, pp. 125-128, Jan. 1975.||",Towards Automatic Auditing of Records
"V.R. Basili&&Department of Computer Science, University of Maryland, College Park, MD, USA|R.E. Noonan&&Department of Mathematics and Computer Science, College of William and Mary, Williamsburg, VA, USA|","This paper discusses axiomatic and functional models of the semantics of structured programming. The models are presented together with their respective methodologies for proving program correctness and for deriving correct programs. Examples using these methodologies are given. Finally, the models are compared and contrasted.",10.1109/TSE.1980.230494,IEEE Transactions on Software Engineering,"Functional programming,Milling machines,Computer languages,Computer science,Programming profession,Guidelines,Flowcharts,Mathematics,Mathematical model","A. Blide, ""An analytical approach to the verification of iterative programs"", Inform. Processing 77, pp. 285-290, 1977.||E. W. Dijkstra, A Discipline of Programming. Englewood Cliffs, NJ:Prentice-Hall, 1976.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. Appl. Math., vol. 19, pp. 19-32, 1967.||J. S. Gishen and R. E. Noonan, ""Toward a methodology for the formal derivation of programs"", IEEE Trans. Software Eng..||S. L. Hantler and J. C. King, ""An introduction to proving the correctness of programs"", Comput. Surveys, vol. 8, pp. 331-353, Sept. 1976.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", CACM, vol. 12, pp. 576-583, Oct. 1969.||C. A. R. Hoare, ""Procedures and Parameters"", An Axiomatic Approach in Symposium on the Semantics of Algorithmic Languages, pp. 102-116, 1971.||H. D. Mills, Mathematical foundations for structured programming, IBM Fed. Syst Div., 1972.||H. D. Mills, ""The new math of computer programming"", CACM, vol. 18, Jan. 1975.||J. Misra, ""Some aspects of the verification of loop computations"", IEEE Trans Software Eng., vol. SE-4, pp. 478-486, Nov. 1978.||J. H. Morris and B. Wegbreit, ""Subgoal induction"", CACM, vol. 20, pp. 209-222, Apr. 1977.||B. Wegbreit, ""The synthesis of loop predicates"", CACM, vol. 17, pp. 102-112, Feb. 1974.||",A Comparison of the Axiomatic and Functional Models of Structured Programming
"L.M. Ottenstein&&Department of Mathematical and Computer Sciences, Michigan Technological University, Houghton, MI, USA|","A major portion of the problems associated with software development might be blamed on the lack of appropriate tools to aid in the planning and testing phases of software projects. As one step towards solving this problem, this paper presents a model to estimate the number of bugs remaining in a system at the beginning of the testing and integration phases of development. The model, based on software science metrics, was tested using data currently available in the literature. Extensions to the model are also presented which can be used to obtain such estimates as the expected amount of personnel and computer time required for project validation.",10.1109/TSE.1979.234211,IEEE Transactions on Software Engineering,"Debugging,Computer science,Mathematics,Phase estimation,Computer bugs,Personnel,Software systems,Machinery,Software testing,Processor scheduling","F. Akiyama, ""An example of software system debugging"", Proc. IFIP Congr., 1971.||D. E. Bell and J. E. Sullivan, Further investigations into the complexity of software, vol. II, June 30.||B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, vol. 19, pp. 48-59, May 1973.||A. B. Fitzsimmons, ""Relating the presence of software errors to the theory of software science"", 11th Hawaii Int. Conf. of Systems Sciences, 1978-Jan.||Y. Funami and M. H. Halstead, ""A software physics analysis of Akiyama's debugging data"", Proc. Microwave Research Institute XXIV Int. Symp.: Computer Software Engineering, 1976.||R. D. Gordon, A measurement of mental effort related to program clarity, Aug. 1977.||R. D. Gordon, Measuring improvements in program clarity, Purdue Univ., May 1978.||R. D. Gordon and M. H Halstead, ""An experiment comparing FORTRAN programming time with the software physics hypothesis"", Proc. NCC, pp. 935-937, 1976.||J. D. Gould, ""Some psychological evidence on how people debug computer programs"", Int. J. Man-Machine Studies, vol. 7, pp. 151-182, 1975.||J. D. Gould and P. Drongowski, A controlled psychological study of computer program debugging, 1972.||M. H. Halstead, ""Towards a theoretical basis for estimating programming effort"", Proc. ACM 75, pp. 222-224, 1975-Oct.-20-22.||M. H. Halstead, Elements of Software Science, New York:Elsevier, 1977.||W. J. Hansen, ""Measurement of program complexity by the pair (cyclomatic number operator count)"", ACM SIGPLAN Notices, vol. 13, pp. 29-33, Mar. 1978.||R. K. Klobert, ""Calculation of error proneness of computer programs"", Proc. AIAA/NASA/IEEE/ACM Computers in Aerospace Conf., pp. 422-426, 1977-Nov.-2.||M. Lipow and T. A. Thayer, ""Prediction of software failures"", Proc. 1977 Annu. Reliability and Maintainability Symp., 1977-Jan.-18-20.||L. T. Love and A. B. Bowman, ""An independent test of the theory of software physics"", ACM SIGPLAN Notices, vol. 11, pp. 42-49, Nov. 1976.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||G. A. Miller, ""The magical number seven plus or minus two"", Psychological Rev., pp. 311-329, 1956.||R. W. Motley and W. D. Brooks, Statistical prediction of programming errors, May 1977.||J. D. Musa, ""A theory of software reliability and its application"", IEEE Trans. Software Eng., vol. SE-1, pp. 312-327, Sept. 1975.||J. D. Musa, ""Measuring software reliability"", Proc. TIMS-ORSA Joint Nat. Meeting, 1977-May-9-11.||G. J. Myers, ""An extension to the cyclomatic measure of program complexity"", ACM SIGPLAN Notices, vol. 12, pp. 61-64, Oct. 1977.||L. M. Ottenstein, Predicting parameters of the software validation effort, Aug. 1978.||N. F. Schneidewind, ""Analysis oferror processes in computer software"", Proc. 1975 Int. Conf. Reliable Software, 1975-Apr.-21-23.||ACM SIGPLAN Notices, vol. 10, pp. 337-346, June 1975.||N. F. Schneidewind and H. M. Hoffman, ""Software structure and error properties: Models vs. real programs"", Proc. TIMS-ORSA Joint Nat. Meeting, 1977-May-9-11.||N. F. Schneidewind, ""An experiment in software error data collection and analysis"", Proc. 6th Texas Conf. Computing Systems, 1977-Nov.-14-15.||M. L. Shooman, ""Operational testing and software reliability estimation during program development"", Proc. IEEE Symp. Computer Software Reliability, pp. 51-57, 1973-May-2.||M. L. Shooman, ""Structured models for software reliability prediction"", Proc. 1976 IEEE 2nd Int. Conf. Software Eng., pp. 268-280, 1976-Oct.-13-15.||M. L. Shooman and M. I. Bolsky, ""Types distributions and test and correction times for programming errors"", Proc. 1975 Int. Conf. Reliable Software, 1975-Apr.-21-23.||ACM SIGPLAN Notices, vol. 10, pp. 347-357, June 1975.||H. A. Simon, ""How big is a chunk?"", Science, vol. 183 (4124), pp. 482-488, Feb. 1974.||A. N. Sukert, A software reliability modeling study, Aug. 1976.||J. E. Sullivan, Measuring the complexity of computer software, vol. V, June 1973.||T. A. Thayer, ""Understanding software through empirical reliability analysis"", AFIPS Conf. Proc., vol. 44, pp. 335-341, 1975.||T. A. Thayer, Software reliability study, Aug. 1976.||R. W. Wolverton, ""The cost of developing large-scale software"", IEEE Trans. Comput., vol. C-28, pp. 615-636, June 1974.||M. V. Zelkowitz, ""Perspectives on software engineering"", ACM Computing Surveys, vol. 10, no. 2, June 1978.||",Quantitative Estimates of Debugging Requirements
"J.R. White&&Xerox Palo Alto Research Center, Palo Alto, CA, USA|","A fundamental step in the software design process is the selection of a refinement (implementation) for a data abstraction. This step traditionally involves investigating the expected performance of a system under different refinements of an abstraction and then selecting a single alternative which minimizes some performance cost metric. In this paper we reformulate this design step to allow different refinements of the same data abstraction within a computation. This reformulation reflects the fact that the implementation appropriate for a data abstraction is dependent on the behavior exhibited by the objects of the abstraction. Since this behavior can vary among the objects of a computation, a single refinement is often inappropriate. Accordingly, three frameworks are presented for understanding and representing variations in the behavior of objects and, thus, the potential for multiple implementations. The three frameworks are based upon: 1) a static partitioning of objects into disjoint implementation classes; 2) static partitioning of classes into implementation regions; and 3) dynamic partitioning of classes into implementation regions. These frameworks and analytic tools useful in investigating expected performance under multiple implementations are described in detail.",10.1109/TSE.1983.234776,IEEE Transactions on Software Engineering,"Software design,Design methodology,Performance analysis,Costs,Software engineering,Software systems,Encapsulation,Software maintenance,Packaging,Computer science","B. H. Liskov and S. N. Zilles, ""Programming with abstract data types"", SIGPLAN Notices, vol. 9, pp. 50-59, Apr. 1974.||B. H. Liskov, A. Snyder, R. Atkinson and C. Shaffert, ""Abstraction mechanisms in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-576, Aug. 1977.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of ALPHARD programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, Dec. 1976.||""Proceedings of a conference on data: Abstraction definition and structure"", SIGPLAN Notices, vol. 11, 1976-Mar.||J. H. Morris, ""Types are not sets"", Conf. Rec. ACM Symp. Principles ofProgramming Language, pp. 120-124, 1973-Oct.||T. A. Linden, ""The use of abstract data types of simplify program modifications"", Proc. Conf. Data: Abstraction Definition and Structure SIGPLAN Notices (special issue), vol. 11, pp. 12-23, 1976-Mar.||A. K. Jones and B. H. Liskov, ""A language extension for controlling access to shared data"", IEEE Trans. Software Eng., vol. SE-2, pp. 277-285, Dec. 1976.||P. Brinch Hansen, ""The programming language concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||J. Gannon, P. McMullin and R. Hamlet, ""Data-abstraction implementation specification and testing"", ACM Trans. Programming Language Syst., vol. 3, no. 3, pp. 211-223, July 1981.||N. Wirth, ""Modula: A programming language for modular multiprogramming"", Software-Practice and Experience, vol. 7, pp. 3-35, Mar.-Apr. 1977.||L. Flon, Program design with abstract data types, June 1975.||E. W. Dijkstra, ""Notes on structured programming"" in Structured Programming, New York:Academic, pp. 1-82, 1972.||B. H. Liskov, ""A design methodology for reliable software stytems"", Proc. AFIPS FJCC, pp. 191-199, 1972.||N. Wirth, ""Program development by step-wise refinement"", Commun. Ass. Comput. Mach., vol. 14, pp. 221-227, Apr. 1971.||J. R. Low, ""Automatic data structure selection: An example and overview"", Commun. Ass. Comput. Mach., vol. 21, pp. 376-385, May 1978.||E. Kant and D. Barstow, ""The refinement paradigm: The interaction of coding and efficiency knowledge in program synthesis"", IEEE Trans. Software Eng., vol. SE-7, pp. 458-471, Sept. 1981.||R. B. K. Dewar, ""Programming by refinement as exemplified by the SETL representation sublanguage"", ACM Trans. Programming Language Syst., vol. 1, no. 1, pp. 27-49, July 1979.||E. Schonberg, J. T. Schwartz and M. Sharir, ""An automatic technique for selection of data representations in SETL programs"", ACM Trans. Programming Language Syst., vol. 3, pp. 126-143, Apr. 1981.||R. W. Sheifler, ""An analysis of incline substitution for a structured programming language"", Commun. Ass. Comput. Mach., vol. 20, pp. 647-654, Sept. 1977.||B. H. Liskov, Multiple implementations of a type, MIT Project MAC, 1975.||T. L. Booth, ""Performance optimization of software systems processing information sequences modeled by probabilistic languages"", IEEE Trans. Software Eng., vol. SE-5, pp. 31-44, Jan. 1979.||J. R. White and T. L. Booth, ""Towards an engineering approach to software design"", Proc. 2nd Int. Conf. Software Eng., pp. 214-222, 1976-Oct.||T. J. Gilkey, J. R. White and T. L. Booth, ""Performance analysis as a software design tool"", Proc. COMPSAC 77, pp. 428-434, 1977-Nov.||T. L. Booth and C. A. Weicek, ""Performance abstract data types as a tool in software performance analysis design"", IEEE Trans. Software Eng., vol. SE-6, no. 2, pp. 138-15 1, Mar. 1980.||J. B. Dennis, Notes on computation structures, MA, Cambridge:M.I.T., 1969.||H. A. Sholl and T. L. Booth, ""Software performance modeling using computation structures"", IEEE Trans. Software Eng., vol. SE-1, pp. 414-420, Dec. 1975.||T. L. Booth and R. A. Thompson, ""Applying probability measures to abstract languages"", IEEE Trans. Comput., vol. C-22, pp. 442-449, May 1973.||T. L. Booth, ""Design of minimal expected processing time finite‑state transducers"" in Information Processing-74, The Netherlands, Amsterdam:North-Holland, 1974.||F. J. Maryanski and T. L. Booth, ""Inference of finite-state probabilistic grammars"", IEEE Trans. Comput., vol. C-26, pp. 521-536, June 1977.||H. J. Cohen, Software development measurement laboratory, June 1978.||T. L. Booth and R. Gauthier, Optimization of page organization using probabilistic performance modeling techniques, Nov. 1977.||T. L. Booth and C. Whitby-Strevens, ""Performance modelling of distributed systems using probabilistic computation structures"" in Measuring Modelling and Evaluating Computer Systems, London:North-Holland, 1977.||T. J. Gilkey, Optimal design of software systems with incomplete performance information, 1979.||T. L. Booth, ""Estimation prediction and smoothing in discrete parameter systems"", IEEE Trans. Comput., vol. C-19, pp. 1193-1230, 1970.||Reference Manual for the Ada Programming Language, DC, Washington:Dep. Defense, July 1980.||T. T. Wetmore, The performance compiler: A tool for software design, Jan. 1980.||R. Ammar, Interactive grammatical inference, June 1981.||J. R. White, ""A decision tool for assisting with the comprehension of large software systems"" in Automated Tools for Information Systems Design, Amsterdam:North-Holland, 1982.||K. Yetongnon, A model and tool for making and recording software design decisions.||",On the Multiple Implementation of Abstract Data Types Within a Computation
"R.B. Kieburtz&&Department of Computer Science, State University of New York, Stony Brook, Stony Brook, NY, USA|A. Silberschatz&&University of Texas, Dallas, Richardson, TX, USA|","The use of capabilities to control the access of component programs to resources in an operating system is an attractive means by which to provide a uniform protection mechanism. In this paper, a capability is defined as an abstract encapsulation of the data needed to define access to a protected object. We do not assume that capability checking is necessarily concentrated in a protection kernel, nor that capabilities to different types of objects are all of the same degree of complexity. We explore a language-based capability mechanism in which protection environments are established by declaration, enforcement protocols are automatically produced by a compiler, and access control policy is clearly placed in the hands of the system designer. The basic mechanism introduced is a program component called a capability manager that is an extension of the monitor concept. It can be used to realize most of the facilities associated with kernel-based capabilities, including preemptive revocation.",10.1109/TSE.1978.233870,IEEE Transactions on Software Engineering,"Protection,Access control,Control systems,Monitoring,Operating systems,Access protocols,Resource management,Computer languages,Virtual machining,Encapsulation","P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, 1973.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||W. Wulf, ""HYDRA: The kernel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, pp. 337-345, June 1974.||D. D. Redell, Naming and protection in extendible operating systems, 1974.||K. Ekanadham, A context approach to protection, 1976.||J. B. Dennis and E. C. Van Horn, ""Programming semantics for multiprogrammed computations"", Commun. Ass. Comput. Mach., vol. 9, pp. 143-155, Mar. 1966.||B. W. Lampson, ""Dynamic protection structures"", 1969 Fall Joint Comput. Conf. AFIPS Conf. Proc., pp. 27-38.||A. K. Jones, Protection in programming systems, 1973.||J. H. Morris, ""Protection in programming languages"", Commun. Ass. Comput. Mach., vol. 16, pp. 15, Jan. 1973.||A. Silberschatz, R. B. Kieburtz and A. J. Bernstein, ""Extending Concurrent Pascal to allow dynamic resource management"", IEEE Trans. Software Eng., vol. SE-3, pp. 210-217, May 1977.||A. K. Jones and B. H. Liskov, ""A language extension for controlling access to data"", IEEE Trans. Software Eng., vol. SE-2, pp. 277-285, Dec. 1976.||J. H. Saltzer, ""Protection and the control of information sharing in multics"", Commun. Ass. Comput. Mach., vol. 17, pp. 388-402, July 1974.||P. Brinch Hansen, ""A comparison of two synchronizing concepts"", Acta Inform., vol. 1, no. 3, pp. 190-199, 1972.||P. J. Courtois, F. Heymans and D. L. Parnas, ""Concurrent control with 'Readers' and 'Writers"", Commun. Ass. Comput. Mach., vol. 14, pp. 667-668, Oct. 1971.||P. J. Courtois, F. Heymans and D. L. Parnas, ""Comments on 'A comparison of two synchronizing concepts"", Acta Inform., vol. 1, no. 4, pp. 375-376, 1972.||R. Conradi, ""Some comments on 'Concurrent Readers and Writers"", Acta Inform., vol. 8, no. 4, pp. 335-340, 1977.||P. Brinch Hansen, ""Distributed processes: A concurrent programming concept"", Commun. Ass Comput. Mach..||G. R. Andrews and J. R. McGraw, ""Language features for process interaction"", ACM Sigplan Notices, vol. 12, pp. 114-127, Mar. 1977.||",Capability Managers
"J.C. King&&IBM Research, San Jose, CA, USA|","A study of several of the proof of correctness methods is presented. In particular, the form of induction used is explored in detail. A relational semantic model for programming languages is introduced and its relation to predicate transformers is explored. A rather elementary viewpoint is taken in order to expose, as simply as possible, the basic differences of the methods and the underlying principles involved. These results were obtained by attempting to thoroughly understand the ""subgoal induction"" method.",10.1109/TSE.1980.230787,IEEE Transactions on Software Engineering,"Transformers,Artificial intelligence,Computer languages,Induction generators,Terminology,Displays","S. L. Hantler and J. C. King, ""Introduction to program correctness"", J. Assoc. Comput. Mach., vol. 8, pp. 331-353, Sept. 1976.||C. A. R. Hoare, ""An axiomatic approach to computer programming"", Commun. Assoc. Comput. Mach., vol. 12, pp. 576-583, Oct. 1969.||Z. Manna, ""Mathematical theory of partial correctness"", J. Comput. Syst. Sci., vol. 5, pp. 239-253, June 1971.||Z. Manna, S. Ness and J. Vuiemin, ""Inductive methods for proving properties of programs"", Proc. ACM Conf on Proving Assertions about Programs SIGPLAN Notices, vol. 7, pp. 27-50, 1972-Jan.||J. H. Morris and B. Wegbreit, ""Subgoal induction"", Commun. Assoc. Comput. Mach., vol. 20, pp. 209-222, Apr. 1977.||A. Mazurkiewicz, ""Proving algorithms by tail functions"", Inform. Contr., vol. 18, 1970.||",Program correctness: on inductive assertion methods
"C. Wetherell&&Computing Science Group, Department of Applied Science and the Lawrence Livermore Laboratory, University of California,슠Davis, Livermore, CA, USA|A. Shannon&&Lawrence Livermore Laboratory, Livermore, CA, USA|","Trees are extremely common data structures, both as internal objects and as models for program output. But it is unusual to see a program actually draw trees for visual inspection. Although part of the difficulty lies in programming graphics devices, most of the problem arises because naive algorithms to draw trees use too much drawing space and sophisticated algorithms are not obvious. We survey two naive tree drawers, formalize aesthetics for tidy trees, and descnbe two algorithms which draw tidy trees. One of the algorithms may be shown to require the minimum possible paper width. Along with the algorithms proper, we discuss the reasoning behind the algorithm development.",10.1109/TSE.1979.234212,IEEE Transactions on Software Engineering,"Tree graphs,Computer graphics,Laboratories,Programming profession,Printers,Data structures,Inspection,Binary trees,Tree data structures,Heuristic algorithms","R. S. Bird, ""Notes on recursion elimination"", Commun. Ass. Comput. Mach., vol. 20, pp. 434-439, June 1977.||PASCAL User Manual and Report: Lecture Notes in Computer Science, 1974.||D. E. Knuth, ""Optimum binary search trees"", Acta Informatica, vol. 1, pp. 14-25, 1971.||D. E. Knuth, The Art of Computer Programming/Fundamental Algorithms, MA, Reading:Addison-Wesley, 1968.||S. Soule, ""A note on the nonrecursive traversal of binary trees"", Comput. J., vol. 20, no. 4, pp. 350-352, 1977.||R. Sweet, Empirical estimates of program entropy, 1977.||",Tidy Drawings of Trees
"I.V. Ramakrishnan&&Department of Computer Science, University of Texas, Austin, Austin, TX, USA|J.C. Browne&&Department of Computer Science, University of Texas, Austin, Austin, TX, USA|","This paper proposes a model or paradigm for the development of parallel algorithms, gives an example of the proposed paradigm, and displays algorithms developed by application of the technique. The algorithm for the merge of two ordered lists developed through application of this technique is thought to be original. The paradigm proposed is to create composite unit operations which combine data movement between data structures with a conventional operation such as compare or add. The composite operation constructed for this study is based upon partitioning the data elements into two linear lists. Exchange of data between adjacent elements in each list are then combined with compares and adds to complete the composite operations. This composite operation can be implemented on at least the following computational architectures.",10.1109/TSE.1983.234777,IEEE Transactions on Software Engineering,"Algorithm design and analysis,Parallel algorithms,Parallel processing,Costs,Data structures,Computer architecture,Sorting,Concurrent computing,Computer networks,Merging","M. J. Flynn, ""Very high speed computing systems"", Proc. IEEE, vol. 54, pp. 1901-1909, 1976-Dec.||D. S. Hirschberg, ""Fast parallel sorting algorithms"", Commun. Ass. Comput. Mach., vol. 21, no. 8, pp. 657-661, Aug. 1978.||H. T. Kung, ""Let's design algorithms for VLSI systems"", Conf. Very Large Scale Integration: Arch. Des. Fabrication, 1979-Jan.-22-24.||H. T. Kung, ""The structure of parallel algorithms"" in Advances in Computers, New York:Academic, vol. 19.||K. Levitt and W. Kautz, ""Cellular arrays for the solution of graph problems"", Commun. Ass. Comput. Mach., vol. 15, no. 9, pp. 789-801, Sept. 1972.||C. A. Mead and L. A. Conway, Introduction to VLSI Systems, MA, Reading:Addison-Wesley, 1979.||I. V. Ramakrishnan and J. C. Browne, Merging on cyclically‑interconnected processors, May 1980.||C. D. Thompson and H. T. Kung, ""Sorting on a mesh-connected parallel computer"", Commun. Ass. Comput. Mach., vol. 20, no. 4, pp. 263-271, Apr. 1977.||F. L. Van Scoy, ""The parallel recognition of classes of graphs"", IEEE Trans. Comput., vol. C-29, pp. 563-570, July 1980.||S. Sahni and E. Horowitz, Fundamentals of Computer Algorithms, MD, Baltimore:Comput. Sd. Press, 1978.||B. S. Lint and T. Agarwala, ""Communications issues in the design and analysis of parallel algorithms"", IEEE Trans. Software Eng., vol. SE-7, pp. 174-188, 1981.||",A Paradigm for the Design of Parallel Algorithms with Applications
"J. Misra&&Department of Computer Science, University of Texas, Austin, Austin, TX, USA|","The problem of proving whether or not a loop computes a given function is investigated. We consider loops which have a certain ""closure"" property and derive necessary and sufficient conditions for such a loop to compute a given function. It is argued that closure is a fundamental concept in program proving. Extensions of the basic result to proofs involving relations other than functional relations, which typically arise in nondeterministic loops, are explored. Several applications of these results are given, particularly in showing that certain classes of programs may be directly proven (their loop invariants generated) given only their input-output relationships. Implications of these results are discussed.",10.1109/TSE.1978.233871,IEEE Transactions on Software Engineering,"Sufficient conditions,Military computing,Milling machines,Production,Contracts,Computer science","S. Basu and J. Misra, ""Proving loop programs"", IEEE Trans. Software Eng., vol. SE-1, pp. 76-86, Mar. 1975.||S. Basu and J. Misra, ""Some classes of naturally provable programs"", Proc. 2nd Int. Conf. on Software Eng., 1976-Oct.||R. Boyer and J. S. Moore, ""Proving theorems about LISP functions"", J. Ass. Comput. Mach., vol. 22, pp. 129-144, Jan. 1975.||M. Caplain, ""Finding invariant assertion for proving programs"", Proc. Int. Conf. on Reliable Software, 1975-Apr.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||O. J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||L. P. Deutsch, An interactive program verifier, June 1973.||B. Elspas, K. N. Levitt and R. J. Waldinger, An interactive system for the verification of computer programs, Sept. 1973.||B. Elspas, The semiautomatic generation of inductive assertions for proving program correctness, July 1974.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. on Applied Math., vol. 19, pp. 19-32, 1967.||D. I. Good, R. L. London and W. W. Beldsoe, ""An interactive program verification system"", Int. Conf. on Reliable Software, 1975-Apr.||S. M. German, A program verifier that generates inductive assertions, May 1974.||I. Greif and R. Waldinger, ""A more mechanical heuristic approach to program verification"", Proc. Int. Symp. on Programming, pp. 83-90, 1974-Apr.||C. A. R. Hoare, ""An axiomatic basis of computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||S. Igarashi, R. L. London and D. C. Luckham, Automatic program verification AIM-200, CA, Stanford:Stanford Univ., 1972.||S. M. Katz and Z. Manna, ""Logical analysis of programs"", Commun. Ass. Comput. Mach., vol. 19, pp. 188-206, Apr. 1976.||R. L. London, ""A view of program verification"", Proc. Int. Conf. on Reliable Software, 1975-Apr.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||H. D. Mills, ""The new math of computer programming"", Commun. Ass. Comput. Mach., vol. 18, pp. 43-48, Jan. 1975.||J. Misra, ""Prospects and limitations of automatic assertion generation for loop programs"", SIAM J. Comput., Dec. 1977.||||M. S. Moriconi, Towards the interactive synthesis of assertions, Oct. 1974.||J. H. Morris and B. Wegbreit, ""Subgoal induction"", Commun. Ass. Comput. Mach., vol. 20, Apr. 1977.||R. W. Topor, Interactive program verification using virtual programs, 1975.||B. Wegbreit, ""The synthesis of loop predicates"", Commun. Ass. Comput. Mach., vol. 17, pp. 102-112, Feb. 1974.||",Some Aspects of the Verification of Loop Computations
"J.C. Huang&&Department of Computer Science, University of Houston, Houston, TX, USA|","This paper describes a verification rule for loop programs, and shows how it can be used in conjunction with the invariant-relation theorem to facilitate verification of programs.",10.1109/TSE.1980.230788,IEEE Transactions on Software Engineering,Computer science,"S. K. Basu and R. T. Yeh, ""Strong verification of programs"", IEEE Trans. Software Eng., vol. SE-1, pp. 339-345, Sept. 1975.||R. Conway and D. Gries, An Introduction to Programming, MA, Cambridge:Winthrop, pp. 322-324, 1975.||E. W. Dikstra, ""Guarded commands nondeterminancy and formal derivation of programs"", Commun. ACM, vol. 18, pp. 453-457, Aug. 1975.||S. L. Gerhart, Knowledge about programs: A model and case study, 1975.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. ACM, vol. 12, pp. 576-580, Oct. 1969.||R. L. London, ""Perspectives on program verification"" in Current Trends in Programming Methodology Vol. II: Program Validation, NJ, Englewood Cliffs:Prentice-Hall, pp. 151-172, 1977.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||J. H. Morris and B. Wegbreit, ""Program verification by subgoal induction"" in Current Trends in Programming Methodology Vol. II: Program Validation, NJ, Englewood Cliffs:Prentice-Hall, pp. 197-227, 1977.||N. Wirth, Systematic Programming: An Introduction, NJ, Englewood Cliffs:Prentice-Hall, 1973.||R. T. Yeh, Current Trends in Programming Methodology Vol. II: Program Validation, NJ, Englewood Cliffs:Prentice‑Hall, 1977.||",A New Verification Rule and Its Applications
"S.C. Ntafos&&Department of Mathematical Sciences, University of Texas, Dallas, Richardson, TX, USA|S.L. Hakimi&&Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, IL, USA|","In this paper various path cover problems, arising in program testing, are discussed. Dilworth's theorem for acyclic digraphs is generalized. Two methods for fmding a minimum set of paths (minimum path cover) that covers the vertices (or the edges) of a digraph are given. To model interactions among code segments, the notions of required pairs and required paths are introduced. It is shown that rmding a minimum path cover for a set of required pairs is NP-hard. An efficient algorithm is given for findng a minimum path cover for a set of required paths. Other constrained path problems are contsidered and their complexities are discussed.",10.1109/TSE.1979.234213,IEEE Transactions on Software Engineering,"Software testing,Costs,Automatic testing","Proc. 1973 IEEE Symp. Computer Software Reliability, 1973.||B. W. Boehm, ""The high cost of software"" in Practical Strategies for Developing Large Software Systems, MA, Reading:Addison-Wesley, 1975.||K. A. Krause, R. W. Smith and M. A. Goodwin, ""Optimal software test planning through automated network analysis"", Proc. 1973 IEEE Symp. Computer Software Reliability, pp. 18-22, 1973.||E. F. Miler, M. R. Paige, J. P. Benson and W. R. Wisehart, ""Structural techniques of program validation"", Dig. COMPCON 1974, pp. 161-164, 1974-Feb.||R. P. Dilworth, ""A decomposition theorem for partially ordered sets"", Annals Math., vol. 51, no. 1, pp. 161-166, Jan. 1950.||H. N. Gabow, S. N. Maheshwari and L. J. Osterweil, ""On two problems in the generation of program test paths"", IEEE Trans. Software Eng., vol. SE-2, pp. 227-231, Sept. 1976.||L. D. Fosdich and L. J. Osterweil, ""Data flow analysis in software reliability"", ACM Computing Surveys, vol. 8, no. 3, pp. 305-330, 1976.||F. Harary, Graph Theory, MA, Reading:Addison-Wesley, 1969.||A. V. Aho, J. E. Hopcroft and J. D. Ullman, The Design and Analysis of Computer Algorithms, MA, Reading:Addison‑Wesley, 1974.||S. C. Ntafos, A graph theoretic approach to program testing, 1978.||S. Even, Algorithmic Combinatorics, New York:McMilan, 1973.||A. V. Karzanov, ""Determining the maximal flow in a network by the method of preflows"", Soviet Math. Dakl., vol. 15, no. 2, pp. 434-437, 1974.||L. R. Ford and D. R. Fulkerson, Flows in Networks, NJ, Princeton:Princeton Univ. Press,, 1962.||J. E. Hopcroft and R. M. Karp, ""An n5/2 algorithm for maximum matchings in bipartite graphs"", SIAM J. Computing, vol. 2, pp. 225-230, Dec. 1973.||I. Munro, ""Efficient determination of the transitive closure of a directed graph"", Inform. Process. Lett., vol. 1, pp. 56-58, 1971.||R. M. Karp and R. E. Miller, ""Reducibility among combinatorial problems"" in Complexity of Computer Computations, New York:Plenum, pp. 85-104, 1972.||R. M. Karp, ""On the computational complexity of combinatorial problems"", Networks, vol. 5, no. 1, pp. 45-68, 1975.||L. J. Osterweil, ""The detection of unexecutable program paths through static data flow analysis"", Proc. COMPSAC 77, pp. 405-413, 1977.||M. R. Paige, ""Program graphs an algebra and their implication for programming"", IEEE Trans. Software Eng., vol. SE-1, pp. 286-291, Sept. 1975.||",On Path Cover Problems in Digraphs and Applications to Program Testing
"W.E. Kluge&&Gesellschaft für Mathematick und Datenverarbeitung GmbH, Bonn, Germany|H. Schlutter&&Gesellschaft für Mathematick und Datenverarbeitung GmbH, Bonn, Germany|","In applicative systems, program design is based on elementary constructs of the form apply function to argument(s), also called applications, which are to be recursively inserted into each other. Program evaluation follows a process of meaning-preserving transformations which systematically distributes argument expressions within function expressions and substitutes applications of primitive functions by their values, until a constant expression representing the result of the computation with respect to these transformations is being reached.",10.1109/TSE.1983.234778,IEEE Transactions on Software Engineering,"Calculus,Computer applications,Concurrent computing,Computational modeling,Functional programming,Distributed computing,Concrete,Flow graphs,Petri nets,Computer languages","J. Backus, Reduction languages and variable-free programming, Apr. 1972.||J. Backus, Programming language semantics and closed applicative languages, July 1973.||J. Backus, ""Can programming be liberated from the von Neumann style? A functional style and its algebra of programs"", Commun. Ass. Comput. Mach., vol. 21, no. 8, pp. 613-641, Aug. 1978.||K. J. Berkling, ""Computer architecture for correct programming"", Proc. 5th Ann. Symp. Comput. Arch., pp. 78-84, 1978-Apr.-3-5.||K. J. Berkling, Reduction languages for reduction machines, Sept. 1976.||D. A. Turner, ""A new implementation technique for applicative languages"", Software–Practice and Experience, vol. 9, pp. 31-49, 1979.||W. T. Wilner, Recursive machines, June 1980.||C. A. Magó, A network of microprocessors to execute reduction languages, 1978.||J. B. Dennis and D. P. Misunas, ""A preliminary architecture for basic data flow processors"", Proc. 2nd Ann. Symp. Comput. Arch., pp. 126-132, 1975-Jan.||A. Plas, ""LAU-system architecture: a parallel data driven processor based on single assignment"", Proc. Int. Conf. Parallel Processing, pp. 293-302, 1976.||Arvind, U. Gostelow and W. Plouffe, The ID-report: An asynchronous programming language and computing machine, 1978.||A. L. Davis, ""DDN's-A low-level program schema for fully distributed systems"", Proc. 1st Euro. Conf. Parallel Distrib. Processing, pp. 1-7, 1979-Feb.-14-16.||R. P. Hopkins, P. W. Rautenbach and P. C. Treleaven, A computer supporting data flow control flow and updateable memory.||R. M. Keller, G. Lindstrom and S. Patil, ""A loosely coupled applicative multi-processing system"", AFIPS-NCC Proc., pp. 861-870, 1979-June.||H. J. Genrich and E. Stankiewicz-Wiechno, ""A dictionary of some basic notions of net theory"" in Net Theory and Applications Lecture Notes in Computer Science no. 84., W. Germany, Berlin:Springer-Verlag, pp. 519-535, 1980.||H. J. Genrich, K. Lautenbach and P. S. Thiagarajan, ""Elements of general net theory: Predicate transition nets"" in Net Theory and Applications Lecture Notes in Computer Science no. 84., W. Germany, Berlin:Springer-Verlag, pp. 76-92, 1980.||H. J. Genrich and K. Lautenbach, ""System modelling with high‑level Petri-nets"", Theoretical Comput. Sci., vol. 13, pp. 109-136, 1981.||C. A. Petri, ""Concepts of net theory"" in Mathematical Foundations Comput. Sci., High Tatras:Mathematical Inst. of the Slovak Academy of Sciences, pp. 137-146, 1973.||A. Church, ""The calculi of lambda-conversion"" in Ann. Math. Studies, NJ, Princeton:Princeton Univ. Press, 1941.||P. Wegner, Programming Languages Information Structures and Machine Organization, New York:McGraw Hill, 1968.||K. J. Berkling, A symmetric complement to the lambda calculus.||K. J. Berkling and E. Fehr, ""A modification of the lambda‑calculus as a base for functional programming languages"", Proc. 9th Int. Colloqu. Automata Languages Programming, 1982-July-12-16.||",Petri Net Models for the Evaluation of Applicative Programs Based on λ-Expressions
"T. Anderson&&Computing Laboratory, University of Newcastle, Newcastle-upon-Tyne, UK|P.A. Lee&&Computing Laboratory, University of Newcastle, Newcastle-upon-Tyne, UK|S.K. Shrivastava&&Computing Laboratory, University of Newcastle, Newcastle-upon-Tyne, UK|","Backward error recovery (that is, resetting an erroneous state of a system to a previous error-free state) is an important general technique for recovery from faults in a system, especially those faults which were not foreseen. However, the provision of backward error recovery can be complex, particularly if the implementation of the system is ""multilever"" and recovery is to be provided at a number of these levels. This paper discusses two distinct categories of multilevel system, and then examines in detail the issues involved in providing backward error recovery in both types of system.",10.1109/TSE.1978.233872,IEEE Transactions on Software Engineering,"Multilevel systems,Computer interfaces,Hardware,Venus,Operating systems,Fault detection,Concrete","T. Anderson and R. Kerr, ""Recovery blocks in action"", Proc. 2nd Int. Conf. Software Engineering, pp. 447-457, 1976-Oct.||L. A. Bjork, ""Generalised audit trail requirements and concepts for data base applications"", IBM Syst. J., vol. 14, pp. 229-245, 1975.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||C. T. Davies, ""Recovery semantics for a DB/DC system"", Proc. 1973 ACM National Conf., pp. 136-141, 1973-Aug.||E. W. Dijkstra, ""The structure of the THE multiprogramming system"", Commun. Ass. Comput. Mach., vol. 11, pp. 341-346, May 1968.||J. N. Gray, ""Notes on data base operating systems"" in Lecture Notes in Computer Science 60, Berlin:Springer, pp. 393-481, 1978.||J. J. Horning, ""A program structure for error detection and recovery"" in Lecture Notes in Computer Science 16, Berlin:Springer, pp. 177-193, 1974.||B. H. Liskov, ""The design of the Venus operating system"", Commun. Ass. Comput. Mach., vol. 15, pp. 144-149, Mar. 1972.||C. Meraud, F. Browaeys and G. Germain, ""Automatic rollback techniques of the COPRA computer"", Proc. 6th IEEE Int. Symp. Fault-Tolerant Computing, pp. 23-29, 1976-June.||B. Randell, ""System structure for software fault tolerance"", IEEE Trans. Software Eng., vol. SE-1, pp. 220-232, June 1975.||B. Randell, P. A. Lee and P. C. Treleaven, ""Reliability issues in computng system design"", Comput. Surveys, vol. 10, pp. 123-165, June 1978.||D. L. Russell, ""Process backup in producer-consumer systems"", Proc. 6th Symp. Operating Systems Principles, pp. 151-157, 1977-Nov.||S. K. Shrivastava and J.-P. Banatre, ""Reliable resource allocation between unreliable processes"", IEEE Trans. Software Eng., vol. SE-4, pp. 230-241, May 1978.||J. S. M. Verhofstad, The construction of recoverable multi-level systems, 1977.||",A Model of Recoverability in Multilevel Systems
"W.H. Leung&&Bell Laboratories, Inc., Naperville, IL, USA|C.V. Ramamoorthy&&Department of Electrical Engineering and Computer Sciences and the Electronics Research Laboratory, University of California, Berkeley, CA, USA|",This paper is concerned with the formal specification of program modules which control access to resources shared among concurrent proceses. The concept of state space is defined for such program modules and the formal specification is given in terms of a program module invariant and input-output assertions defined on the state space. Examples are provided to ilustrate the construction of sDecifications with this approach.,10.1109/TSE.1980.230789,IEEE Transactions on Software Engineering,"Formal specifications,State-space methods,Process control,Laboratories,Resource management,Programming profession,Monitoring,Protection","P. Brinch Hansen, The Architecture of Concurrent Programs, NJ, Englewood Cliffs:Prentice-Hall, 1977.||P. Brinch Hansen and J. Staunstrup, ""Specification and implementation of mutual exclusion"", IEEE Trans. Software Eng., vol. SE-4, Sept. 1978.||R. Devillers and G. Louchard, ""Improvement of parallelism in a finite buffer sharing policy"", Comput. J., Jan. 1977.||E. W. Dijkstra, ""Information streams sharing a finite buffer"", Inform. Processing Lett., vol. 1, 1972.||N. Francez and A. Pneuli, ""A proof method for cyclic programs"", Acta Informatica, vol. 9, no. 2, 1978.||I. Greif, ""A language for formal problem specification"", Commun. Ass. Comput. Mach., Dec. 1977.||J. Guttag, ""Abstract data types and the development of data structures"", Commun. Ass. Comput. Mach., June 1977.||C. A. R. Hoare, ""Proof of correctness of data representations"", Acta Informatica, vol. 1, no. 2, 1972.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., Oct. 1974.||J. Howard, ""Signaling in monitors"", Proc. 2nd Int. Conf. Software Eng., 1976.||J. L. W. Kessels, ""An alternative to event queues for synchronization in monitors"", Commun. Ass. Comput. Mach., July 1977.||B. H. Liskov and S. H. Eliles, ""Specification techniques for data abstraction"", IEEE Trans. Software Eng., vol. SE-1, Mar. 1975.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., May 1972.||",An Approach to Formal Specification of Control Modules
"R.A. Marie&&Institut de Recherche en Informatique et Systèmes Aléatoires, I.N.S.A., Rennes, France|","In this paper, we present an approximate solution for the asymptotic behavior of relatively general queueing networks. In the particular case of networks with general service time distributions (i.e., fixed routing matrix, one or many servers per station, FIFO discipline), the application of the method gives relatively accurate results in a very short time. The approximate stationary state probabilities are identified with the solution of a nonlinear system. The proposed method is applicable to a larger class of queueing networks (dependent routing matrix, stations with fimite capacity, etc.). In this case, the structure of the network studied must satisfy certain decomposability conditions.",10.1109/TSE.1979.234214,IEEE Transactions on Software Engineering,"Queueing analysis,Network servers,Routing,Complex networks,Equations,Computational modeling,Stationary state,Nonlinear systems,Matrix decomposition,System performance","H. Kobayashi, ""Application of the diffusion approximation to queueing networks Part I: Equilibrium queue distributions"", J. Ass. Comput. Mach., vol. 21, pp. 316-328, Apr. 1974.||E. Gelenbe, ""On approximate computer system models"", J. Ass. Comput. Mach., vol. 22, pp. 261-269, Apr. 1975.||K. M. Chandy, U. Herzog and L. Woo, ""Approximate analysis of general queueing networks"", IBM J. Res. Develop., vol. 19, pp. 43-49, Jan. 1975.||R. A. Marie, ""Methodes iteratives de r6solution de modeles mathématiques de systemes informatiques"", RAIRO Inform./Comput. Sci., vol. B2, no. 2, pp. 107-122, 1978.||W. J. Stewart, MARCA: Markov chain analyser, June 1976.||D. R. Cox, ""A use of complex probabilities in the theory of stochastic processes"", Proc. Cambridge Phil. Soc., vol. 51, pp. 313-319, 1955.||A. Chang and S. S. Lavenberg, Oper. Res., vol. 22, pp. 838-847, 1974.||R. A. Marie and W. J. Stewart, ""A hybrid iterative-numerical method for the solution of a general queueing network"", Proc. 3rd Symp. on Measuring Modelling and Evaluating Comput. Syst., pp. 173-199, 1977-Oct.||",An Approximate Analytical Method for General Queueing Networks
"J. Ludewig&&BBC Brown Boveri Research Center, Baden-Dattwil, Switzerland|","This paper outlines a specification system for process control software, named ESPRESO, which was developed at the Nuclear Research Center, Karlsruhe, West Germany. ESPRESO is based on some new ideas, which are combined with elements taken from other systems. ESPRESO consists of a set of concepts, a specification language, a tool for the management, evaluation and validation of specifications, and the method how to use the system. Language, tool, and method are carefully adapted to the concepts. The primary aim was to demonstrate some features of a specification system which are currently not available, rather than to provide a new tool for the software market.",10.1109/TSE.1983.234779,IEEE Transactions on Software Engineering,"Process control,Specification languages,Software tools,Documentation,Safety,Operating systems,Software design,System testing,Programming,Databases","D. Teichroew and E. A. Hershey, ""PSL/PSA: A computer aided technique for structured documentation and analysis of information processing systems"", IEEE Trans. Software Eng., vol. SE-3, pp. 41-48, 1977.||J. Ludewig, ""Process control software specification in PCSL"", IFAC/IFIP Workshop on Real-Time Programming, pp. 103-108, 1980-Apr.||P. Zave, ""An operational approach to requirements specification for embedded systems"", IEEE Trans. Software Eng., vol. SE-8, pp. 250-269, 1982.||E. Knuth and P. Rado, Principles of computer aided system description, 1980.||P. P.-S. Chen, ""The entity relationship model–Towards a unified view of data"", ACM Trans. Data Base Syst., vol. 1, pp. 9-36, 1976.||P. Naur, Revised report on the algorithmic language ALGOL 60, vol. 4, pp. 420-453, 1963.||D. A. Watt, ""An extended attribute grammar for PASCAL"", SIGPLAN Notices, vol. 14, no. 2, pp. 60-74, 1979.||D. E. Knuth, ""Semantics of context-free languages"", Math. Syst. Theory, vol. 2, no. 2, pp. 127-145, 1968.||D. E. Knuth, ""Semantics of context-free languages"", Math. Syst. Theory, vol. 5, no. 1, pp. 95-96, 1971.||""TC 8 up to date report"", European Workshop on Industrial Comput. Syst. (EWICS), 1979.||J. Ludewig, Zur Erstellung der Spezifikation von Prozessrechner‑Software.||1981.||K. Eckert and J. Ludewig, ""ESPRESO-W ein Werkzeug für die Spezifikation von Prozessrechner-Software"" in Werkzeuge der Programmiertechnik, Springer-Verlag, pp. 101-112, 1981.||J. Ludewig, ""Specification of a specification language"", IFAC/ IFIP Workshop on Real-Time Programming, pp. 63-68, 1981.||K. Eckert and J. Ludewig, ""Computer aided specification of process control software"", IEEE Computer, pp. 12-20, May 1982.||N. Wirth, Programming in Modula-2, Springer-Verlag, 1982.||M. Alford, ""A requirements engineering methodology for real time processing requirements"", IEEE Trans. Software Eng., vol. SE-3, pp. 60-69, 1977.||K. Jackson and H. F. Harte, ""The achievement of well structured software in real-time applications"", IFAC/IFIP Workshop on Real-Time Programming, pp. 229-238, 1976-June.||",ESPRESO—A System for Process Control Software Specification
"L.A. Rowe&&Computer Science Division, Department of Electrical Engineering and Computer Sciences, University of California|F.M. Tonge&&Department of Information and Computer Science, University of California, Irvine, CA, USA|","An approach to automating the selection of implementations for the data representations used in a program is presented. Formalisms are developed for specifying data representations and implementation structures. Using these formalisms, algorithms are presented which will recognize the use in a program of known data representations (e. g., stacks, queues, lists, arrays, etc.) so that alternative implementations can be retrieved from a library and which will, for those representations not recognized, generate alternative implementations with a wide range of space-time tradeoffs. Experience with using these algorithms indicates they are reasonably successful, although there are several problems that must be solved before automatic implementation selection systems will be practical.",10.1109/TSE.1978.233873,IEEE Transactions on Software Engineering,"Programming profession,Computer science,Information retrieval,Libraries,Data structures,Decision making,Automatic programming,Independent component analysis,Information analysis,Performance analysis","R. Balzer, ""Dataless programming"", Proc. 1967 Fall Joint Computer Conf., vol. 31, pp. 534-544, 1967.||R. J. Bobrow, UCI Lisp Manual, Oct. 1973.||O.-J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||Proc. Conf. Data: Abstraction Definition and Structure (ACM SIGPLAN Notices), vol. 11, 1976-Mar.||M. E. D'Imperio, ""Information structures: Tools in problem solving"", ACM-SIGMOD FDT Newsletter, vol. 1, 1969.||C. M. Geschke, J. M. Morris and E. H. Satterthwaite, ""Early experience with mesa"", Commun. Ass. Comput. Mach., vol. 20, pp. 540-553, Aug. 1977.||C. C. Gotlieb and F. W. Tompa, ""Choosing a storage schema"", Acta Inform., vol. 3, pp. 297-319, 1974.||J. Guttag, ""Abstract data types and the development of data structures"", Commun. Ass. Comput. Mach., vol. 20, pp. 396-404, June 1977.||C. A. R. Hoare, ""Notes on data structuring"" in Structured Programming, New York:Academic, 1972.||PASCAL User Manual and Report, 1975.||E. Kant, ""The selection of efficient implementations for a high‑level language"", Proc. Symp. Artificial Intelligence and Programming Languages (ACM SIGPLAN Notices, vol. 12, pp. 141-146, 1977-Aug.||D. E. Knuth, ""An empirical study of FORTRAN programs"", Software—Practice and Experience, vol. 1, pp. 105-133, 1971.||B. H. Liskov and S. N. Zilles, ""Specification techniques for data abstraction"", IEEE Trans. Software Eng., vol. SE-1, pp. 7-19, Mar. 1975.||B. H. Liskov, ""Abstraction mechanisms in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-576, Aug. 1977.||J. Low and P. Rovner, ""Techniques for the automatic selection of data structures"", Conf. Rec. 3rd ACM Symp. Principles of Programming Languages, vol. 58-67, 1976-Jan.||S. J. Rosenschein and S. M. Katz, ""Selection of representations for data structures"", Proc. Symp. Artificial Intelligence and Programming Languages (ACM SIGPLAN Notices, vol. 12, pp. 147-154, 1977-August.||P. Rovner, Automatic representation selection for associative data structures, Sept. 1976.||L. A. Rowe, A formalization of modeling structures and the generation of efficient implementation structures, June 1976.||J. T. Schwartz, ""Automatic data structure choice in a language of very high level"", Commun. Ass. Comput. Mach., vol. 18, pp. 722-728, Dec. 1975.||M. Shaw, W. A. Wulf and R. L. London, ""Abstraction and verification in Alphard: Defining and specifying iteration and generators"", Commun. Ass. Comput. Mach., vol. 20, pp. 553-546, Aug. 1977.||F. M. Tonge and L. A. Rowe, A selection algorithm for coalesced implementation structures, Irvine:Dep. Inform. Comput. Sci., Univ. of California, Sept. 1976.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, Dec. 1976.||",Automating the Selection of Implementation Structures
"B. Littlewood&&Department of Mathematics, City University, London, UK|",An examination of the assumptions used in early bug-counting models of software reliability shows them to be deficient. Suggestions are made to improve modeling assumptions and examples are given of mathematical implementations. Model verification via real-life data is discussed and minimum requirements are presented. An example shows how these requirements may be satisfied in practice. It is suggested that current theories are only the first step along what threatens to be a long road.,10.1109/TSE.1980.230790,IEEE Transactions on Software Engineering,"Software reliability,Software measurement,Testing,Predictive models,Hardware,Battery powered vehicles,Mathematical model,Roads,Computer errors,Costs","Z. Jelinski and P. B. Moranda, ""Software reliability research"" in Statistical Computer Performance Evaluation, New York:Academic, pp. 465-484, 1972.||M. Shooman, ""Probabilistic models for software reliability and prediction"" in Statistical Computer Performance Evaluation, New York:Academic, pp. 485-502, 1972.||G. J. Schick and R. W. Wolverton, ""Assessment of software reliability"", Proc. 11th Annu. Meeting German Oper. Res. Soc., 1972-Sept.-6-8.||M. Shooman, ""Operational testing and software reliability estimation during program development"", Conf Rec. 1973 IEEE Symp. Comput. Software Reliability, pp. 51-57, 1973-May-2.||B. Littlewood and J. L. Venrall, ""A Bayesian reliability growth model for software reliability"", Conf. Rec. 1973 IEEE Symp. Comput. Software Reliability, pp. 70-76, 1973-May-2.||B. Littlewood and J. L. Venrall, ""A Bayesian reliability model with a stochastically monotone failure rate"", IEEE Trans. Reliability, vol. R-23, pp. 108-114, June 1974.||J. D. Musa, ""A theory of software reliability and its application"", IEEE Trans Software Eng., vol. SE-1, pp. 312-327, Sept. 1975.||M. Shooman, ""Structural models for software reliability prediction"", Proc. 2nd Int. Conf Software Eng., pp. 268-280, 1976-Oct.||B. Littlewood, ""A reliability model for Markov structured software"", Proc. 1975 Int. Conf Reliable Software, pp. 204-207, 1975-Apr.-21-23.||A. L. Goel and K. Okumoto, Bayesian software prediction models vol. 1: An imperfect debugging model for reliability and other quantitative measures of software systems, 1978.||B. Littlewood, ""How to measure software reliability and how not to ..."", Proc. 3rd Int. Conf. Software Eng., pp. 37-45, 1978-May.||D. V. Lindley, Introduction to Probability and Statistics from a Bayesian Viewpoint; Part 1 Probability; Part 2 Inference, London:Cambridge Univ. Press, 1965.||M. H. De Groot, Optimal Statistical Decisions, New York:McGraw-Hill, 1970.||B. Littlewood and J. L. Verrall, ""A Bayesian reliability growth model for computer software"", Appl. Statist. J. Roy. Statist. Soc. Series C, vol. 22, no. 3, pp. 332-346, 1973.||L. G. Stucki, ""Automatic generation of self-metric software"", Conf Rec. 1973 IEEE Symp. Comput. Software Reliability, pp. 94-100, 1973-May-2.||M. G. Kendall and A. Stuart, The Advanced Theory of Statistics, London:Griffin, vol. I, 1961.||J. D. Musa, ""Progress in software reliability measurement"", Proc. 2nd Software Life Cycle Management Workshop, 1978-Aug.-21-22.||B. Littlewood, ""A semi-Markov model for software reliability with failure costs"", Proc. Symp. Software Eng., pp. 281-300, 1976-Apr.-20-22.||J. P. Buzen, P. P. Chen and R. P. Goldberg, ""Virtual machine techniques for improving system reliability"", Conf Rec. 1973 IEEE Symp. Comput. Software Reliability, pp. 12-17, 1973-May-2.||T. A. Thayer, M. Lipow and E. C. Nelson, Software Reliability TRW Series of Software Technology, New York:North‑Holland, vol. 2, 1978.||""Quantitative Software Models"" in Software Eng. Res. Rev., IIT Research Institute, 1979.||A. N. Sukert, ""An investigation of software reliability models"", Proc. 1977 Annu. Rel. Maintain. Symp., pp. 78-84, 1977.||B. Littlewood, ""A Bayesian differential debugging model for software reliability"", Proc. Workshop on Quantitative Software Models, pp. 170-181, 1979-Oct.-9-11.||",Theories of Software Reliability: How Good Are They and How Can They Be Improved?
"A. Silberschatz&&Department of Mathematical Sciences, University of Texas, Dallas, Richardson, TX, USA|","Recent advances in technology have made the construction of general-purpose systems out of many small independent microprocessors feasible. One of the issue's concerning distributed systems is the question of appropriate language constructs for the handling of communication and synchronization. In his paper, ""Communicating sequential processes,"" Hoare has suggested the use of the input and output constructs and Dijkstra's guarded commands to handle these two issues. This paper examines Hoare's concepts in greater detail by concentrating on the following two issues: 1) allowing both input and output commands to appear in guards, 2) sinple abstract implementation of the input and output constructs.",10.1109/TSE.1979.230190,IEEE Transactions on Software Engineering,"Communication system control,Command and control systems,Proposals,Microprocessors,Computer languages,Microcomputers,Centralized control,Algorithms","C. A. R. Hoare, ""Communicating sequential processes"", Commun. Ass. Comput. Mach., vol. 21, pp. 666-677, Aug. 1978.||E. W. Dijkstra, ""Guarded commands non-determinancy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||A. Silberschatz, Communication and synchronization in distributed systems, Feb. 1979.||E. W. Dijkstra, ""Cooperating sequential processes"" in Programming Languages, New York:Academic, pp. 43-112, 1968.||E. Coffman, ""System deadlocks"", Computing Surveys, vol. 3, pp. 67-78, June 1971.||P. Brinch Hansen, ""The programming language concurrent pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||N. Wirth, ""MODULA: A programming language for modular multiprogramming"", Software Practice and Experience, vol. 7, pp. 3-35, Jan. 1977.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 546-557, Oct. 1974.||A. Silberschatz, Dynamic resource management in distributed operating systems, May 1979.||PASCAL User Manual and Report., 1976.||",Communication and Synchronization in Distributed Systems
"S. Jajodia&&Department of Computer Science, University of Missouri, Columbia, MD, USA|J. Liu&&Department of Computer Engineering and Science, Huazhong University of Science and Technology, Wuhan, Hubei, China|P.A. Ng&&Department of Computer Science, University of Missouri, Columbia, MO, USA|","This paper presents a recognition procedure for parallel tasks in the user program written in a conventional programming language. To establish our program model, it describes the parallelism of the program in tenns of a process flow graph in which the relationships among processes are of predecessors and successors. And finally it presents a parallel processing scheme which realizes automatically the recognition of parallel tasks and schedules these tasks for parallel execution.",10.1109/TSE.1983.234780,IEEE Transactions on Software Engineering,"Parallel processing,Flow graphs,Computer languages,Processor scheduling,Computer science,Computer architecture,Instruction sets,Software design,Multiprocessor interconnection networks,System recovery","W. A. Ackerman, ""Data flow languages"", IEEE Computer, vol. 15, pp. 15-25, Feb. 1982.||J. L. Baer, ""Multiprocessing systems"", IEEE Trans. Comput., vol. C-25, pp. 1271-1276, Dec. 1976.||M. J. Flynn, ""Some computer organizations and their effectiveness"", IEEE Trans. Comput., vol. C-21, pp. 948-960, Sept. 1972.||D. D. Gasjski, D. A. Padua, D. J. Kuck and R. H. Kuhn, ""A second opinion in data flow machines and languages"", IEEE Computer, vol. 15, pp. 58-69, Feb. 1982.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng:, vol. SE-1, pp. 199-207, June 1975.||L. S. Haynes, R. L. Lau, D. P. Siewiorek and D. W. Mizell, ""A survey of highly parallel computing"", IEEE Computer, vol. 15, pp. 9-24, Jan. 1982.||D. J. Kuck, R. H. Kuhn, D. A. Padua, B. Leasure and M. Wolfe, ""Dependence graphs and compiler optimizations"", Proc. ACM Symp. Principles of Programming Languages, pp. 207-218, 1981-Jan.||D. J. Kuck, ""Parallel processing architecture–A survey"", Proc. Sagamore Conf. Parallel Processing, pp. 15-39, 1975.||J. R. McGraw, ""Data flow computing: Software development"", IEEE Trans. Comput., vol. C-29, pp. 1095-1103, Dec. 1980.||G. J. Nutt, ""A parallel processor operating system comparison"", IEEE Trans. Software Eng., vol. SE-3, pp. 467-475, Nov. 1977.||D. A. Padua, D. J. Kuck and D. H. Lawrie, ""High-speed multiprocessors and compilation techniques"", IEEE Trans. Comput., vol. C-29, pp. 763-767, Sept. 1980.||S. E. Rumbaugh, ""A data flow multiprocessor"", IEEE Trans. Comput., vol. C-26, pp. 134-146, Feb. 1977.||R. J. Swam, S. H. Fuller and D. P. Siewiorek, ""Cm* —A modular multi-microprocessor"", Proc. 1977 NCC AFIPS Conf., vol. 46, pp. 637-644.||J. Weissberger, ""Analysis of multiple-microprocessor system architectures"", Comput. Design, vol. 16, no. 6, 1977.||",A Scheme of Parallel Processing for MIMD Systems
"E.A. Akkoyunlu&&Department of Computer and Information Sciences, Brooklyn College, CUNK, Brooklyn, NY, USA|A.J. Bernstein&&Department of Computer Science, SUNY at Stony Brook, Stony Brook, NY, USA|F.B. Schneider&&Department of Computer Science, Cornell University, Ithaca, NY, USA|A. Silberschatz&&Programs in Mathematical Sciences, University of Texas, Dallas, Richardson, TX, USA|",Synchronous and asynchronous operation of software systems are defined. It is argued that certifying the correct operation of a system in the synchronous mode is significantly simpler than in the asynchronous mode. A series of compile-time and run-time restrictions for systems constructed in Concuirent Pascal are presented which assure equivalent operation in the synchronous and asynchronous modes.,10.1109/TSE.1978.234136,IEEE Transactions on Software Engineering,"Operating systems,Computer science,Software systems,High level languages,Certification,Region 3,Educational institutions,Proposals,Control systems,Stress","E. A. Akkoyunlu, A. J. Bernstein and F. B. Schneider, Medium term scheduling and equivalence of synchronous and asynchronous operation, June 1977.||P. Brinch Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-206, June 1975.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, 1973.||P. Brinch Hansen, ""The solo operating system: A Concurrent Pascal program"", Software Practice Experience, vol. 6, pp. 141-149.||O. J. Dahl, B. Myhrhaung and K. Nygaard, The Simula 67 Common Base Language, Norway, Oslo:Norwegian Computing Center, 1968.||E. W. Dijkstra, ""The structure of THE multiprogramming system"", Commun. Ass. Comput. Mach., vol. 11, pp. 341-346, May 1968.||E. W. Dijkstra, ""Co-operating sequential processes"" in Programming Languages, New York:Academic, pp. 43-112.||E. W. Dijkstra, ""Notes structured programming"" in Structured Programming, New York:Academic, 1972.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, pp. 624-633, Nov. 1976.||R. W. Floyd, ""Assigning meanings to programs"", Proc. Symp. Applied Math, vol. 19, pp. 19-32, 1967.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-687, Oct. 1969.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||J. H. Howard, ""Signaling in monitors"", Proc. 2nd Annu. Conf. Software Engineering, pp. 47-52, 1976-October.||J. L. W. Kessels, ""An alternative to event queues for synchronization in monitors"", Commun. Ass. Comput. Mach., vol. 20, pp. 500-503, July 1977.||B. Liskov and S. Zilles, ""An approach to abstraction"", Proc. Symp. Very High Level Languages (SIGPLAN Notices, vol. 9, 1974-Apr.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., vol. 15, pp. 1053-1058, Dec. 1972.||A. Silberschatz, Correctness and modularity in asynchronous systems, Aug. 1976.||A. Silberschatz and A. J. Bernstein, Correctness in modular operating systems, Nov. 1976.||A. Silberschatz, R. B. Kieburtz and A. J. Bernstein, ""Extending Concurrent Pascal to allow dynamic resource management"", IEEE Trans. Software Eng., vol. SE-3, pp. 210-217, May 1977.||",Conditions for the Equivalence of Synchronous and Asynchronous Systems
"A.L. Goel&&Department of Industrial Engineering and Operations Research, and the School of Computer and Information Science, Syracuse University, Syracuse, NY, USA|",,10.1109/TSE.1980.230791,IEEE Transactions on Software Engineering,"Software reliability,Hazards,Industrial engineering,Operations research,Information science,Computer errors,Data analysis,Testing,Software engineering,Weibull distribution","R. E. Barlow and F. Proschan, Statistical Theory of Reliability and Life Testing, New York:Holt, Rinehart and Winston, 1975.||Z. Jelinski, P. B. Moranda and McDonnell Douglas Astronaut, Software reliability research.||Statistical Computer Performance Evaluation, New York:Academic, 1972.||B. Littlewood, Comments on Moranda's Critique, pp. 22, 1979.||N. Mann, R. Schafer and N. Singpurwalla, Methods for Statistical Analysis ofReliability and Life Data, New York:Wiley, 1974.||P. B. Moranda, ""Prediction of software reliability during debugging"", Proc. 1975 Annu. Reliability and Maintainability Symp., pp. 327-332, 1975.||P. B. Moranda, Comments on: An analysis of competing software reliability models: G. J. Schick and R. W. Wolverton, pp. 42, 1979.||G. J. Schick and R. W. Wolverton, ""Assessment of software reliability"", 11th Annu. Meeting of the German Oper. Res. Soc. DGOR, 1972-Sept.||Proc. Oper. Res., pp. 395-422, 1973.||G. J. Schick, ""An analysis of competing software reliability models"", IEEE Trans. Software Eng., vol. SE-4, pp. 104-120, Mar. 1978.||G. J. Schick, An examination of some of the questions raised regarding the paper An analysis of competing software reliability models, pp. 19, 1979.||A. N. Sukert, A software reliability study, Aug. 1976.||T. A. Thayer, M. Lipow and E. C. Nelson, Software reliability study, pp. 5-1-5-22, Feb. 1976.||W. L. Wagoner, The final report on a software reliability measurement study, Aug. 1973.||","A Summary of the Discussion on ""An Analysis of Competing Software Reliability Models"""
"B.H. Liskov&&Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, MA, USA|A. Snyder&&Hewlett Packard Corporation, Palo Alto, CA, USA|","For programs to be reliable and fault tolerant, each program module must be defined to behave reasonably under a wide variety of circumstances. An exception handling mechanism supports the construction of such modules. This paper descnbes an exception handling mechanism developed as part of the CLU programming language. The CLU mechanism is based on a simple model of exception handling that leads to well-structured programs. It is engineered for ease of use and enhanced program readability. This paper discusses the various models of exception handUlng, the syntax and semantics of the CLU mechanism, and methods of implementing the mechanism and integrating it in debugging and production environments.",10.1109/TSE.1979.230191,IEEE Transactions on Software Engineering,"Computer languages,Fault tolerance,Hardware,Modular construction,Debugging,Production,Computerized monitoring,Laboratories,Computer science,Robustness","G. V. Bochmann, ""Multiple exits from a loop without the GOTO"", Commun. Ass. Comput. Mach., vol. 16, pp. 443-444, July 1973.||J. B. Goodenough, ""Exception handling: Issues and a proposed notation"", Commun. Ass. Comput. Mach., vol. 18, pp. 683-696, Dec. 1975.||R. Levin, Program structures for exceptional condition handling, June 1977.||B. Liskov, A. Snyder, R. Atkinson and C. Schaffert, ""Abstraction mechanisms in CLU"", Commun. Ass. Comput. Mach., vol. 20, pp. 564-576, Aug. 1977.||Proc. ACM Conf. on Language Design for Reliable Software SIGPLAN Notices, vol. 12, 1977-Mar.||J. G. Mitchell, W. Maybury and R. Sweet, Mesa language manual, Feb. 1978.||P. M. Melliar-Smith and B. Randell, ""Software reliability: The ole of programmed exception handling"", Proc. ACM Conf. on Language Design for Reliable Software SIGPLAN Notices, vol. 12, pp. 95-100, 1977-Mar.||B. Randell, ""System structure for software fault tolerance"", IEEE Trans. Software Eng., vol. SE-1, pp. 220-232, June 1975.||C. T. Zahn, ""A control statement for natural top-down structured programming"", Programming Symposium Lecture Notes in Computer Science, vol. 19, pp. 170-180, 1974.||",Exception Handling in CLU
"P. Wegner&&Department of Computer Science, Brown University of Providence, Providence, RI, USA|S.A. Smolka&&Department of Computer Science, Brown University of Providence, Providence, RI, USA|","Three notations for concurrent programming are compared, namely CSP, Ada, and monitors. CSP is an experimental language for exploring structuring concepts in concurrent programming. Ada is a general-purpose language with concurrent programming facilities. Monitors are a construct for managing access by concurrent processes to shared resources. We start by comparing ""lower-level"" communication, synchronization, and nondeterminism in CSP and Ada and then examine ""higher-level"" module interface properties of Ada tasks and monitors.",10.1109/TSE.1983.234781,IEEE Transactions on Software Engineering,"Chip scale packaging,Computer science,Concurrent computing,Resource management,Processor scheduling,User interfaces,Computer interfaces,NASA","G. R. Andrews and F. B. Schneider, ""Concepts and notations for concurrent programming"", ACM Comput. Surveys, June 1983.||A. J. Bernstein, ""Output guards and nondeterminism in 'communicating sequential processes"", ACM Trans. Programming Languages Syst., vol. 2, pp. 234-238, Apr 1980.||P. A. Bernstein and N. Goodman, ""Concurrency control in distributed database systems"", ACM Comput. Surveys, vol. 13, pp. 185-221, June 1981.||J. van den Bos, ""Comments on Ada process communication"", SIGPLAN Notices, vol. 15, pp. 77-81, June 1980.||Reference manual for the Ada programming language, Feb. 1983.||J. A. Feldman, ""High level programming for distributed computing"", Commun. Ass. Comput. Mach., vol. 22, pp. 353-368, 1979.||N. Francez and S. Yemini, A fully abstract and composable inter-task communication construct, NY, Yorktown Heights:IBM T. J. Watson Research Center, Nov. 1982.||P. Brinch Hansen, Operating System Principles, NJ, Englewood Cliffs:Prentice-Hall, 1973.||P. Brinch Hansen, ""Distributed processes: A concurrent programming concept"", Commun. Ass. Comput. Mach., vol. 21, pp. 934-941, 1978.||C.A.R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||C.A.R. Hoare, ""Communicating sequential processes"", Commun. Ass. Comput. Mach., vol. 21, pp. 666-677, Aug. 1978.||B. Liskov, ""Guardians and actions: Linguistic support for robust distributed programs"", Proc. 9th Ann. ACM Symp. on Principles of Programming Languages, pp. 7-19, 1982-Jan.||F. N. Parr and R. E. Strom, Nil: A high level language for distributed systems programming, NY, Yorktown Heights:IBM T. J. Watson Research Center, Dec. 1982.||IBM Syst. J..||A. Pnueli and W. P. DeRoever, ""Rendezvous with Ada–A proof theoretical view"", Proc. Ada TEC Conf. on Ada, pp. 129-137, 1982-Oct.||E. S. Roberts, A. Evans, R. Morgan and E. M. Clarke, ""Task management in Ada–A critical evaluation for real-time multiprocessors"", Software—Practice and Experience, vol. 11, pp. 1019-1051, 1981.||A. Silberschatz, ""Port directed communication"", Comput. J., vol. 24, pp. 78-82, 1981.||J. Welsh and A. Lister, ""A comparative study of task communication in Ada"", Software—Practice and Experience, vol. 11, pp. 257-290, 1981.||R. Williamson and E. Horowitz, Concurrent communication and synchronization mechanisms, 1982.||S. Yemini, ""On the suitability of Ada multitasking for expressing parallel algorithms"", Proc. Ada TEC Conf. on Ada, pp. 9 1-97, 1982-Oct.||","Processes, Tasks, and Monitors: A Comparative Study of Concurrent Programming Primitives"
"G.V. Bochmann&&Département d'Informatique et de Recherche Operationnelle, Université de Montreal, Montreal, QUE, Canada|","This paper discusses the problem of allocating storage for the activation records of procedure calls within a system of parallel processes. A compile time storage allocation scheme is given, which determines the relative address within the memory segment of a process for the activation records of all procedures called by the process. This facilitates the generation of an efficient run-time code. The allocation scheme applies to systems in which data and procedures can be shared among several processes. However, recursive procedure calls are not supported.",10.1109/TSE.1978.234137,IEEE Transactions on Software Engineering,"Communication system control,Runtime,Data structures,Parallel programming,Computer displays,Computer architecture,Application software,Registers,Councils,Computer languages","B. H. Liskov and S. N. Zilles, ""Specification techniques for data abstractions"", IEEE Trans. Software Eng., vol. SE-1, pp. 7-18, 1975.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, 1974.||P. Brinch- Hansen, ""The programming language Concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, 1975.||G. V. Bochmann, ""Logical verification and implementation of protocols"", Proc. 4th Data Commun. Symp., pp. 7.15-20, 1975.||G. V. Bochmann, ""Storage allocation for parallel processes in micro-computers"", Proc. Canadian Comput. Conf., 1976-May.||D. E. Knuth, The Art of Computer Programming, MA, Reading:Addison-Wesley, vol. I, pp. 258-265, 1968.||D. Gries, Compiler Construction for Digital Computers, New York:Wiley, 1971.||P. Brinch Hansen, Concurrent Pascal machine, 1975.||",Compile Time Memory Allocation for Parallel Processes
"A.L. Baker&&Department of Computer Science, University of Wisconsin, La Crosse, WI, USA|S.H. Zweben&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|","In attempting to describe the quality of computer software, one of the more frequently mentioned measurable attributes is complexity of the flow of control. During the past several years, there have been many attempts to quantify this aspect of computer programs, approaching the problem from such diverse points of view as graph theory and software science. Most notable measures in these areas are McCabe's cyclomatic complexity and Halstead's software effort. More recently, Woodward et al. proposed a complexity measure based on the number of crossings, or ""knots,"" of arcs in a linearization of the flowgraph.",10.1109/TSE.1980.230799,IEEE Transactions on Software Engineering,"Fluid flow measurement,Software measurement,Programming profession,Graph theory,Area measurement,Particle measurements,Computer science,Costs,Software quality,Programming environments","E. Ashcroft and Z. Manna, ""The translation of 'GO TO' programs to 'WHILE' programs"" in Information Processing 71, North‑Holland, pp. 250-255, 1971.||A. L. Baker, Software science and program complexity meaes, July 1979.||A. L. Baker and S. H. Zweben, ""The use of software science in evaluating modularity concepts"", IEEE Trans. Software Eng., vol. SE-5, pp. 110-120, Mar. 1979.||C. Berge, Graphs and Hypergraphs, The Netherlands, Amsterdam:North-Holland, 1973.||E. W. Dijkstra, ""'GO TO' statement considered harmful"", Commun. Ass. Comput. Mach., vol. 11, pp. 147-148, Mar. 1968.||H. Dunsmore and J. Gannon, ""Programming factors–Language features that help explain programming complexity"", Proc. ACM 78 Annu. Conf., pp. 554-560, 1978.||A. Fitzsimmons and T. Love, ""A review and evaluation of software science"", ACM Comput. Surveys, vol. 10, pp. 3-18, Mar. 1978.||R. Gordon, ""Measuring improvements in program clarity"", IEEE Trans. Software Eng., vol. SE-5, pp. 79-90, Mar. 1979.||R. Gordon and M. H. Halstead, ""An experiment comparing FORTRAN programming time with the software physics hypothesis"", Proc. AFIPS 76 Nat. Comput. Conf., vol. 45, pp. 935-937, 1976.||M. H. Halstead, Elements of Software Science, New York:Elsevier North-Holland, 1977.||W. Hansen, ""Measurement of program complexity by the pair (cyclomatic number operator count)"", ACM SIGPLAN Notices, vol. 13, pp. 19-33, Mar. 1978.||B. Kernighan and P. Plauger, The Elements of Programming Style, New York:McGraw-Hill, 1974.||D. Knuth, ""Structured programming with GO TO statements"", ACM Comput. Surveys, vol. 6, pp. 261-301, Dec. 1974.||D. E. Knuth and R. W. Floyd, ""Notes on avoiding GO TO statements"", Inform. Processing Lett., vol. 1, pp. 23-31, 1971.||H. Ledgard and M. Marcotty, ""A genealogy of control structures"", Commun. Ass. Comput. Mach., vol. 8, pp. 629-639, Nov. 1975.||T. Love, ""An experimental investigation of the effect of program structure on program understanding"", ACM SIGPLAN Notices, vol. 12, pp. 105-113, Mar. 1977.||T. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||B. Shneiderman, ""Exploratory experiments in programmer behavior"", Int. J. Comput. Inform. Sci., vol. 5, pp. 123-143, 1976.||M. Sime, T. Green and D. Guest, ""Psychological evaluation of two conditional constructions used in computer languages"", Int. J. Man–Mach. Studies, vol. 5, pp. 105-113, 1973.||L. Weissman, A methodology for studying the psychological complexity of computer programs, 1974.||ACM SIGPLAN Notices, vol. 9, pp. 25-36, June 1974.||M. Woodward, M. Hennell and D. Hedley, ""A measure of control flow complexity in program text"", IEEE Trans. Software Eng., vol. SE-5, pp. 45-50, Jan. 1979.||P. Zislis, An experiment in algorithm implementation, 1973.||",A Comparison of Measures of Control Flow Complexity
"A.F. Babich&&Basic Four Corporation, Santa Ana, CA, USA|","An approach to proving paralel programs correct is presented. The steps are 1) model the paralel program, 2) prove partial correctness (proper synchronization), and 3) prove the absence of deadlock, livelock, and infinite loops. The parallel program model is based on KeUler's model. The main contributions of the paper are techniques for proving the absence of deadlock and livelock. A connection is made between Keler's work and Dijkstra's work with serial non-deterministic programs. It is shown how a variant function may be used to prove finite termination, even if the variant function is not strictly decreasing, and how finite termination can be used to prove the absence of livelock. Handling of the finite delay assumption is also discussed. The illustrative examples indude one which occurred in a commercial environment and a classic synchronization problem solved without the aid of special synchronization primitives.",10.1109/TSE.1979.230192,IEEE Transactions on Software Engineering,"System recovery,Concurrent computing,Delay,Timing,Computational modeling,Computer aided instruction","B7000/B6000 ALGOL Reference Manual (5001639), 1977.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Assoc. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||E. W. Dijksta, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||E. W. Dijkstra, ""Solution of a problem in concurrent programming control"", Commun. Assoc. Comput. Mach., vol. 8, pp. 569, Sept. 1965.||E. W. Dijkstra, ""Hierarchical ordering of sequential processes"", Acta Inform., vol. 1, pp. 115-138, 1971.||R. M. Keller, ""Formal verification of parallel programs"", Commun. Assoc. Comput. Mach., vol. 19, pp. 371-384, July 1976.||S. Owicki and D. Gries, ""Verifying properties of parallel programs: An axiomatic approach"", Commun. Assoc. Comput. Mach., vol. 19, pp. 279-285, May 1976.||A. F. Babich, ""Proving the correctness of parallel programs"", IEEE Computer Society Repository, Feb. 1978.||J. C. Cleary, ""Process handling on the Burroughs B6500"", Proc. 4th Australian Comput. Conf., pp. 231-239, 1969.||E. T. Organik, Computer System Organization: The BS 700/B6700 Series, New York:Academic, 1973.||",Proving Total Correctness of Parallel Programs
"G. Bernard&&Laboratoire ISEM, Université Paris Sud, Orsay, France|","We study problems of optimization of the topology of interconnected local computer networks using random access to a single channel. An approach to modeling of the system by a queueing network is proposed: the analytical solution of the model allows us to obtain global performance measures, which may be used as evaluation criteria in network topology optimization problems. A heuristic is proposed for the latter aspect for one class of problems. We also derive from the model the time needed, for a new user which joins the network, to transmit its number of messages.",10.1109/TSE.1983.234782,IEEE Transactions on Software Engineering,"Computer networks,Delay,Optical fibers,Network topology,Application software,Access protocols,Joining processes,Queueing analysis,Performance analysis,Optimization methods","E. Gelenbe, J. D. Geyl, O. Gibergues and E. Horlait, Réseau local ádiffusion de paquets sur fibre optique: Le systéme XANTHOS, Dec. 1979.||J. Labetoulle, Modélisation des systémes informatiques et applications aux réseaux d'ordinateurs, Nov. 1978.||W. J. Gordon and G. G. Newell, ""Closed queueing systems servers"", Oper. Res., vol. 15, pp. 254-265, 1967.||J. Buzen, ""Computational algorithms for closed queueing networks with exponential servers"", Commun. Ass. Comput. Mach., vol. 16, pp. 527-531, 1973.||F. Baskett, M. Chandy, R. Muntz and J. Palacios, ""Open closed and mixed networks of queues with different classes of customers"", J. Ass. Comput. Mach., vol. 22, Apr. 1975.||W. Chu, ""Optimal file allocation in a multiple computer system"", IEEE Trans. Comput., Oct. 1969.||P. J. Courtois, Decomposability-Queueing and Computer Systems Applications ( ACM Monograph Series), New York:Academic, 1977.||E. Gelenbe and I. Matrani, Analysis and Synthesis of Computer Systems, London:Academic, 1980.||",Interconnection of Local Computer Networks: Modeling and Optimization Problems
"U.R. Kodres&&Naval Postgraduate School, Monterrey, CA, USA|","This paper points out the abstract similarities between problems arising in programming, discrete systems analysis in engineering, and network flow problems in operations research. The highly developed techniques of analyzing discrete systems of two terminal elements in electrical engineering become applicable to analyzing the complexity and execution time of computer programs.",10.1109/TSE.1978.234138,IEEE Transactions on Software Engineering,"Flowcharts,Electrical engineering,Control systems,Resistors,Systems engineering and theory,Operations research,Graph theory,Batteries,Linear programming,Time measurement","L. R. Ford and D. R. Fulkerson, Flows in Networks, NJ, Princeton:Princeton University Press, 1962.||D. E. Johnson and J. R. Johnson, Graph Theory with Engineering Applications, New York:Ronald, 1972.||H. E. Koenig, Y. Tokad and H. K. Kesavan, Analysis of Discrete Systems, New York:McGraw-Hill, 1967.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||",Discrete Systems and Flowcharts
"R.N. Faiman&&Manufacturing Data Systems, Inc., Ann Arbor, MI, USA|A.A. Koretesoja&&unknow|","The architecture of a production optimizing compiler for Pascal is described, and the structure of the optimizer is detailed. The compiler performs both interprocedural and global optimizations, in addition to optimization of basic blocks. We have found that a high-level structured language such as Pascal provides unique opportunities for effective optimization, but that standard optimization techniques must be extended to take advantage of these opportunities. These issues are considered in our discussion of the optimization algorithms we have developed and the sequence in which we apply them.",10.1109/TSE.1980.230800,IEEE Transactions on Software Engineering,"Optimizing compilers,Production,Program processors,Computer languages,Manufacturing,Data systems,Performance analysis,Programming profession","A. V. Aho and J. D. Ullman, ""Optimization of straight line programs"", SIAMJ. Comput., vol. l, pp. 1-19, Mar. 1972.||A. V. Aho, J. E. Hopcroft and J. D. Ullman, Principles of Compiler Design, MA, Reading:Addison-Wesley, 1977.||A. V. Aho and J. D. Ullman, The Design and Analysis of Computer Algorithms, MA, Reading:Addison-Wesley, 1974.||U. Ammann, ""The method of structured programming applied to the development of a compiler"", Proc. ACM Int. Compiler Symp. 1973, pp. 93, 1973.||J. M. Barth, ""A practical interprocedural data-flow analysis algorithm"", Commun. Ass. Comput. Mach., vol. 21, pp. 724-736, Sept. 1978.||J. M. Barth, A practical interprocedural data flow analysis algorithm and its applications, 1977.||J. Cocke and J. T. Schwartz, Programming Languages and their Compilers: Preliminary Notes, New York:New York Univ. Press, 1970.||P. J. Downey and R. Sethi, ""Assignment commands with array references"", J. Ass. Comput. Mach., vol. 25, pp. 652-666, Oct. 1978.||R. N. Faiman, Reduction of basic blocks to DAGs, MI, Ann Arbor:Manufacturing Data Systems, Inc. (Programming Languages Dep.), 1978.||R. N. Faiman, Summary dataflow analysis, MI, Ann Arbor:Manufacturing Data Systems, Inc. (Programming Languages Dep.), 1979.||R. A. Freiburghouse, ""Register allocation via usage counts"", Commun. Ass. Comput. Mach., vol. 17, pp. 638-642, Nov. 1974.||D. Gries, Compiler Construction for Digital Computers, New York:Wiley, pp. 377-382, 1971.||C. O. Grosse-Lindemann and H. H. Nagel, ""Postlude to a Pascal‑compiler bootstrap on a DECsystem-10"", Software–Practice and Experience, vol. 6, pp. 29-42, Jan. 1976.||M. S. Hecht, Flow Analysis of Computer Programs, New York:North-Holland, 1977.||Pascal: User Manual and Report, 1974.||T. Lengauer and R. E. Tarjan, ""A fast algorithm for finding dominators in a flow graph"", ACM Trans. Prog. Lang. Syst., vol. 1, pp. 121-141, July 1979.||MDSI Pascal Report, MI, Ann Arbor:Manufacturing Data Systems, Inc. (Programming Languages Dep.), 1979.||D. R. Perkins and R. L. Sites, ""Machine-independent Pascal code optimization"", Proc. SIGPLAN Symp. Compiler Construction ACM SIGPLAN Notices, vol. 14, pp. 201-207, 1979-Aug.||J. H. Reif, Combinatorial aspects of symbolic program analysis, 1977.||R. E. Tarjan, ""Depth-first search and linear graph algorithms"", SIAMJ. Comput., vol. 1, pp. 146-160, June 1972.||K. G. Walter, ""Recursion analysis for compiler optimization"", Commun. Ass. Comput. Mach., vol. 19, pp. 514-516, Sept. 1976.||N. Wirth, ""The design of a Pascal compiler"", Software–Practice and Experience, vol. 1, pp. 309-333, 1971.||",An Optimizing Pascal Compiler
"V.D. Gligor&&Department of Computer Science, University of Maryland, College Park, MD, USA|","The problems of review and revocation of access privileges are presented in the context of the systems that use capabilities for the long-term distribution of access privileges. An approach that solves both of these problems in their-most general form is presented in this paper. The approach requires that a capability propagation graph be maintained in memory spaces associated with subjects (e.g., domains, processes, etc.) that make copies of the respective capability; the graph remains inaccessible to those subjects, however. Parallel processes of the operating system update the graph as the system runs.",10.1109/TSE.1979.230193,IEEE Transactions on Software Engineering,"Kernel,Access control,Design methodology,Protection,Hierarchical systems,Operating systems,Hardware,Control systems,Vehicles,Stress","B. W. Lampson and H. E. Sturgis, ""Reflections on an operating system design"", Commun. ACM, vol. 19, pp. 251-265, May 1976.||E. Cohen and D. Jefferson, ""Protection in the HYDRA operating system"", Proc. 5th Symp. on Operating Systems Principles, pp. 141-160, 1975-Nov.||W. A. Wulf, ""HYDRA: The kernel of multiprocessor operating system"", Commun. ACM, vol. 17, pp. 337-345, June 1974.||M. D. Schroeder, ""Engineering a security kernel for MULTICS"", Proc. 5th Symp. on Operating Systems Principles, pp. 25-32, 1975-Nov.||G. J. Popek and C. S. Kline, ""Issues in kernel design"" in Operating Systems–An Advanced Course, New York:Springer-Verlag, pp. 210-226, 1978.||D. D. Redell, Naming and protection in extendible operating systems, Sept. 1974.||J. H. Saltzer and M. D. Schroeder, ""The protection of information in computer systems"", Proc. IEEE, vol. 63, pp. 1278-1308, 1975-Sept.||P. B. Bishop, Computer systems with a very large address space and garbage collection, May 1977.||G. S. Graham and P. J. Denning, ""Protection-principles and practice"", Proc. AFIPS 1972 Sprng Joint Comput. Conf., vol. 40, pp. 417-429.||A. K. Jones, ""Protection mechanisms and enforcement of security policies"" in Operating Systems–An Advanced Course, New York:Springer-Verlag, pp. 228-250, 1978.||D. England, ""Capability concept mechanism and structure in system 250"", IRIA Int. Workshop on Protection in Operating Systems, pp. 63-82, 1974-Aug.||V. D. Gligor, A study of extensible architectures, Nov. 1976.||R. Levin, Program structures for exceptional condition handling, June 1977.||B. G. Lindsay, Exception processing in computer systems, Nov. 1977.||L. Krauss and A. McGahan, Computer Fraud and Countermeasures, NJ, Englewood Cliffs:Prentice-Hall, 1979.||C. Weissman, ""Security controls in the ADEPT-50 time sharing systems"", Proc. AFIPS 1969 Fall Joint Comput. Conf., vol. 35, pp. 119-135.||B. Peuto, Comparative study of real estate law and protection systems, May 1974.||D. D. Chamberlain, J. N. Gray, P. P. Griffths, M. Mresse, l. L. Traiger and B. W. Wade, ""Data base authorization"" in Foundations of Secure Computation, New York:Academic, pp. 39-56, 1978.||L. P. Deutsch and D. G. Bobrow, ""An efficient incremental automatic garbage collector"", Commun. ACM, vol. 19, pp. 522-526, Sept. 1976.||M. A. Harrison, W. L. Ruzzo and J. D. Ullman, ""On protection in operating systems"", Commun. ACM, vol. 19, pp. 461-471, Aug 1976.||L. Snyder, ""On the synthesis and analysis of protection systems"", Proc. 6th Symp. on Operating Systems Principles, pp. 141-150, 1977-Nov.||P. G. Neumann, R. S. Boyer, R. J. Feiertag, K. N. Levitt and L. Robinson, A provably secure operating system: The system its application and proofs, Feb. 1977.||E. I. Organick, The MULTICS System: An Examination of Is Structure, MA, Cambridge:MIT Press, 1972.||D. L. Murphy, ""Storage organization and management in TENEX"", Proc. AFIPS 1972 Fall Joint Comput. Conf., vol. 41, pp. 23-32.||J. H. Saltzer, ""Protection and the control of information sharing in MULTICS"", Commun. ACM, vol. 17, pp. 388-402, July 1974.||M. D. Schroeder, Cooperation of mutually suspicious subsystems in a computer utility, Sept. 1972.||D. L. Chaum and R. S. Fabry, Implementing capability-based protection using encryption, Berkeley:Univ. of California, July 1978.||E. I. Organick, Computer System Organization: The B5700/B6 700 Series, New York:Academic, 1973.||B. W. Lampson, ""Dynamic protection structures"", Proc. AFIPS 1969 Fall Joint Comput. Conf., vol. 35, pp. 27-38.||B. W. Lampson, ""Protection"", Proc. 5th Ann. Princeton Conf., pp. 437-433, 1971-Mar.||D. D. Chamberlain, J. N. Gray and I. L. Traiger, ""Views authorization and locking in a relational data base system"", Proc. AFIPS 1975 Nat. Comput. Conf., vol. 44, pp. 425-430.||P. P. Griffiths and B. W. Wade, ""An authorization mechanism for a relational database system"", ACM Trans. Database Syst., vol. 1, pp. 242-255, Sept. 1976.||D. H. Vanderbilt, Controlled information sharing in a computer utility, Oct. 1969.||R. S. Fabry, ""Capability-based addressing"", Commun. ACM, vol. 17, pp. 638-642, Aug. 1974.||H. W. Lawson and L. Blomberg, ""The Data Saab FCPU Microprogramming language"", SIGPLAN Notices, vol. 9, pp. 87-96, Aug. 1974.||H. W. Lawson and R. Malm, ""A flexible asynchronous microprocessor"", BIT, vol. 2, pp. 165-176, June 1973.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, 1976.||P. A. Janson, Using type extension to organize virtual memory mechanisms, Sept. 1976.||B. W. Lampson, R. Needham, B. Randall and M. Schroeder, ""Protection security reliability"", SIGOPS Oper. Syst. Rev., vol. 11, pp. 12-14, Jan. 1977.||",Review and Revocation of Access Privileges Distributed Through Capabilities
"B. Bhargava&&Department of Computer Science, University of Pittsburgh, Pittsburgh, PA, USA|C.T. Hua&&Computer Products Division, Honeywell Information Systems, Inc., Phoenix, AZ, USA|","An event order based model for specifying and analyzing concurrency control algorithms for distributed database systems has been presented. An expanded notion of history that includes the database access events as well as synchronization events is used to study the correctness, degree of concurrency, and other aspects of the algorithms such as deadlocks and reliability. The algorithms are mapped into serializable classes that have been defined based on the order of synchronization events such as lock points, commit point, arrival of a transaction, etc,.",10.1109/TSE.1983.234783,IEEE Transactions on Software Engineering,"Algorithm design and analysis,Concurrency control,History,Concurrent computing,System recovery,Database systems,Robustness,Control system analysis,Computer science,Management information systems","S. Andler, Predicate path expressions: A high-level synchronization mechanism, Aug. 1979.||P. A. Bernstein, D. W. Shipman and W. S. Wong, ""Formal aspects of serializability in database concurrency control"", IEEE Trans. Software Eng., vol. SE-5, pp. 203-216, May 1979.||P. A. Bernstein and N. Goodman, ""Concurrency control in distributed database systems"", ACM Comput. Surveys, vol. 13, pp. 185-222, June 1981.||B. Bhargava and C. T. Hua, ""The causal graph model for distributed database synchronization algorithms"", IEEE Proc. 4th Int. Comput. Software Applications Conf. (COMPSAC), pp. 444-452, 1980-Oct.||B. Bhargava, ""Concurrency control and reliability in distributed database system"" in Software Engineering Handbook, NJ, Princeton:Van Nostrand Reinhold, 1983.||C. Hua and B. Bhargava, ""Classes of serializable histories and synchronization algorithms in distributed database systems"", Proc. IEEE Int. Conf. Distributed Comput. Syst., 1982-Oct.-18-22.||R. H. Campbell and A. N. Habermann, ""he specification of process synchronization by path expressions"", Lecture Notes in Computer Science, vol. 16, pp. 89-102, 1974.||C. A. Ellis, ""Consistency and correctness of duplicate database systems"", Proc. 6th ACM Symp. Operating Syst., 1977-Nov.||K. P. Eswaran, J. N. Gray, R. Lone and A. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, pp. 624-633, Nov. 1976.||H. J. Genrich and K. Lautenbach, ""The analysis of distributed systems by means of predicate/transition nets"", Proc. Int. Symp. Semantics Concurrent Computation (Lecture Notes in Computer Science 70), pp. 123-146, 1979.||J. N. Gray, A transaction model, Feb. 1980.||C. T. Hua and B. Bhargava, ""Analysis of the majority consensus algorithm for correctness and performance using the event ordering approach"", IEEE Proc. Int. Conf. Inform. and Commun., 1983-Apr.||C. T. Hua, Verification of concurrency control algorithms for distributed database systems, Sept. 1981.||H. T. Kung and C. H. Papadimitriou, ""An optimality theory of concurrency control for databases"", Proc. ACM SIGMOD 1979, pp. 116-126, 1979-May.||L. Lamport, Towards a theory of correctness for multi-user data base systems, Oct. 1976.||L. Lamport, ""Time clocks and the ordering of events in a distributed system"", Commun. Ass. Comput. Mach., vol. 21, pp. 558-564, July 1978.||P. E. Lauer and R. H. Campbell, ""Formal semantics for a class of high level primitives for coordinating concurrent processes"", Acta Informatica, vol. 5, pp. 297-332, 1975.||D. A. Menasce, G. Popek and R. Muntz, ""A locking protocol for resource coordination in distributed databases"", Trans. Database Syst., vol. 5, pp. 103-138, June 1980.||C. H. Papadimitriou, ""The serializability of concurrent database updates"", J. Ass. Comput. Mach., vol. 26, pp. 631-653, Oct. 1979.||J. L. Peterson, ""Petri nets"", Comput. Surveys, vol. 9, pp. 223-252, Sept. 1977.||D. L. Rosenkrantz, R. E. Stearns and P. M. Lewis, ""System level concurrency control for distributed database systems"", ACM Trans. Database Syst., vol. 3, pp. 178-198, June 1978.||G. Rozenberg, L Systems, New York:Springer-Verlag, 1974.||M. W. Shields, ""Adequate path expressions"", Proc. Int. Symp. Semantics Concurrent Computation (Lecture Notes in Computer Science 70), pp. 249-265, 1979.||A. Silberschatz and Z. Kedem, ""Consistency in hierarchical database systems"", J. Ass. Comput. Mach., vol. 27, pp. 72-80, Jan. 1980.||R. H. Thomas, ""A majority consensus approach to concurrency control"", ACM Trans. Database Syst., vol. 4, pp. 180-209, June 1979.||K. Voss, ""Using predicate/transition nets to model and analyze distributed database systems"", IEEE Trans. Software Eng., vol. SE-6, pp. 539-544, Nov. 1980.||",A Causal Model for Analyzing Distributed Concurrency Control Algorithms
"G.I. Davida&&Department of Electrical Engineering and Computer Science, University of Wisconsin, Milwaukee, WI, USA|D.J. Linton&&Univac Corporation, Minneapolis, MN, USA|C.R. Szelag&&Bell Laboratories, Inc., Holmdel, NJ, USA|D.L. Wells&&Department of Electrical Engineering and Computer Science, University of Wisconsin, Milwaukee, WI, USA|","Databases may be compromised by asking a set of queries which return only statistical information and making inferences about a specific entry from the results of the set of queries. We present methods of constructing the set of queries to compromise a database where all the queries in the set return the maximum of a set of k elements, or all queries return the mean of a set of k elements. In the case of the mean query, all elements involved will be compromised. We also consider bounds on the number of queries required to compromise the database.",10.1109/TSE.1978.234140,IEEE Transactions on Software Engineering,"Data security,Transaction databases","D. Dobkin, A. Jones and R. Lipton, Secure databases: Protection against user inference, 1976.||R. DeMillo, D. Dobkin and R. Lipton, ""Even data bases that lie can be compromised"", IEEE Trans. Software Engineering (Short Notes, vol. SE-4, pp. 73-75, Jan. 1978.||J. S. Fenton, ""Memoryless subsystems"", Comput. J., vol. 17, no. 7, 1974.||M. Hall, Combinatorial Theory, MA, Boston:Ginn and Blaisdell, 1967.||A. Mood, F. Graybill and D. Boes, Introduction to the Theory of Statistics, New York:McGraw-Hill, 1963.||",Database Security
"Ning-San Chang&&School of Electrical Engineering, Purdue University, West Lafayette, IN, USA|King-Sun Fu&&School of Electrical Engineering, Purdue University, West Lafayette, IN, USA|","Query-by-Pictorial-Example is a relational query language introduced for manipulating queries regarding pictorial relations as well as conventional relations. In addition to the manipulating capabilities of the conventional query languages, queries can also be expressed in terms of pictorial examples through a display tenninal. Example queries are used to illustrate the language facilities.",10.1109/TSE.1980.230801,IEEE Transactions on Software Engineering,"Satellites,Image processing,Remote sensing,Image storage,Database languages,Image databases,Information retrieval,Relational databases,Image recognition,Packaging","C. J. Date, An Introduction to Database Systems, MA, Reading:Addison-Wesley, 1977.||N. S. Chang and K. S. Fu, A relational database system for images, May 1979.||K. S. Fu and A. Rosenfeld, ""Pattern recognition and image processing"", IEEE Trans. Comput., vol. C-25, pp. 1336-1346, Dec. 1976.||E. F. Codd, ""A relational model of data for large shared data banks"", Commun. Ass. Comput. Mach., vol. 13, June 1970.||N. S. Chang and K. S. Fu, ""On the construction of relational databases from pictorial data"", Proc. Ist Int. Symp. Policy Analysis and Inform. Syst., 1979-June-28-30.||S. Y. Lu and K. S. Fu, ""Error-correction tree automata for syntactic pattern recognition"", IEEE Trans. Comput., vol. C-27, pp. 1040-1053, Nov. 1978.||N. S. Chang and K. S. Fu, ""Parallel parsing of tree languages for syntactic pattern recognition"", Pattern Recognition, vol. 11, pp. 213-222, 1979.||N. S. Chang and K. S. Fu, ""Parallel parsing of tree languages"", Proc. 1978 IEEE Conf. Pattern Recognition and Image Processings.||M. M. Zloof, ""Query by example"", Proc. AFIPS 1975 NCC, vol. 44, pp. 431-438.||E. Ritchie and K. Thompson, ""The UNIX time-sharing system"", Commun. Ass. Comput. Mach., vol. 17, pp. 365-375, July 1974.||Pictorial Information Systems, New York:Springer-Verlag, 1980.||",Query-by-Pictorial-Example
"C.J.P. Lucena&&Departamento de Informatica, Pontificia Universidade Catolica, Rio de Janeiro, Brazil|T.H.C. Pequeno&&Departamento de Informatica, Pontificia Universidade Catolica, Rio de Janeiro, Brazil|",The present paper discusses some issues in program synthesis by relating the idea of systematic program derivation with the concepts of data type and correctness of data representation. The notion of an incomplete definition of a data type at a high level of abstraction is introduced. The ideas are illustrated through an example previously discussed in the literature by D. Gries.,10.1109/TSE.1979.230194,IEEE Transactions on Software Engineering,"Computer aided software engineering,Programming profession,Software engineering,Computer architecture,Equations,Transforms,Software systems,Transformers,Collaborative work","R. W. Floyd, ""Assigning meanings to programs"" in Mathematical Aspects of Computer Science, RI, Providence:American Mathematical Society, vol. XIX, 1967.||R. M. Burstall and J. Darlington, ""A transformation system for developing recursive programs"", J. Assoc. Comput. Mach., Jan. 1977.||F. L. Bauer, Programming as an evolutionary process, Berisht, Munchen:Institut Fur Informatik, Technische Univ., 1976.||J. Arsac, Nouvelles Lessons de Programmacion, France, Paris:Dunod.||E. Dijkstra, ""Guarded commands non-determinacy and a calculus for the derivation of programs"", Proc. Int. Conf. on Reliable Software, 1975.||E. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||Z. Manna and R. Waldinger, Synthesis: Dreams programs, Nov. 1977.||S. L. Gerhart, ""Knowledge about programs: A model and a case study"", Proc. Int. Conf. Reliable Software, 1975.||S. L. Gerhart, ""Proof theory of partial correctness verification systems"", SIAM J. Comput., vol. 5, no. 3, 1976.||D. Gries, ""An illustration of current ideas on the derivation of correctness proofs and correct programs"", IEEE Trans. Software Eng., vol. SE-2, Nov. 1976.||N. Wirth, Algorithms + Data Structure = Programs, NJ, Englewood Cliffs:Prentice-Hall, 1976.||C. A. R. Hoare, ""Proof of correctness of data representations"", Acta Inform., vol. 1, 1972.||B. Liskov and S. Zilles, ""Programming with abstract data types"", Proc. ACM SIGPLAN Conf. Very High Level Languages, 1974.||J. Dennis, ""An example of programming with abstract data types"", Sigplan Notices, vol. 10, no. 7, 1975.||W. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, no. 4, 1976.||C. A. R. Hoare and N. Wirth, ""An axiomatic definition of the programming language Pascal"", Acta Inform., vol. 2, 1973.||B. Liskov and S. Ziiles, ""Specification techniques for data abstractions"", IEEE Trans. Software Eng., vol. SE-1, Mar. 1975.||J. Guttag, ""Abstract data types and the development of data structures"", Commun. Assoc. Comput. Mach., vol. 20, no. 6, 1977.||O. Dahl and C. A. R. Hoare, ""Hierarchical program structures"" in Structured Programming, New York:Academic Press, 1972.||W. A. Wulf, Alphard: Toward a language to support structured programs, PA, Pittsburgh:Carnegie-Mellon Univ., 1974.||",Program Derivation Using Data Types: A Case Study
"S. Ceri&&Dipartimento di Elettronica, Politecnico di Milano, Milan, Italy|S. Navathe&&Department of Computer and Information Sciences, University of Florida, Gainesville, FL, USA|G. Wiederhold&&Department of Computer Science, University of Stanford, Stanford, CA, USA|","The optimal distribution of a database schema over a number of sites in a distributed network is considered. The database is modeled in terms of objects (relations or record sets) and links (predefined joins or CODASYL sets). The design is driven by user-supplied information about data distribution. The inputs required by the optimization model are: 1) cardinality and size information about objects and links, 2) a set of candidate horizontal partitions of relations into fragments and the allocations of the fragments, and 3) the specification of all important transactions, their frequencies, and their sites of origin.",10.1109/TSE.1983.234957,IEEE Transactions on Software Engineering,"Distributed databases,Transaction databases,Design methodology,Network topology,Radio spectrum management,Functional programming,Integer linear programming,Cost function,Indexes","S. B. Yao, S. B. Navathe and J. L. Weldon, ""An integrated approach to logical database design"", Proc. 1978 NYU Symp. Database Design (Lecture Series in Computer Science), vol. 132, 1982.||V. Y. Lum, ""1978 New Orleans database design workshop report"", Proc. 5th Int. Very Large Database Conf., 1979-Oct.||S. B. Navathe and M. Schkolnick, ""View Representation in Logical Database Design"", Proc. ACM-SIGMOD Int. Conf. Management of Data, pp. 144-156, 1978.||S. B. Navathe and S. G. Gadgil, ""A methodology for view integration in logical database design"", Proc. 8th Int. Conf. Very Large Databases, 1982-Sept.||G. Wiederhold and R. El-Masri, ""The structural model for database design"" in The Entity Relationship Approach to System Analysis and Design, North-Holland, pp. 237-257, 1980.||W. W. Chu, ""Optimal file allocation in a multiple computer system"", IEEE Trans. Comput., vol. C-18, no. 10, 1969.||R. G. Casey, ""Allocation of copies of a file in an information network"", Proc. AFIPS 1972 SJCC, vol. 40, pp. 617-625, 1972.||K. P. Eswaran, ""Placement of records in a file and file allocation in a computer network"", Proc. IFIP Congr., 1974.||C. V. Ramamoorthy and B. W. Wah, ""The placement of relations on a distributed relational database"", Proc. 1st Int. Conf. Distributed Comput. Syst., 1979.||J. Akoka, ""Design of optimal distributed database systems"" in Distributed Databases, North‑Holland, 1982.||S. Ceri, G. Martella and G. Pelagatti, ""Optimal file allocation for a distributed database on a network of minicomputers"", Proc. Int. Conf. Databases, 1980-July.||J. A. Hoffer and D. G. Severance, ""The use of cluster analysis im physical database design"", Proc. 1st Int. Conf. Very Large Databases, 1975.||J. A. Hoffer, ""An integer programming formulation of computer database design problems"", Inform. Sci., vol. 11, pp. 29-48, July 1976.||M. Hammer and B. Niamir, ""A heuristic approach to attribute partitioning"", Proc. ACM-SIGMOD Int. Conf. Management of Data, 1979.||S. K. Chang and W. H. Cheng, ""A methodology for structured database decomposition"", IEEE Trans. Software Eng., vol. SE-6, Mar. 1980.||V. K. M. Whitney, A study of optimal file assignment and Communication network configuration in remote-access computer message processing and communications systems, 1970.||S. Mahmoud and J. S. Riordon, ""Optimal allocation of resources in distributed information networks"", ACM TODS, vol. 1, no. 1, 1976.||H. L. Morgan and K. D. Levin, ""Optimal program and data locations in computer networks"", Commun. Ass. Comput. Mach., vol. 20, no. 5, pp. 315-322, 1977.||P.P.S. Chen and J. Akoka, ""Optimal design of distributed information systems"", IEEE Trans. Comput., vol. C-29, Dec. 1980.||M. L. Fisher and D. S. Hochbaum, ""Database location in computer networks"", J. Ass. Comput. Mach., vol. 27, pp. 718-735, Oct. 1980.||K. B. Irani and N. G. Khabbaz, ""A model for a combined communication network design and file alocation for distributed databases"", Proc. lst Int. Conf. Distributed Comput. Syst., 1979.||E. F. Codd, ""Recent investigations into relational database systems"", Proc. IFIP Congr., 1974.||P.P.S. Chen, ""The entity-relationship model–Towards a unified view of data"", ACM TODS, vol. 1, Mar. 1976.||R. El-Masri and G. Wiederhold, ""Data model integration using the structural model"", Proc. ACM-SIGMOD Int. Conf. Management of Data, 1979.||S. Ceri, M. Negri and G. Pelagatti, ""Horizontal data partitioning in database design"", Proc. ACM–SIGMOD Int. Conf Management of Data, 1982.||G. Wiederhold, Database Design, New York:McGraw‑Hill, 1982.||Y.W. Su, H. Lam and D. H. Lo, ""Transformation on data traversals and operations in application programs to account for semantic changes of databases"", ACM TODS, vol. 6, June 1981.||T. J. Teorey and J. P. Fry, ""The logical record access approach to database design"", ACM Comput. Surveys, vol. 12, June 1980.||P. A. Bernstein, N. Goodman, E. Wong, C. L. Reeve and J. B. Rothnie, ""Query processing in a system for distributed databases (SDD-1)"", ACM TODS, vol. 6, pp. 602-625, Dec. 1981.||S. Ceri and G. Pelagatti, ""The allocation of operations in distributed database access"", IEEE Trans. Comput., vol. C-32, 1982.||D. Daniels, ""An introduction to distributed query compilation in R*"", Proc. 2nd Int. Symp. Distributed Data Bases, 1982-Sept.||A. R. Hevner and S. B. Yao, ""Query processing in distributed databases"", IEEE Trans. Software Eng., vol. SE-5, May 1979.||S. B. Navathe, ""Schema analysis for database restructuring"", ACM TODS, vol. 5, pp. 157-184, June 1980.||T. Minoura and G. Wiederhold, ""Resilient extended true-copy token scheme for a distributed database system"", IEEE Trans. Software Eng., vol. SE-8, pp. 172-188, May 1982.||C. Baldissera, S. Ceri and A. Colorni, ""Optimization methods and computer programs"", Informatica Series, 1981.||S. B. Navathe, S. Ceri, G. Wiederhold and J. Dou, Vertical partitioning for physical and distribution design of databases, Dec. 1982.||",Distribution Design of Logical Database Schemas
"T. Murata&&Department of Information Engineering, University of Illinois, Chicago, IL, USA|","This paper presents a method for synthesizing or growing live and safe marked graph models of decision-free concurrent comutations. The approach is modular in the sense that subsystems r represented by arcs (and nodes) are added one by one without the need of redesigning the entire system. The foliowing properties of marked graph models can be prescribed in the synthesis: liveness (absence of deadlocks), safeness (absence of overflows), the number of reachability classes, the maximum resource (temporary storage) requirement, computation rate (performance), as well as the numbers of arcs and states.",10.1109/TSE.1980.230802,IEEE Transactions on Software Engineering,"Concurrent computing,Petri nets,System recovery,Computational modeling,Power system modeling,Circuit synthesis,Application software,Software systems,Hardware,Flowcharts","T. Agerwala, ""Some applications of Petri nets"", Proc. NEC '78, vol. 32, pp. 149-154, 1978-Oct.||""Putting Petri nets to work"", Computer, vol. 12, pp. 85-94, Dec. 1979.||J. L. Peterson, ""Petri nets"", Computing Surveys, vol. 9, pp. 223-252, Sept. 1977.||R. Valette and R. Prajoux, ""A model for parallel control systems and communications systems"", Proc. Conf Inform. Sci. Syst., 1976-Mar./Apr.||T. Agerwala and Y. C. Choed-Amphai, ""A synthesis rule for concurrent systems"", Proc. l5th Design Auto Conf., pp. 305-311, 1978-June.||T. Murata, ""Circuit theoretic analysis and synthesis of marked graphs"", IEEE Trans. Circuits Syst., vol. CAS-24, pp. 400-405, July 1977.||M. Hack, Decidability questions for Petri nets, Cambridge:M.I.T. Lab. Comput. Sci., June 1976.||P. M. Merlin, ""A methodology for the design and implementation of communication protocols"", IEEE Trans. Commun., vol. COM-24, pp. 614-621, June 1976.||C. V. Ramamoorthy and G. S. Ho, ""Performance evaluation of asynchronous concurrent systems using Petri nets"", IEEE Trans. Software Eng., vol. SE-6, pp. 440-449, Sept. 1980.||G. J. Nutt, ""Evaluation nets for computer systems performance analysis"", FJCC AFIPS 1972, vol. 41, pp. 279-286, 1972.||A. L. Davis, ""DDN's–A low-level program schema for fully distributed systems"", Proc. lst European Conf. Parallel Distributed Processing, pp. 1-7, 1979-Feb.||R. E. Miller, ""Relationships among models of parallelism and synchronization"", Conf. Petri Nets and Related Methods, 1975-July.||T. Murata, ""Petri nets marked graphs and circuit systems theory–A recent CAS application"", Circuits and Systems, vol. 10, pp. 2-12, June 1977.||F. G. Commoner, ""Marked directed graphs"", J. Comp. Syst. Sci., vol. 5, pp. 511-523, Oct. 1971.||T. Murata and J. Y. Koh, ""Reduction and expansion of live and save marked graphs"", IEEE Trans. Circuits Syst., vol. CAS-27, pp. 68-70, Jan. 1980.||R. Johnsonbaugh, M. C. Kao and T. Murata, ""Additional transformations of live and safe marked graphs"", Proc. 1979 Allerton Conf. Communication Control and Computing, pp. 387-396, 1979-Oct.||F. G. Commoner, Final report for the project–Development of theoretical foundations for description and analysis of discrete information systems, Mass. Comput. Ass., Inc., vol. II, May 1974.||T. Murata, ""Relevance of network theory to models of distributed/parallel processing"", J. Franklin Inst..||C. Ramchandami, Analysis of asynchronous concurrent systems by Petri nets, 1974.||J. Sifakis, ""Use of Petri nets for performance evaluation"" in Measuring Modelling and Evaluating Computer Systems, The Netherlands, Amsterdam:North‑Holland, pp. 75-93, 1977.||K. Tani and T. Murata, ""Scheduling parallel computations with storage constraints"", Proc. 12th Asilomar Conf. Circuits Syst. Comput., pp. 736-743, 1978-Nov.||A. J. Hoffman and J. B. Kruskal, ""Integer boundary points of convex polyhedra"", Linear Inequalities and Related Systems Ann. Math. Study 38, pp. 223-246, 1956.||R. Johnsonbaugh and T. Murata, ""Analysis of resource requirements in marked graph computation models"", Proc. IEEE Int. Symp. Circuits Syst., pp. 342-345, 1980-Apr.||",Synthesis of Decision-Free Concurrent Systems for Prescribed Resources and Performance
"J. Cohen&&Department of Physics, Brandeis University, Waltham, MA, USA|R. Sitver&&Wharton Computational Services Center, University of Pennsylvania, Philadelphia, PA, USA|","Program transformation is used to show the correspondence between two known algorithms for translating parenthesized expressions into their polish counterparts. The first algorithm is a syntax-directed translator which produces output upon the recognition of predefined syntactic rules. The second one, suggested by Dijkstra, is of empirical nature: it performs the translation by simulating the operation of a railyard shunt. The second algorithm is more efficient than the first, but less general. This work enables one 1) to assert the correctness of the empirical algorithm, 2) to compare the relative efficiencies of the two algorithms, and 3) to gain insight into the circumstances in which syntax-directed translation may be improved by generalizing the ideas involved in Dijkstra's algorithm.",10.1109/TSE.1979.230195,IEEE Transactions on Software Engineering,"Computer aided software engineering,Switches,Algorithm design and analysis,Writing,Flowcharts,Physics,Computational modeling,Arithmetic","A. V. Aho and J. D. Ullman, Principles of Compiler Design, MA, Reading:Addison-Wesley, 1977.||F. L. Bauer, Compiler Construction: An Advanced Course Lecture Notes in Computer Science No. 21, New York:Springer Verlag, 1974.||J. R. Bell, ""A new method for determining linear precedence functions for precedence granmmars"", Commun. Ass. Comput. Mach., pp. 567-569, Oct. 1969.||R. M. Burstall and J. Darlington, ""A transformation system for developing recursive programs"", J. Ass. Comput. Mach., pp. 44-67, Jan. 1977.||J. Cohen and M. Roth, ""Analyses of deterministic parsing algorithms"", Commun. Ass. Compact. Mach., vol. 21, no. 6, June 1978.||E. W. Dijkstra, Making a Translator for Algol 60 Annual Review in Automatic Programming No. 3, New York:Pergamon, 1963.||R. W. Floyd, ""Syntactic analysis and operator precedence"", J. Ass. Comput. Mach., vol. 10, pp. 316-333, 1963.||S. Gerhart, ""Correctness preserving program transformations"", Conf. Rec. 2nd ACM Symp. on Principles of Programming Languages, pp. 54-66, 1975-Jan.||D. E. Knuth and F. R. Stevenson, ""Optimal measurement points for program frequency counts"", BIT, vol. 13, pp. 313-322, 1973.||D. B. Loveman, ""Program improvement by source-to-source transformation"", J. Ass. Comput. Mach., vol. 24, pp. 121-145, Jan. 1977.||B. Randell and L. J. Russell, Algol 60 Implementation, New York:Academic, 1964.||T. A. Standish, The Irvine Program Transformation Catalogue, Irvine:Dep. Inform. Comput. Sci., Univ. California, 1976.||B. Wegbreit, ""Goal-directed program transformation"", IEEE Trans. Software Eng., vol. SE-2, pp. 69-80, June 1976.||",A Case Study in Program Transformation: Translation into Polish
"To-Yat Cheung&&Department of Computer Science, University of Ottawa, Ottawa, ONT, Canada|","This paper shows that graph traversal techniques have fundamental differences between serial and distributed computations in their behaviors, computational complexities, and effects on the design of graph algorithms. It has three major parts. Section I describes the computational environment for the design and description of distributed graph algorithms in terms of an architectural model for message exchanges. The computational complexity is measured in terms of the number of messages transmitted. Section II presents several distributed algorithms for the pure traversal, depth-first search, and breadth-first search techniques. Their complexities are also given. Through these descriptions are brought out some of the intrinsic differences in the behaviors and complexities of the fundamental traversal techniques between a serial and a distributed computation environment. Section III gives the distributed version of the Ford and Fulkerson algorithm for the maximum flow problem by means of depth-first search, the largest-augmentation search and breadth-first search. The complexities of these methods are found to be 0(f*|A|), 0((l + logM/(M-1)f*|V||A|) and O(|V|6), respectively, where f* is the maximum flow value of the problem, M is the maximum number of ucs in a cut, |V| is the number of vertices, and |A| is the number of arcs. Lastly, it is shown that the largest augmentation search may be a better method than the other two. This is contrary to the known results in serial computation.",10.1109/TSE.1983.234958,IEEE Transactions on Software Engineering,"Distributed computing,Algorithm design and analysis,Computational complexity,Distributed algorithms,Computer networks,Concurrent computing,Councils,Computer science,Computer architecture,Software algorithms","J. M. Abram and I. B. Rhodes, ""A decentralized shortest-path algorithm"", Proc. 16th Annu. Conf. Commun. Contr. Comput., pp. 271-277, 1978.||M. F. Aburdene, ""Numbering the nodes of a graph by distributed algorithms"", Proc. 17th Annu. Conf. Commun. Contr. Comput., pp. 634-639, 1979.||E.J.H. Chang, ""Echo algorithms: Depth parallel operations on general graphs"", IEEE Trans. Software Eng., vol. SE-8, pp. 391-401, 1982.||T. Y. Cheung, ""Computational comparison of eight methods for the maximum network flow problem"", ACM Trans. Math. Software, vol. 6, no. 1, pp. 1-16, 1980.||T. Y. Cheung, Graph traversal techniques and the maximum flow problem in distributed computations.||J. Edmonds and R. M. Karp, ""Theoretical improvements in algorithmic efficiency for network flow problems"", J. Ass. Comput. Mach., vol. 19, no. 2, pp. 248-264, 1972.||E. Korach, D. Rotem and N. Santoro, ""Efficient distributed algorithms for finding centers and medians in a network"", Proc. 18th Annu. Conf. Commun. Contr. Comput., 1980.||N. A. Lynch, ""Fast allocation of nearby resources in a distributed system"", Proc. 12th Annu. ACM Symp. Theory Comput., pp. 70-81, 1980.||E. Reghbati and D. G. Corneil, ""Parallel computations in graph theory"", SIAM Comput., vol. 7, no. 2, pp. 230-237, 1978.||N. Santoro, ""Determining topology information in distributed networks"", Proc. 11th Southeastern Conf. Combinatorics Graph Theory and Comput. (Congressus Numerantium), vol. 29, pp. 869-878, 1980.||N. Santoro, ""Distributed algorithms for very large distributed environments: New results and research directions"", Proc. Canadian Inform. Processing Soc. Annu. Meeting, pp. 1.4.1-1.4.5, 1981.||P. M. Spira, ""Communication complexity of distributed minimum spanning tree algorithms"", Proc. 2nd Berkeley Conf. Distributed Data Management and Comput. Networks, pp. 236-244, 1977.||S. Toueg, An all-pairs shortest-path distributed algorithm, 1980.||",Graph Traversal Techniques and the Maximum Flow Problem in Distributed Computation
"Kuo-Chung Tai&&Department of Computer Science, North Carolina State University, Raleigh, NC, USA|","This paper explores the testing complexity of several classes of programs, where the testing complexity is measured in terms of the number of test data required for demonstrating program correctness by testing. It is shown that even for very restrictive classes of programs, none of the commonly used test criteria, namely, having every statement, branch, and path executed at least once, is nearly sufficient to guarantee absence of errors.",10.1109/TSE.1980.234501,IEEE Transactions on Software Engineering,"Software testing,Reliability theory,Automatic testing,Costs,Computer science,Information resources,Data structures,Formal languages,Linear code","A. T. Acree, T. A. Budd, R. A. DeMillo, R. J. Lipton and F. G. Sayward, Mutation analysis, 1979.||T. A. Budd, R. A. DeMillo, R. A. Lipton and F. G. Sayward, ""Theoretical and empirical studies on using program mutation to test the functional correctness of programs"", Conf. Rec. 7th ACM Symp. Principles of Programming Languages, pp. 220-232, 1980-Jan.||L. A. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept. 1976.||R. A. DeMillo, R. J. Lipton and F. G. Sayward, ""Hints on test data selection: Help for the practicing programmer"", Computer, vol. 11, pp. 34-43, Apr. 1978.||J. L. Elshoff, ""An analysis of some commercial PL/1 programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 113-120, June 1976.||K. A. Foster, ""Error sensitive test cases analysis"", IEEE Trans. Software Eng., vol. SE-6, pp. 258-264, May 1980.||H. N. Gabow, S. N. Maheshwari and L. J. Osterweil, ""On two problems in the generation of program test path"", IEEE Trans. Software Eng., vol. SE-2, pp. 227-231, Sept. 1976.||M. Gardner, Mathematical Diversions from Scientific American, New York:Simon and Schuster, 1966.||C. Gannon, ""Error detection using path testing and static analysis"", Computer, vol. 12, pp. 26-31, Aug. 1979.||M. Geller, ""Test data as an aid in proving program correctness"", Commun. Ass. Comput. Mach., vol. 21, pp. 368-375, May 1978.||J. B. Goodenough, ""A survey of program testing issues"" in Research Directions in Software Technology, NJ, Englewood:Prentice-Hall, pp. 316-340, 1979.||J. B. Goodenough and S. L. Gerhart, ""Toward a theory of test data selection"", IEEE Trans. Software Eng., vol. SE-1, pp. 156-173, June 1975.||R. G. Hamlet, ""Critique of reliability theory"", Dig. Workshop on Software Testing and Test Documentation, pp. 57-69, 1978-Dec.||M. A. Hennell, ""An experimental testbed for numerical software"", Comput. J., vol. 21, pp. 333-336, 1978.||M. A. Hennell and D. Hedley, ""An experimental testbed for numerical software part II: Algol 68"", Comput. J., vol. 22, pp. 53-56, Feb. 1979.||M. A. Hennell, M. R. Woodward and D. Hedley, ""On program analysis"", Inform. Processing Lett., vol. 5, pp. 136-140, Nov. 1976.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-560, May 1975.||W. E. Howden, ""Reliability of the path analysis testing strategy"", IEEE Trans. Software Eng., vol. SE-2, pp. 208-215, Sept. 1976.||W. E. Howden, ""Algebraic program testing"", Acta Informatica, vol. 10, pp. 53-56, 1978.||W. E. Howden, ""Theoretical and empirical studies of program testing"", IEEE Trans Software Eng., vol. SE-4, pp. 293-297, July 1978.||W. E. Howden, ""Functional program testing"", IEEE Trans. Software Eng., vol. SE-6, pp. 162-169, Mar. 1980.||W. E. Howden and H. P. Eichhorst, ""Proving properties of programs from program traces"" in Software Testing and Validation Techniques, IEEE Comput. Soc., pp. 46-56, 1978.||J. C. Huang, ""Program instrumentation and software testing"", Computer, vol. 11, pp. 25-33, Apr. 1978.||J. C. Huang, ""Detection of data flow anomaly through program instrumentation"", IEEE Trans. Software Eng., vol. SE-5, pp. 226-236, May 1979.||D. E. Knuth, ""An empirical study of FORTRAN programs"", Software-Practice and Experience, vol. 1, pp. 105-133, Apr.-June 1971.||E. F. Miller and R. A. Melton, ""Automated generation of test case data sets"", Proc. 1975 Int. Conf Reliable Software, pp. 51-58, 1975.||G. J. Myers, The Art of Software Testing, NJ, Englewood:Prentice-Hall, 1979.||S. C. Ntafos and S. L. Hakimi, ""On path cover problems in digraphs and applications to program testing"", IEEE Trans. Software Eng., vol. SE-5, pp. 520-529, Sept. 1979.||C. V. Ramamoorthy, S. F. Ho and W. T. Chen, ""On the automated generation of program test data"", IEEE Trans. Software Eng., vol. SE-2, pp. 293-300, Dec. 1976.||C. V. Ramamoorthy, K. H. Kim and W. T. Chen, ""On the automated generation of program test data"", IEEE Trans. Software Eng., vol. SE-1, pp. 403-410, Dec. 1975.||K. C. Tai and L. E. Deimel, A generalization of the pancake problem, Raleigh:Dep. Comput. Sci., North Carolina State Univ., 1980.||E. J. Weyuker and T. J. Ostrand, ""Theories of program testing and the application of revealing subdomains"", IEEE Trans. Software Eng., vol. SE-6, pp. 236-246, May 1980.||L. J. White and E. I. Cohen, ""A domain strategy for computer program testing"", IEEE Trans. Software Eng., vol. SE-6, pp. 247-257, May 1980.||L. J. White, F. C. Teng, H. Kuo and D. Gleman, An error analysis of the domain testing strategy, Dec. 1978.||M. R. Woodward, M. A. Hennell and D. Hedley, ""Experience with path analysis and testing of programs"", IEEE Trans. Software Eng., vol. SE-6, pp. 278-286, May 1980.||",Program Testing Complexity and Test Criteria
"V.D. Gligor&&Department of Computer Science, University of Maryland, College Park, MD, USA|B.G. Lindsay&&IBM Research Laboratory, San Jose, CA, USA|","When typed objects migrate in virtual memory, onto off-ine storage, or among the nodes of a network, the type managers must relinguish control over the object representation and state. In this paper we present a mechanism which allows a type manager to authenticate and reinstantiate migrated objects. This mechanism also solves some problems stemming from the hierarchical structure of the system itself. The mechanism is based on a combination of cryptographic techniques using (nondistributable) centralized, secret keys, and data redundancy which characterizes the object representation and state.",10.1109/TSE.1979.230196,IEEE Transactions on Software Engineering,"Authentication,Cryptography,Kernel,Redundancy,Memory management,Control systems,Maintenance,Content management,Hierarchical systems,Operating systems","B. W. Lampson and H. E. Sturgis, ""Reflections on an operating system design"", Commun. Ass. Comput. Mach., vol. 19, pp. 251-265, May 1976.||D. England, ""Capability concept mechanism and structure in system 250"", Proc. IRIA Int. Workshop on Protection in Operating Systems, pp. 63-82, 1974-Aug.||W. A. Wulf, ""HYDRA: The kernel of a multiprocessor operating system"", Commun. Ass. Comput. Mach., vol. 17, pp. 337-345, June 1974.||R. M. Needham and R. D. H. Walker, ""The Cambridge CAP computer and its protection system"", Proc. 6th Symp. Operating Systems Principles, pp. 1-10, 1977-Nov.||D. D. Redell, Naming and protection in extendible operating systems, Sept. 1974.||A. K. Jones, ""The object model: A conceptual tool for structuring software"" in Operating Systems–An Advanced Course, New York:Springer-Verlag, pp. 7-16, 1978.||W. Diffie and M. Hellman, ""Privacy and authentication: An introduction to cryptography"", Proc. IEEE, vol. 67, pp. 397-427, 1979-Mar.||J. Smith, The design of Lucifer a cryptographic device for data communications, Apr. 1971.||Data Encryption Standard Federal Information Processing Standard (FIPS) Publication 46, DC, Washington:National Bureau of Standards, U.S. Dep. Commerce, June 1977.||D. D. Chamberlin, J. N. Gray, P. P. Griffiths, M. Mresse, I. L. Traiger and B. W. Wade, ""Data base authorization"" in Foundations of Secure Computation, New York:Academic, pp. 39-56, 1978.||G. J. Popek and C. S. Kline, ""Design issues for secure computer networks"" in Operating Systems–An Advanced Course, New York:Springer-Verlag, pp. 517-546, 1978.||W. W. Peterson and E. J. Welson, Error Correcting Codes, MA, Cambridge:MIT Press, 1972.||W. F. Ehrsam, S. M. Matyas, C. H. Meyer and W. L. Tuchman, ""A cryptographic key management scheme for implementing the data encryption standard"", IBM Syst. J., vol. 17, no. 2, pp. 106-125, 1978.||E. I. Organick and J. G. Cleary, ""A data structure model of the B6700 computer system"", SIGPLAN Notices, vol. 6, pp. 83-145, Feb. 1971.||G. J. Popek and C. S. Kline, ""A verifiable protection system"", Proc. Ist Int. Conf. Reliable Software, pp. 294-304, 1975-Mar.||M. D. Schroeder, ""Engineering a security kernel for MULTICS"", Proc. 5th Symp. Operating Systems Principles, pp. 125-132, 1975-Nov.||W. T. Wilner, ""The design of the Burroughs 1700"", Proc. AFIPS 1972 Fall Joint Comput. Conf., vol. 41, pp. 579-586.||D. L. Chaum and R. S. Fabry, Implementing capability–based protection using encryption, Berkeley:Univ. of California, July 1978.||B. G. Lindsay, ""'Suggestions for an extensible capability-based machine architecture"", presented at the Int. Workshop on Computer Architecture, 1973-June.||E. Cohen and D. Jefferson, ""Protection in the HYDRA operating system"", Proc. 5th Symp. Operating Systems Principles, pp. 141-160, 1975-Nov.||V. D. Gligor, Architectural implications of abstract data type implementation, May 1978.||Proc. Int. Symp. Computer Architecture, pp. 20-30, 1979-Apr.||",Object Migration and Authentication
"L.N. Bhuyan&&Department of Electrical and Computer Engineering, Wayne State University, Detroit, MI, USA|D.P. Agarval&&unknow|","A decimation-in-time radix-2 fast Fourier transform (FFT) algorithm is considered here for implementation in multiprocessors with shared bus, multistage interconnection network (MIN), and in mesh connected computers. Results are derived for data allocation, interprocessor communication, approximate computation time, and speedup of an N point FFT on any P available processing elements (PE's). Further generalization is obtained for a radix-r FFT algorithm. An N X N point two-dimensional discrete Fourier transform (DFT) implementation is also considered when one or more rows of the input data matrix are allocated to each PE.",10.1109/TSE.1983.234959,IEEE Transactions on Software Engineering,"Performance analysis,Multiprocessing systems,Signal processing algorithms,Discrete Fourier transforms,Multiprocessor interconnection networks,Fast Fourier transforms,Costs,Computer networks,Switches,Communication switching","L. R. Rabiner and B. Gold, Theory and Applications of Digital Signal Processing, NJ, Englewood Cliffs:Prentice-Hall, 1975.||B. Lint and T. Agerwala, ""Communication issues in the design and analysis of parallel algorithms"", IEEE Trans. Software Eng., vol. SE-7, pp. 174-188, Mar. 1981.||G. D. Bergland, ""A parallel implementation of the fast Fourier transfer algorithm"", IEEE Trans. Comput., vol. C-21, pp. 366-370, Apr. 1972.||C. R. Vick and J. A. Comell, ""Pepe architecture–t and future"", Proc. AFIPS, vol. 47, pp. 981-992, 1978.||L. J. Siegel, P. T. Muller and H. J. Siegel, ""FFT algorithm for SIMD machines"", Proc. 17th Annu. Allerton Conf. on Com. Contr. and Comput., pp. 1006-1014, 1979-Oct.||M. A. Abidi and D. P. Agrawal, ""On conflict-free permutations in multistage interconnection network"", J. Digital Syst. (Special Issue on Parallel Processing), vol. IV, pp. 115-134, 1980.||H. S. Stone, ""Parallel processing with perfect shuffle"", IEEE Trans. Comput., vol. C-20, pp. 153-16 1, Feb. 1971.||M. C. Pease, ""The indirect binary n-cube microprocessor array"", IEEE Trans. Comput., vol. C-26, pp. 458-473, May 1977.||D. P. Agrawal, ""Graph theoretic analysis and design of multistage interconnection networks"", IEEE Trans. Comput..||L. N. Bhuyan and D. P. Agrawal, ""Design and performance of processor-memory interconnection networks"", Proc. 1982 Int. Conf. Parallel Processing, pp. 2-9, 1982-Aug.||IEEE Trans. Comput..||Y. Wallach and A. Shimor, ""Alternating sequential parallel versions of FFT"", IEEE Trans. Acoust. Speech Signal Processing, vol. ASSP-28, pp. 236-242, Apr. 1980.||W. J. Bouknight, ""The Illiac IV system"", Proc. IEEE, vol. 60, pp. 369-388, 1972-Apr.||S. E. Orcutt, ""Implementation of permutation functions in Illiac IV type computers"", IEEE Trans. Comput., vol. C-25, pp. 929-936, Sept. 1976.||J. Lenfant, ""Parallel permutations of data: A benes network control algorithm for frequently used permutations"", IEEE Trans. Comput., vol. C-27, pp. 637-647, July 1978.||",Performance Analysis of FFT Algorithms on Multiprocessor Systems
"K. Voss&&Gesellschaft fuer Mathematik und Datenverarbeitung mbH, Institut fuer Informations Systeme Forschung, Bonn, Germany|","In this paper, a net model for decentralized control of user accesses to a distributed database is proposed. It is developed in detail for the restricted case of updating distributed copies of a single database. Predicate/transition-nets, a first-order extension of Petri nets, are shown to provide suitable means for concise representation of complex decentralized systems and for their rigorous formal analysis. It will be demonstrated in the present paper how these net models can be constructed and interpreted in a quite natural manner and how they can be analyzed by linear algebraic methods. By this, it will be shown that the modeled distributed database system is deadlock-free and guarantees a consistent database as well as a fair and effective service to the users.",10.1109/TSE.1980.234502,IEEE Transactions on Software Engineering,"Data analysis,Database systems,Distributed databases,Petri nets,Distributed control,System recovery,Synchronization,Distributed processing,Distributed information systems,Centralized control","C. A. Ellis, ""Consistency and correctness of duplicate database systems"", Proc. 6th Symp. on Operating Syst. Principles, 1977-Nov.||ACM Operating Syst. Rev., vol. 11, no. 5, 1977.||K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, ""The notions of consistency and predicate locks in a database system"", Commun. Ass. Comput. Mach., vol. 19, pp. 624-634, Nov. 1976.||H. J. Genrich and K. Lautenbach, ""The analysis of distributed systems by means of predicate/transition-nets"", Proc. Semantics of Concurrent Computation, 1979.||Springer Lecture Notes in Computer Science, New York:Springer-Verlag, pp. 123-146, 1979.||H. J. Genrich and G. Thieler-Mevissen, ""The calculus of facts"" in Mathematical Foundations of Computer Science, New York:Springer-Verlag, pp. 588-595, 1976.||K. Jensen, Coloured Petri nets and the invariant-method, Dep. Comput. Sci., Aarhus Univ., Oct. 1979.||L. Lamport, ""Time clocks and the ordering of events in a distributed system"", Commun. Ass. Comput. Mach., vol. 21, pp. 558-565, July 1978.||K. Lautenbach and H. A. Schmid, ""Use of Petri nets for proving correctness of concurrent process systems"", Proc. IFIP Congress 1974, pp. 187-191, 1974.||G. J. Milne, Modelling distributed database protocols by synchronization processes, Scotland, Edinburgh:Dep. Comput. Sci., Edinburgh Univ., Nov. 1978.||J. L. Peterson, ""Petri nets"", Ass. Comput. Mach. Comput. Surveys, vol. 9, no. 3, 1977.||C. A. Petri, ""Concepts of net theory"", Math. Foundations of Comput. Sci.: Proc. Symp. and Summer School, pp. 137-146, 1973-Sept.-3-8.||C. A. Petri, Interpretations of net theory, West Germany, St. Augustin:Gesellschaft fuer Mathematik und Datenverarbeitung Bonn, 1975.||D. J. Rosenkrantz, R. E. Stearns and P. M. Lewis, ""System level concurrency control for distributed database systems"", ACM Trans. Database Syst., vol. 3, pp. 178-198, June 1978.||R. M. Shapiro and P. S. Thiagarajan, On the maintenance of distributed copies of a data base, West Germany, St. Augustin:Gesellschaft fuer Mathematik und Datenverarbeitung Bonn, 1978.||",Using Predicate/Transition-Nets to Model and Analyze Distributed Database Systems
"P.W. Abrahams&&Department of Computer Science, New York University, New York, NY, USA|L.A. Clarke&&Department of Computer and Information Science, University of Massachusetts, Amherst, MA, USA|","Formatted input-output is available in a number of programming languages. In the most general case, the correspondence between data items and format items cannot be determined during compilation, and so it is determined dynamically during execution. However, in most pairs of data and format lists that occur in practice, determination of the correspondence is in fact possible during compilation. Although some commercial compilers make this determination, there is little published literature on the subject. In this paper, we briefly examine three areas in which compile-time determination of the data-format correspondence is useful: optimization, program validation, and automatic test data generation. A formalism for stating the problem is given, and a solution is discussed in terms of formal language theory. Using this formalism, an algorithm for determining the correspondence is given, and its application is illustrated by examples in both PL/I and Fortran.",10.1109/TSE.1979.230197,IEEE Transactions on Software Engineering,"Data analysis,Automatic testing,Computer languages,Formal languages,Programming profession,Couplings,Writing,Computer science,Information science,Program processors","F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Assoc. Comput. Mach., vol. 19, pp. 137-147, Mar. 1976.||National Standard: Programming Language PLII, American National Standards Institute.||L. A. Clarke, ""A system to generate test data and symbolically execute programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 215-222, Sept. 1976.||L. D. Fosdick and L. J. Osterweil, Data flow analysis in software reliability, vol. 8-3, pp. 305-330, Sept. 1976.||W. H. Harrison, ""Compiler analysis of the value ranges for variables"", IEEE Trans. Software Eng., vol. SE-3, pp. 243-250, May 1977.||J. Hopcroft and J. Ullman, Formal Languages and Their Relation to Automata, MA, Reading:Addison-Wesley, 1969.||W. E. Howden, ""Methodology for the generation of program test data"", IEEE Trans. Comput., vol. C-24, pp. 554-559, May 1975.||OS PL/I Checkout and Optimizing Compilers: Language Reference Manual.||J. C. King, ""A new approach to program testing"", Proc. Int. Conf. Reliable Software, pp. 228-233, 1975-Apr.||D. C. Knuth, ""An empirical study of Fortran programs"", Software-Practice and Experience, vol. 1, pp. 105-133, 1971.||J. A. N. Lee, The Anatomy of a Compiler, New York:Van Nostrand-Reinhold,, 1975.||E. F. Miller and R. A. Melton, ""Automated generation of test case datasets"", Proc. Int. Conf. Reliable Software, pp. 51-58, 1975-Apr.||C. V. Ramamoorthy, S. F. Ho and W. T. Chen, ""On the automated generation of program test data"", IEEE Trans. Software Eng., vol. SE-2, pp. 293-300, Dec. 1976.||I. Torsun and S. Robinson, ""Non-'Interpretive' FORTRAN input/output"", Software-Practice and Experience, vol. 7, pp. 205-213, Mar.-Apr. 1977.||",Compile-Time Analysis of Data List-Format List Correspondences
"R.L. Larsen&&NASA, Washington D.C., DC, USA|A.K. Agrawala&&Department of Computer Science, University of Maryland, College Park, MD, USA|","A dynamic control policy known as ""threshold queueing"" is defined for scheduling customers from a Poisson source on a set of two exponential servers with dissimilar service rates. The slower server is invoked in response to instantaneous system loading as measured by the length of the queue of waiting customers. In a threshold queueing policy, a specific queue length is identified as a ""threshold,"" beyond which the slower server is invoked. The slower server remains busy until it completes service on a customer and the queue length is less than its invocation threshold. Markov chain analysis is employed to analyze the performance of the threshold queueing policy and to develop optimality criteria. It is shown that probabilistic control is sub-optimal to minimize the mean number of customers in the system. An approximation to the optimum policy is analyzed which is computationally simple and suffices for most operational applications.",10.1109/TSE.1983.234960,IEEE Transactions on Software Engineering,"Control systems,Queueing analysis,Network servers,Optimal control,Processor scheduling,Performance analysis,Communication systems,Computer networks,Costs,Dynamic scheduling","A. O. Allen, ""Queueing models of computer systems"", IEEE Computer, vol. 13, pp. 13-24, Apr. 1980.||C. E. Bell, ""Turning off a server with customers present: Is this any way to run an M/M/c queue with removable servers?"", Oper. Res., vol. 23, pp. 517-574, May-June 1975.||C. E. Bell, ""Optimal operation of an M/M/2 queue with removable servers"", Oper. Res., vol. 28, pp. 1189-1204, Sept.-Oct. 1980.||Lecture Notes in Operations Research and Mathematical Economics Vol. 2: A Study of the Queueing Systems MIGII and GI/M/I (by U. Narayan Bhat), Berlin:Springer-Verlag, 1968.||O. J. Boxma, J. W. Cohen and N. Huffels, ""Approximations of the mean waiting time in an M/G/s queueing system"", Oper. Res., vol. 27, pp. 1115-1127, Nov.-Dec. 1979.||P. P. S. Chen, ""Optimal file allocation in multi-level storage systems"", Proc. Nat. Comput. Conf., pp. 277-282, 1973.||Y.-C. Chow and W. H. Kohler, ""Models for dynamic load balancing in a heterogeneous multiple processor system"", IEEE Trans. Comput., vol. C-28, pp. 354-361, May 1979.||J. W. Cohen, ""On the optimal switching level for an M/G/1 queueing system"", Stochastic Processes and Their Applications, vol. 4, pp. 297-316, 1976.||T. B. Crabill, D. Gross and M. J. Magazine, ""A classified bibliography of research on optimal design and control of queues"", Oper. Rs., vol. 25, pp. 219-232, Mar.-Apr. 1977.||C. Derman, Finite State Markovian Decision Processes, New York:Academic, 1970.||R. A. Howard, Dynamic Probabilistic Systems Volume I: Markov Models, New York:Wiley, 1971.||D. P. Heyman, ""Comments on a queueing inequality"", Management Sci., vol. 26, pp. 956-959, Sept. 1980.||L. Kleinrock, Queueing Systems Vol. 1: Theory, New York:Wiley, 1975.||R. L. Larsen, Control of multiple exponential servers with application to computer systems, Apr. 1981.||Y. Levy and U. Yechiali, ""An M/M/s queue with servers vacations"", INFOR, vol. 14, pp. 153-163, June 1976.||J. D. C. Little, ""A proof for the queueing formula: L=XW"", Oper. Res., vol. 9, pp. 383-387, May-June 1961.||M. J. Magazine, ""Optimal control of multi-channel service systems"", Naval Res. Logist. Quart., vol. 18, pp. 177-183, 1971.||M. Rosenshine, ""Queueing theory: The state of the art"", AIIE Trans., vol. 7, pp. 257-267, Sept. 1975.||H. Sakasegawa, ""An approximation formula Lq-a.p/(1 -p)"", Ann. Inst. Statist. Math., vol. 29, pp. 67-75, 1977.||J. G. Shanthikumar, ""On a single-server queue with state-dependent service"", Naval Res. Logist. Quart., vol. 26, pp. 305-309, June 1979.||M. J. Sobel, ""Simple inequalities for multiserver queues"", Management Sci., vol. 26, pp. 951-956, Sept. 1980.||S. Stidham and N. U. Prabhu, ""Optimal control of queueing systems"" in Mathematical Methods in Queueing Theory, New York:Springer-Verlag, pp. 263-294, 1973.||R. R. Weber, ""On the marginal benefit of adding servers to G/GI/m queues"", Management Sci., vol. 36, pp. 946-95 1, Sept. 1980.||W. L. Winston, ""Assignment of customers to servers in a hetero‑geneous queueing system with switching"", Oper. Res., vol. 25, pp. 469-483, May-June 1977.||M. Yadin and P. Naor, ""On queueing systems with variable service capacities"", Naval Res. Logist. Quart., vol. 14, pp. 43-53, Mar. 1967.||",Control of a Heterogeneous Two-Server Exponential Queueing System
"S.S. Yau&&Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, IL, USA|J.S. Collofello&&Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, IL, USA|","Software maintenance is the dominant factor contributing to the high cost of software. In this paper, the software maintenance process and the important software quality attributes that affect the maintenance effort are discussed. One of the most important quality attributes of software maintainability is the stability of a program, which indicates the resistance to the potential ripple effect that the program would have when it is modified. Measures for estimating the stability of a program and the modules of which the program is composed are presented, and an algorithm for computing these stability measures is given. An algorithm for normalizing these measures is also given. Applications of these measures during the maintenance phase are discussed along with an example. An indirect validation of these stability measures is also given. Future research efforts involving application of these measures during the design phase, program restructuring based on these measures, and the development of an overall maintainability measure are also discussed.",10.1109/TSE.1980.234503,IEEE Transactions on Software Engineering,"Stability,Software measurement,Software maintenance,Software quality,Phase measurement,Costs,Electrical resistance measurement,Application software,Large-scale systems,Software systems","B. W. Boehm, ""Software and its impact: A quantitative assessment"", Datamation, pp. 48-59, May 1973.||M. V. Zelkowitz, ""Perspectives on software engineering"", ACM Comput. Surveys, vol. 10, pp. 197-216, June 1978.||N. L. Soong, ""A program stability measure"", Proc. 1977 Annu. ACM Conf., pp. 163-173.||G. J. Myers, ""Reliable Software through Composite Design"", Petrocelli/Charter, pp. 137-149, 1979.||J. A. McCall, P. K. Richards and G. F. Walters, Factors in Software Quality Volume III: Preliminary Handbook on Software Quality for an Acquisition Manager, pp. 2-1-3-7, Nov. 1977.||F. M. Haney, ""Module connection analysis"", Proc. AFIPS 1972 Fall Joint Comput. Conf., vol. 41, pp. 173-179.||S. S. Yau, J. S. Coliofello and T. M. MacGregor, ""Ripple effect analysis of software maintenance"", Proc. COMPSAC 78, pp. 60-65.||S. S. Yau, Self-metric softwarS–ummary of technical p progress, Apr. 1980.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||M. H. Halstead, Elements of Software Science, New York:Elsevier North-Holland, pp. 84-91, 1977.||L. A. Belady and M. M. Lehman, ""The characteristics of large systems"" in Research Directions in Software Technology, MA, Cambridge:M.I.T. Press, pp. 106-139, 1979.||E. Yourdon and L. Constantine, Structured Design, Yourdon, 1976.||",Some Stability Measures for Software Maintenance
"T. Masuda&&Institute of Information Sciences and Electronics, University of Tsukuba, Japan|","It is known that the locality of reference of a program can be improved by restructuring it. One approach for program restructuring is to rearrange the order of relocatable program sectors and to repackage those sectors of a program, that are needed within a relatively short time of one another, into the same virtual page. This approach needs no reprogramming of the source program. However, microscopic analysis of the internal structure of repackaged sectors often shows the existence of sectors only few portions of which are actually referenced while the sectors are in use.",10.1109/TSE.1979.230198,IEEE Transactions on Software Engineering,"Memory management,Microscopy,Operating systems,Program processors,Throughput,Delay,Guidelines,Multidimensional systems","B. S. Brawn, F. G. Gustavson and E. S. Mankin, ""Sorting in a paging environment"", Commun. Ass. Comput. Mach., vol. 13, pp. 483-494, Aug. 1970.||P. J. Denning, ""The working set model for program behavior"", Commun. Ass. Comput. Mach., vol. 11, pp. 323-333, May 1968.||P. J. Denning, ""Virtual memory"", Computing Surveys, vol. 2, pp. 153-189, Sept. 1970.||J. L. Elshoff, ""Some programming techniques for processing multidimensional matrices in a paging environment"", 1974 Nat. Comput. Conf. AFIPS Conf. Proc., vol. 43, pp. 185-193, 1974.||D. Ferrari, ""Improving locality by critical working sets"", Commun. Ass. Comput. Mach., vol. 17, pp. 614-620, Nov. 1974.||D. J. Hatfield and J. Gerald, ""Program restructuring for virtual memory"", IBM Syst. J., vol. 10, no. 3, pp. 168-192, 1971.||A. W. Madison and A. P. Batson, ""Characteristics of program localities"", Commun. Ass. Comput. Mach., vol. 19, pp. 285-294, May 1976.||T. Masuda, H. Shiota, K. Noguchi and T. Ohki, ""Optimization of program organization by cluster analysis"", 1974 Proc. IFIP Congr., pp. 261-265.||A. C. McKellar and E. G. Coffman, ""Organizing matrices and matrix operations for paged memory systems"", Commun. Ass. Comput. Mach., vol. 12, pp. 153-165, Mar. 1969.||W. W. Millbrandt and J. Rodriguez-Rosell, ""An interactive software engineering tool for memory management and user program evaluation"", 1974 Nat. Comput. Conf. AFIPS Conf. Proc., vol. 43, pp. 153-158, 1974.||J. E. Morrison, ""User program performance in virtual storage systems"", IBM Syst. J., vol. 12, no. 3, pp. 216-237, 1973.||S. Motobayashi, T. Masuda and N. Takahashi, ""The HITAC5020 time sharing system"", Proc. Ass. Comput. Mach. 24th Nat. Conf., pp. 419-429, 1969.||K. Noguchi, I. Ohnishi and H. Morita, ""Design considerations for a heterogeneous tightly-coupled multiprocessor system"", 1975 Nat. Comput. Conf. AFIPS Conf. Proc., vol. 44, pp. 561-565, 1975.||K. D. Ryder, ""Optimizing program placement in virtual systems"", IBM Syst. J., vol. 13, no. 4, pp. 292-306, 1974.||",Methods for the Measurement of Memory Utilization and the Improvement of Program Locality
"A. Silberschatz&&Department of Computer Science, University of Technology, Austin, TX, USA|","In his paper ""Communicating Sequential Processes,"" Hoare suggested the use of the input/output construct and Dijkstra's guarded commands for handling the task of communication and synchronization in distributed systems. Hoare's proposal was intended for programming general parallel systems; as a result, little consideration was given by Hoare to the question of how his mechanisms could be utilized in the construction of reliable dynamic resource management schemes. In this paper, we examine this problem and propose several simple extensions to Hoare's constructs that will make the extended Communicating Sequential Processes concept more suitable for the handling of such management schemes.",10.1109/TSE.1983.234961,IEEE Transactions on Software Engineering,"Resource management,Proposals,Dynamic programming,Parallel programming,Computer languages,Intelligent networks,Microcomputers,Writing,Computer science,Software engineering","C. A. R. Hoare, ""Communicating sequential processes"", Commun. Ass. Comput. Mach., vol. 21, pp. 666-677, 1978.||A. Silberschatz, ""Port-directed communication"", Comput. J., vol. 24, pp. 78-82, Feb. 1981.||R. M. Balzer, ""Ports–A method for dynamic interprogram communication and job control"", AFIPS Conference, 1971.||D. C. Walden, ""A system for interprocesses communication in a resource sharing computer network"", Commun. Ass. Comput. Mach., vol. 15, pp. 221-230, Apr. 1972.||E. W. Dijkstra, ""Guarded commands non-determinacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 546-557, Oct. 1974.||P. Brinch Hansen, ""The programming language concurrent Pascal"", IEEE Trans. Software Eng., vol. SE-1, pp. 199-207, June 1975.||E. W. Dijkstra, ""Hierarchical ordering of sequential processes"", Acta Informatica, vol. 1, no. 2, pp. 115-138, 1971.||",Extending CSP to Allow Dynamic Resource Management
"R.F. Brender&&Digital Equipment Corporation, Maynard, MA, USA|","This presentation describes the simultaneous development of Bliss compilers for three machine architectures. A highly unusual combination of characteristics makes this development of general interest to the software development community: the development involved extensive sharing of code among the several compilers; involved bootstrapping and transportable programming using a machine-oriented systems implementation language; involved prototyping and subsequent evolutionary development; and involved developing software on, as well as for, three machine architectures. The unusual problems that arose are discussed and the methodologies for dealing with them are described. This experience should be of interest to others contemplating projects with similar characteristics. It should also be relevant to research in the area of software development environments as an example of the diverse needs to be met.",10.1109/TSE.1980.234504,IEEE Transactions on Software Engineering,"Computer architecture,Software prototyping,Computer science,Optimizing compilers,Program processors,Genetic programming,Software tools,Prototypes,Planning,Software design","W. A. Wulf, D. E. Russell and A. N. Habermann, ""BLISS: A language for systems programming"", Commun. Ass. Comput. Mach., vol. 14, pp. 780-790, Dec. 1971.||BLISS-10 Programmer's Reference Manual, 1974.||BLISS-11 Reference Manual, Apr. 1974.||||VAX-11/780 Architecture Handbook, Digital Equipment Corp., vol. 1, 1977.||W. A. Wulf, R. K. Johnson, C. B. Weinstock, S. O. Hobbs and C. M. Geschke, The Design of an Optimizing Compiler, New York:Elsevier, 1975.||R. F. Brender, ""BLISS-11 and FORTRAN IV-PLUS: A case study in the application of a high-level cross-compiler to product development"" in Minicomputer Software, The Netherlands, Amsterdam:North-Holland, pp. 53-69, 1976.||R. F. Brender, ""A survey of BLISS-16 BLISS-32 and BLISS-36"", Proc. Digital Equipment Corp. Users Soc., pp. 1113-1127, 1978-Apr.||B. W. Leverett, P. J. Knueven and P. G. Hibbard, Portability techniques for BLISS programs, Nov. 1977.||M. P. Marks, ""Tansportable programming with BLISS"", Proc. Digital Equipment Corp. Users Soc., pp. 1109-1112, 1978-Apr.||BLISS-32 Language Guide, Digital Equipment Corp., 1978.||BLISS Language Guide, Digital Equipment Corp., Jan. 1980.||BLISS Pocket Guide, Digital Equipment Corp., 1979.||",Generation of Blisses
"P. Caseau&&Service Informatique et Mathematiques Appliquees, Direction des Etudes et Recherches, Electricitd de France, Clamart, France|G. Pujolle&&I.R.I.A.-Laboria, Le Chesnay, France|","A tandem queueing system with blocking due to finite waiting room is considered. Maximum throughput is studied by an approximation for several cases. The service time can depend on the number of customers; intermediate arrivals can also be allowed. Some special models with two stations in sequence and blocking are examined. These models are used for the performance evaluation of computer systems. In particular, the maximum throughput for a virtual memory operating system and for a node-to-node protocol in a computer network are obtained.",10.1109/TSE.1979.230199,IEEE Transactions on Software Engineering,"Throughput,Operating systems,Protocols,Computer networks,Stability,Communication system traffic,Telecommunication traffic,Traffic control,Resumes,Application software","G. C. Hunt, ""Sequential arrays of waiting lines"", Oper. Res., vol. 4, 1956.||B. Avi-Itzhak and M. Yadin, ""A sequence of two servers with no intermediate queue"", Management Sci., vol. 11, pp. 553-563, 1965.||M. F. Neuts, ""Two queues in series with a finite intermediate waiting room"", J. Appl. Prob., vol. 5, pp. 123, 1968.||A. G. Konheim and M. Reiser, ""A queueing model with finite waiting room and blocking"", J. Ass. Comput. Mach., vol. 23, no. 2, 1976.||D. K. Hildebrand, ""On the capacity of tandem server finite queue service system"", Oper. Res., vol. 12, pp. 73-82, 1968.||P. Caseau, ""Simulation de processeurs en sèrie au moyen de modèles Markovien"", Rapport E.D.F., 1977.||S. S. Lavenberg, Stability and maximum departure rate of certain open queueing networks having finite capacity constraints, July 1975.||E. Gelenbe and R. R. Muntz, ""Probabilistic models of computer systems"", Acta Inform., vol. 7, pp. 35-60, 1976.||P. J. Schweitzer and A. G. Konheim, Buffer overflow calculations using an infinite capacity model, 1975.||M. Reiser and H. Kobayashi, ""The effects of service time distributions on system performance"", Proc. IFIP 74, pp. 230-234, 1974.||T. L. Saaty, Element of Queueing Theory, New York:McGraw‑Hill, 1961.||J. W. Cohen, The Single Server Queue, Amsterdam:North‑Holland, 1969.||H. Kobayashi, ""Application of the diffusion approximation to queueing networks: Part I"", J. Ass. Comput. Mach., vol. 21, no. 2, pp. 316-328, 1974.||E. Gelenbe, ""On approximate computer system models"", J. Ass. Comput. Mach., vol. 22, no. 2, pp. 261-269, 1975.||U. N. Bhat and E. N. Richard, ""Busy period analysis of a time‑sharing system modeled as a semi-Markov process"", J. Ass. Comput. Mach., vol. 18, pp. 221-238, Apr. 1971.||P. J. Schweitzer and B. Gavish, The M/M/1 queue with bounded virtual waiting time, 1975.||G. Pujolle and D. Potier, ""Réseaux de files d'attente à capacité limitée avec des applications aux systèmes informatiques"", RAIRO, vol. 13, pp. 175-197, 1979.||L. Takacs, Introduction to the Theory of Queues, New York:Oxford Univ. Press, 1962.||J. Buzen, Queueing network models of multiprogramming, 1971.||A. Brandwajn, J. Buzen, E. Gelenbe and D. Potier, ""A model of performance for virtual memory systems"", Proc. ACM‑SIGMETRICS Symp., 1974-Sept.||M. Badel, E. Gelenbe, J. Leroudier and D. Potier, ""Adaptative optimization of a virtual memory system"", Proc. IEEE (Special Issue on Interactive Systems), 1975-June.||P. J. Courtois, On the near complete decomposability of networks of queues and of stochastic models of multiprogramming systems, PA, Pittsburgh:Dep. Comput. Sci., Carnegie-Mellon Univ., Nov. 1971.||P. J. Courtoid, ""Decomposability instabilities and saturation in multi‑programming systems"", Commun. Ass. Comput. Mach., vol. 18, no. 7, pp. 371-377, 1975.||B. Avi-Itzhak and P. Heyman, ""Approximate models of multi‑programming computer systems"", Oper. Res., vol. 21, pp. 1212-1230, 1970.||M. Irland and G. Pujolle, ""Comparison of two packet-retransmission techniques"", IEEE Trans. Inform. Theory, Jan. 1980.||G. Pujolle, ""The influence of protocols on the stability conditions in packet-switching networks"", IEEE Trans. Commun., vol. COM-27, pp. 611-619, Mar. 1979.||I. Rubin, ""Communication networks: Message path delays"", IEEE Trans. Inform. Theory, vol. IT-20, pp. 738-745, 1974.||",Throughput Capacity of a Sequence of Queues with Blocking Due to Finite Waiting Room
"M.J. Ferguson&&INRS-Télécommunications, Montreal, QUE, Canada|","In a recent paper by Fayolle, Mitrani, and Iasnogorodski [2], some general multidimensional integral equations were derived in order to solve for the mean response time of each of several classes in a queue whose service discipline was weighted processor sharing. The arrival processes were Poisson. The weighting means that each job within a class k is given an amount of processing proportional to the priority weight gk associated with that class. For exponential service times, the general equations were solved. In this note, a simple observation allows use of the exponential solution directly for the case of hyperexponential servers. As a result, it is possible to state the following. •Characterization of a server in terms of its mean and coefficient of variation is not sufficient to predict even the mean response time for a class using weighted processor sharing. In unweighted or egalitarian processor sharing, only the mean is sufficient. •The Kleinrock conservation law [4] does not hold for nonexponential servers. Fayolie et al. [2] had showed that it did hold for exponential servers.",10.1109/TSE.1983.234962,IEEE Transactions on Software Engineering,"Delay,Integral equations,Multidimensional systems,Poisson equations,Processor scheduling","F. Baskett, K. M. Chandy, R. R. Muntz and F. Palacios, ""Open closed and mixed networks of queues with different classes of customers"", J. Ass. Comput. Mach., vol. 22, pp. 248-260, Apr. 1975.||G. Fayolle, I. Mitrani and R. Iasnogorodski, ""Sharing a processor among many job classes"", J. Ass. Comput. Mach., vol. 27, pp. 519-532, July 1980.||E. Gelenbe and I. Mitrani, Analysis and Synthesis of Computer Systems, New York:Academic, 1980.||L. Kleinrock, Queueing Systems Vol. 2-Computer Applications, New York:Wiley, 1976.||L. Kleinrock, ""Time shared systems: A theoretical treatments"", J. Ass. Comput. Mach., pp. 242-261, Apr. 1967.||I. Mitrani and J. H. Hine, ""Complete parametrised families of job scheduling strategies"", Acta Inform., vol. 8, pp. 61-73, 1977.||T. M. O'Donovan, ""Direct solutions of M/G/1 processor sharing models"", Oper. Res., vol. 22, pp. 1232-1235, 1974.||M. Reiser and H. Kobayashi, ""Queueing networks with multiple closed chains: Theory and computational algorithms"", IBM J. Res. Develop., pp. 283-294, May 1974.||M. Sakata, S. Noguchi and J. Oizumi, ""Analysis of processor shared queueing models for time sharing systems"", Proc. 2nd Hawaii Conf. Syst. Sci., 1969.||",Weighted Processor Sharing-Results for Hyperexponential Servers
"R.P. Cook&&Department of Computer Sciences, University of Wisconsin, Madison, WI, USA|",Distributed programming is characterized by high communications costs and the inability to use shared variables and procedures for interprocessor synchronization and communication. *MOD is a high-level language system which attempts to address these problems by creating an environment conducive to efficient and reliable network software construction. Several of the *MOD distributed programming constructs are discussed as well as an interprocessor communication methodology. Examples illustrating these concepts are drawn from the areas of network communication and distributed process synchronization.,10.1109/TSE.1980.234505,IEEE Transactions on Software Engineering,"High level languages,Costs,Telecommunication network reliability,Communication system software,Computer languages,Contracts,Military computing,Processor scheduling,Programming profession,Delay","J. E. Ball, G. J. Williams and J. R. Low, Preliminary ZENO language description, Jan. 1979.||R. M. Balzer, ""PORTS–A method for dynamic interprogram communication and job control"", Proc. AFIPS SJCC Comput. Conf., vol. 39, pp. 485-489, 1971.||P. Brinch Hansen, ""Distributed processes: A concurrent programming concept"", Commun. Ass. Comput. Mach., vol. 11, pp. 934-941, Nov. 1978.||M. D. Canon, ""A virtual machine emulator for performance evaluation"", Commun. Ass. Comput. Mach., vol. 23, pp. 71-80, Feb. 1980.||M. E. Conway, ""A multiprocessor system design"", Proc. AFIPS Fall Joint Comput. Conf., vol. 24, pp. 139-146, 1963.||M. E. Conway, ""Design of a separable transition-diagram compiler"", Commun. Ass. Comput. Mach., vol. 6, pp. 396-408, July 1963.||R. P. Cook, An introduction to modular programming for Pascal users, Nov. 1979.||R. P. Cook, Data abstraction in *MOD.||R. P. Cook, Schedulers as abstractions–An operating system structu concept, July 1980.||O. J. Dahl, Simula 67 common base language, Oslo:Norwegian Comput. Center, May 1968.||E. W. Dijkstra, ""Cooperating sequential processes"" in Programming Languages, New York:Academic, pp. 43-112, 1968.||D. Farber, ""The distributed computing system"", Proc. COMPCON 73, pp. 31-34, 1973-Feb.||J. A. Feldman, ""High level programming for distributed computing"", Commun. Ass. Comput. Mach., vol. 22, pp. 353-368, June 1979.||C. M. Geschke, J. H. Morris and E. H. Satterthwaite, ""Early experience with mesa"", Commun. Ass. Comput. Mach., vol. 20, pp. 540-553, Aug. 1977.||R. P. Goldberg, ""Survey of virtual machine research"", Computer, vol. 6, pp. 34-44, June 1974.||J. W. Havender, ""Avoiding deadlock in multitasking systems"", IBM Syst. J., vol. 7, pp. 74-84, 1968.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun. Ass. Comput. Mach., vol. 17, pp. 549-557, Oct. 1974.||C. A. R. Hoare, ""Communicating sequential processes"", Commun. Ass. Comput. Mach., vol. 21, pp. 666-677, Aug. 1978.||Reference manual for the ADA programming language, June 1979.||C. A. R. Hoare, ""Rationale for the design of the ADA programming language"", SIGPLAN Notices, vol. 14, June 1979.||A. Jones and K. Schwans, ""TASK Forces: Distributed software for solving problems of substantial size"", Proc. 4th Int. Conf. Software Eng., pp. 315-330, 1979-Sept.||B. W. Lampson and D. D. Redell, ""Experience with processes and monitors in Mesa"", Commun. Ass. Comput. Mach., vol. 23, pp. 105-117, Feb. 1980.||B. W. Lampson, ""Report on the programming language Euclid"", SIGPLAN Notices, vol. 12, Feb. 1977.||CLU reference manual, July 1978.||B. Liskov, ""Primitives for distributed computing"", Proc. 7th Symp. Operating Syst. Principles, pp. 33-42, 1979-Dec.||R. Metcalfe and D. Boggs, ""Ethernet: Distributed packet switching for local computer networks"", Commun. Ass. Comput. Mach., vol. 19, pp. 395-404, July 1976.||J. G. Mitchell, W. Maybury and R. Sweet, Mesa language manual, Apr. 1979.||D. L. Parnas, ""A technique for software module specification with examples"", Commun. Ass. Comput. Mach., vol. 15, pp. 330-336, May 1972.||D. L. Parnas and D. L. Siewiorek, ""Use of the concept of transparency in the design of hierarchically structured systems"", Commun. Ass. Comput. Mach., vol. 18, pp. 401-408, July 1975.||D. M. Ritchie and K. Thompson, ""The UNIX time-sharing system"", Commun. Ass. Comput. Mach., vol. 17, pp. 365-375, July 1974.||C reference manual, Jan. 1974.||M. Shaw, W. A. Wulf and R. L. London, ""Abstraction and verification in lphard: Defining and specifying iteration and generators"", Commun. Ass. Comput. Mach., vol. 20, pp. 553-564, Aug. 1977.||R. W. Watson, Timesharing System Design Concepts, New York:McGraw-Hill, 1970.||J. M. Winett, ""Virtual machines for developing systems software"", Proc. IEEE Comput. Soc. Conf., 1971-Sept.||N. Wirth, ""Modula: A language for modular multiprogramming"", Software–Practice and Experience, vol. 7, pp. 3-35, 1977.||N. Wirth, ""The use of modula"", Software–Practice and Experience, vol. 7, pp. 37-65, 1977.||N. Wirth, ""Design and implementation of modula"", Software–Practice and Experience, vol. 7, pp. 67-84, 1977.||",*MOD—A Language for Distributed Programming
"G.H. Gonnet&&Pontificia Universidade Catolica, Rio de Janeiro, Brazil|D.E. Morgan&&Department of Computer Science, University of Waterloo, Waterloo, ONT, Canada|","A periodic network is a queuing network whose steady-state behavior is not constant in time, but repeats itself in a cycle. This behavior may be caused by the introduction of periodic servers, e.g., paging drums. The model presented is a generalization of some other models of queuing networks, and provides a more general definition of steady-state behavior. A theoretical solution is presented. Examples of theoretical and approximate solutions are presented for a well-known queuing network model of a computer system.",10.1109/TSE.1979.230201,IEEE Transactions on Software Engineering,"Queueing analysis,Network servers,Computer networks,Steady-state,Time sharing computer systems,Computer science,Modeling,Eigenvalues and eigenfunctions,Brazil Council","M. Badel, E. Gelenbe, J. Leroudier and D. Potier, ""Adpative optimization of a time-sharing system's performance"", Proc. IEEE, vol. 63, pp. 958-965, 1975-June.||F. Baskett, K. M. Chandy, R. R. Muntz and F. G. Palacios, ""Open closed and mixed networks of queues with different classes of customers"", J. Ass. Comput. Mach., vol. 22, pp. 248-260, Apr. 1975.||A. Brandwajn, ""A model of a time sharing virtual memory system solved using equivalence and decomposition methods"", Acta lnformatica, vol. 4, pp. 11-47, 1974.||K. M. Chandy, U. Herzog and L. Woo, ""Parametric analysis of queueing networks"", IBM J. Res. Develop., vol. 19, pp. 36-42, Jan. 1975.||E. G. Coffman and P. J. Denning, ""5"" in Operating Systems Theory, NJ, Englewood Cliffs:Prentice-Hall, 1973.||R. A. Frazer, W. J. Duncan and A. R. Collar, Elementary Matrices, London:Cambridge Univ. Press, 1965.||S. H. Fuller and F. Baskett, ""An analysis of drum storage units"", J. Ass. Comput. Mach., vol. 22, pp. 83-105, Jan. 1975.||G. H. Gonnet and D. E. Morgan, Analysis of closed queueing networks with periodic servers.||W. J. Gordon and G. F. Newell, ""Closed queueing systems with exponential servers"", Operations Res., vol. 15, pp. 254-265, 1967.||J. R. Jackson, ""Networks of waiting lines"", Operations Res., vol. 5, pp. 518-521, 1957.||J. R. Jackson, ""Jobshop-like queueing systems"", Management Science, vol. 10, pp. 131-142, Oct. 1963.||L. Kleinrock, Queueing Systems, New York:Wiley, vol. 1, 1974.||L. Kleinrock, Queueing Systems, New York:Wiley, vol. II, 1976.||J. Leroudier and M. Parent, Discrete event simulation modeling of computer system for performance evaluation, June 1976.||D. E. Morgan, W. Banks, D. P. Goodspeed and R. Kolanko, ""A computer network monitoring system"", IEEE Trans. Software Eng., vol. SE-1, pp. 299-311, Sept. 1975.||R. S. Varga, Matrix Iterative Analysis, NJ, Englewood Cliffs:Prentice-Hall, 1962.||",Analysis of Closed Queuing Networks with Periodic Servers
"L.L. Beck&&Department of Mathematical Sciences, San Diego State University, San Diego, CA, USA|T.E. Perkins&&School of Business Administration, Southern Methodist University, Dallas, TX, USA|","The results of a survey of software development practice are reported and analyzed. The problems encountered in various phases of the software life cycle are measured and correlated with characteristics of the responding installations. The use and acceptance of the term ""software engineer"" is investigated, and the functions and background of persons identified as software engineers are reported. The usage of a wide variety of software engineerilng tools and methods is measured; conclusions are drawn concerning the usefulness of these techniques.",10.1109/TSE.1983.235114,IEEE Transactions on Software Engineering,"Software engineering,Software measurement,Educational institutions,Phase measurement,Software tools,Software systems,Programming profession,Software maintenance","V. R. Basili and R. W. Reiter, ""An investigation of human factors in software development"", IEEE Computer, pp. 21-40, Dec. 1979.||F. L. Bauer, ""Software engineering"" in Inform. Processing 71, North-Holland, 1972.||H. E. Dunsmore and J. D. Gannon, ""Programming factors: Language features that help explain programming complexity"", Proc. ACM Annu. Conf., pp. 554-560, 1978-Dec.||H. E. Dunsmore and J. D. Gannon, ""Data referencing: An empirical investigation"", IEEE Computer, pp. 50-59, Dec. 1979.||J. D. Gannon, ""An empirical evaluation of data type conventions"", Commun. Ass. Comput. Mach., pp. 584-595, Aug. 1977.||J. D. Gannon, ""Human factors in software engineering"", IEEE Computer, pp. 6-7, Dec. 1979.||R. W. Jensen, C. C. Tonies and W. I. Fletcher, ""A proposed 4-year software engineering curriculum"", Proc. ACM-SIGCSE Tech. Symp. Comput. Sci. Education, pp. 84-92, 1978-Aug.||J. H. Lehman, ""How software projects are really managed"", Datamation, pp. 118-129, Jan. 1979.||B. P. Lientz and E. B. Swanson, Software Project Management, New York:Addison-Wesley, 1980.||H. D. Mills, ""Software engineering"", Science, pp. 1199-1204, Mar. 1977.||D. F. Morrison, Multivariate Statistical Methods, New York:McGraw-Hill, 1976.||N. H. Nie, C. H. Hull, J. G. Jenkins, K. Steinbrenner and D. H. Bent, Statistical Package for the Social Sciences, New York:McGraw-Hill, 1975.||T. E. Perkins and L. L. Beck, ""A project-oriented undergraduate course sequence in software engineering"", Proc. ACM-SIGCSE Tech. Symp. Comput. Sci. Education, pp. 33-40, 1980-Feb.||H. Sackman, W. J. Ericson and E. E. Grant, ""Exploratory experimental studies comparing online and offline programming performance"", Commun. Ass. Comput. Mach., pp. 3-11, Jan. 1968.||S. B. Sheppard, B. Curtis, P. Milliman and T. Love, ""Modern coding practices and programmer performance"", IEEE Computer, pp. 41-49, Dec. 1979.||B. Schneiderman, ""Exploratory experiments in programmer behavior"", Int. J. Comput. Inform. Sci., pp. 123-143, June 1976.||B. Schneiderman, ""Human factors experiments in designing interactive systems"", IEEE Computer, pp. 9-20, Dec. 1979.||R. H. Thayer, ""Organizational structures used in software development by the U. S. aerospace industry"", J. Syst. Software, vol. 1, no. 4, pp. 283-297, 1980.||R. H. Thayer and J. H. Lehman, ""Software engineering project management: A state-of-the-art report"", Proc. AIAA Comput. Aerospace Conf., pp. 153-167, 1977-Oct.||C. E. Walston and C. P. Felix, ""A method of programming measurement and estimation"", IBM Syst. J., vol. 16, pp. 54-73, 1977.||","A Survey of Software Engineering Practice: Tools, Methods, and Results"
"J.L. Bentley&&Department of Computer Science and Mathematics, Carnegie Mellon University, Pittsburgh, PA, USA|M. Shaw&&Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA|","In this paper we study the problem of designing and specifying standard program components applicable to a wide variety of tasks; we choose for this study the specific problem domain of data structures for general searching problems. Within this domain Bentley and Saxe [1] have developed transformations for converting solutions of simple searching problems to solutions of more complex problems. We discuss one of those transformations, specify precisely the transformation and its conditions of applicability, and prove its correctness; we accomplish this by casting it in terms of abstract data types–specifically by using the Alphard form mechanism. The costs of the structures derived by this transformation are only slightly greater than the costs of the original structures, and the correctness of the transformation definition together with the correctness of the original structure assure the correctness of the derived structure. The transformation we describe has already been used to develop a number of new algorithms, and it represents a new level of generality in software engineering tools.",10.1109/TSE.1980.234506,IEEE Transactions on Software Engineering,"Data structures,Costs,Software engineering,Computer science,Casting,Software algorithms,Mathematics,Merging","J. L. Bentley and J. B. Saxe, ""Decomposable searching problems I: Static-to-dynamic transformations"", J. Algorithms, 1980.||P. N. Hilfinger, An infomnal definition of Alphard, 1978.||D. E. Knuth, The Art of Computer Programming vol. 3: Sorting and Searching, MA, Reading:Addison-Wesley, 1973.||R. J. Lipton and R. E. Tarjan, ""Applications of a planar separator theorem"", Proc. IEEE 18th Symp. Foundations of Comput. Sci., pp. 162-170, 1977.||Z. Manna, Mathematical Theory of Computation, New York:McGraw-Hill, 1974.||W. A. Wulf, R. L. London and M. Shaw, ""An introduction to the construction and verification of Alphard programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 253-265, Dec. 1976.||",An Alphard Specification of a Correct and Efficient Transformation on Data Structures
"R.D.H. Warburton&&Jaycor, Inc., Middletown, Rio de Janeiro, USA|","The Putnam model can be used to predict and manage software development projects. It is a management tool that takes, as input, easily obtained manpower data and produces cost and schedule estimates. This paper examines data from two real-time software projects and analyzes the applicability of the Putnam model. We propose a variation ation of the model which more reliably follows the staffing curve of real-time software applications. A critical analysis of the assumptions is presented and the parameters are reinterpreted so that they reflect the environment of embedded applications. Two projects are analyzed from actual data. It is shown how management decisions are reflected in the model. Even erratic and incomplete data can yield valuable conclusions. It is also shown that the model is appropriate to software developed with modern practices. We show how valuable management information can be obtained by laying out the data in a systematic manner.",10.1109/TSE.1983.235115,IEEE Transactions on Software Engineering,"Costs,Predictive models,Application software,Scheduling,Project management,Programming,Testing,Software development management,Data analysis,Information management",,Managing and Predicting the Costs of Real-Time Software
"D.J. Taylor&&Department of Computer Science and the Computer Communications Networks Group, University of Waterloo, Waterloo, ONT, Canada|D.E. Morgan&&Department of Computer Science and the Computer Communications Networks Group, University of Waterloo, Waterloo, ONT, Canada|J.P. Black&&Department of Computer Science and the Computer Communications Networks Group, University of Waterloo, Waterloo, ONT, Canada|","The increasing cost of computer system failure has stimulated interest in improving software reliability. One way to do this is by adding redundant structural data to data structures. Such redundancy can be used to detect and correct (structural) errors in instances of a data structure. The intuitive approach of this paper, which makes heavy use of examples, is complemented by the more formal development of the companion paper, ""Redundancy in Data Structures: Some Theoretical Results.""",10.1109/TSE.1980.234507,IEEE Transactions on Software Engineering,"Redundancy,Data structures,Fault tolerance,Error correction,Computer errors,Costs,Hardware,Fault tolerant systems,Software reliability,Fault detection","R. P. Almquist, J. R. Hagerman, R. J. Hass, R. W. Peterson and S. L. Stevens, ""Software protection in no. 1 ESS"", Proc. Int. Switching Symp., pp. 565-569, 1972.||Computing Systems Reliability, Cambridge:Cambridge Univ. Press, 1979.||A. Avizienis, ""Fault-tolerance: The survival attribute of digital systems"", Proc. IEEE, vol. 66, pp. 1109-1125, 1978-Oct.||H. J. Beuscher, G. E. Gessler, D. W. Huffman, P. J. Kennedy and E. Nussbaum, ""Administration and maintenance plan"", Bell Syst. Tech. J., vol. 48, pp. 2765-2815, Oct. 1969.||H. Y. Chang, Hardware maintainability and software reliability of electronic switching systems, pp. 455-479, 1974.||P. A. Dearnley, ""An investigation into database  resilience"", Comput. J., vol. 19, pp. 117-121, May 1976.||P. J. Denning, ""Fault-tolerant operating systems"", Comput. Surpeys, vol. 8, pp. 359-389, Dec. 1976.||R. W. Downing, J. S. Nowak and L. S. Tuomenoksa, ""No. 1 ESS maintenance plan"", Bell Syst. Tech. J., vol. 43, pp. 1961-2019, Sept. 1964.||J. P. Fry and E. H. Sibley, ""Evolution of database management systems"", Comput. Surveys, vol. 8, pp. 7-42, Mar. 1976.||G. Giannotti, ""Data base integrity"", Data Management, vol. 12, pp. 22-25, May 1974.||C. C. Gotlieb and F. W. Tompa, ""Choosing a storage schema"", Acta Informatica, vol. 3, pp. 297-319, 1974.||M. M. Hammer and D. J. McLeod, ""Semantic integrity in a relational data base system"", Proc. Int. Conf. Very Large Data Bases, pp. 25-47, 1975-Sept.-22-24.||R. W. Hamming, ""Error detecting and error correcting codes"", Bell Syst. Tech. J., vol. 26, pp. 147-160, Apr. 1950.||D. E. Knuth, The Art of Computer Programming vol. 1: Fundamental Algorithms, MA, Reading:Addison-Wesley, 1973.||P. C. Lockemann and W. D. Knutsen, ""Recovery of disk contents after system failure"", Commun. Ass. Comput. Mach., vol. 11, pp. 542, Aug. 1968.||R. A. Lorie, ""Physical integrity in a large segmented database"", ACMTrans. Database Syst., vol. 2, pp. 91-104, Mar. 1977.||D. J. McLeod, High level expression of semantic integrity specifications in a relational data base system, June 1976.||P. M. Melliar-Smith and B. Randell, ""Software reliability: The role of programmed exception handling"", Proc. ACM Conf. Language Design for Reliable Software, 1977-Mar.-28-30.||SIGPLAN Notices, vol. 12, pp. 95-100, Mar. 1977.||N. Minsky, ""Files with semantics"", Proc. ACM SIGMOD Int. Cnf .Management of Data, pp. 65-73, 1976-June-2-4.||B. Randell, ""Operating systems: The problems of performance and reliability"", Inform. Processing 71 Proc. IFIP Congr. 71, pp. 281-290, 1971-Aug.-23-28.||B. Randell, ""System structure for software fault tolerance"", Proc. Int. Conf Reliable Software, pp. 437-449, 1975-Apr.-21-23.||A. L. Scherr, ""The design of OS/VS2 Release 2"", Proc. Nat. Comput. Conf., pp. 387-394, 1973.||A. L. Scherr, ""Functional structure of IBM virtual storage operating systems part II: OS/VS2-2 concepts and philosophies"", IBM Syst. J., vol. 12, pp. 382-400, 1973.||D. J. Taylor, D. E. Morgan and J. P. Black, Redundancy in data structures: Some theoretical results, pp. 595-602.||D. J. Taylor, Robust data structure implementations for software reliability, 1977.||D. J. Tatlor, Theoretical foundations for robust data structure implementations.||F. W. Tompa, ""Data structure design"" in Data Structures Computer Graphics and Pattern Recognition, New York:Academic, pp. 3-30, 1977.||G. Waldbaum, Audit programs–A proposal for improving system availability, Feb. 1970.||M. V. Wilkes, ""On preserving the integrity of data bases"", Comput. J., vol. 15, pp. 191-194, Aug. 1972.||",Redundancy in Data Structures: Improving Software Fault Tolerance
"N.G. Leveson&&Department of Information and Computer Science, University of California, Irvine, CA, USA|P.R. Harvey&&Department of Information and Computer Science, University of California, Irvine, CA, USA|","With the increased use of software controls in critical realtime applications, a new dimension has been introduced into software reliability–the ""cost"" of errors. The problems of safety have become critical as these applcations have increasingly included areas where the consequences of failure are serious and may involve grave dangers to human life and property. This paper defines software safety and describes a technique called software fault tree analysis which can be used to analyze a design as to its safety. The technique has been applied to a program which controls the flight and telemetry for a University of California spacecraft. A critical failure scenario was detected by the technique which had not been revealed during substantial testing of the program. Parts of this analysis are presented as an example of the use of the technique and the results are discussed.",10.1109/TSE.1983.235116,IEEE Transactions on Software Engineering,"Software safety,Humans,Application software,Error correction,Software systems,Fault tolerance,Runtime,Fault trees,Aircraft,Military computing","K. R. Apt, ""Ten years of Hoare's logic: A survey"", ACM TOPLAS, vol. 3, pp. 431-483, Oct. 1981.||R. L Browning, The Loss Rate Concept in Safety Engineering, New York:Marcel Dekker, 1980.||L. Chen and A. Avizienis, ""N-version programming: A fault-tolerance approach to reliability of software operation"", 8th Int. Conf. on Fault-Tolerant Computing, 1978-June.||R. Dunn and R. Uhman, Quality Assurance for Computer Software, New York:McGraw-Hill, 1982.||J. R. Garman, ""The bug heard 'round the world"", Software Eng. Notes, vol. 6, Oct. 1981.||S. L. Gerhart and L. Yelowitz, ""Observations on the fallibility in applications of modern programming methodologies"", IEEE Trans. Software Eng., vol. SE-2, pp. 195-207, Mar. 1976.||W. Hammer, Handbook of System and Product Safety, NJ, Englewood Cliffs:Prentice-Hall, 1972.||P. Harvey, Fault-tree analysis of software, Jan. 1982.||C. A. R. Hoare, ""An axiomatic basis for computer programming"", Commun. Ass. Comput. Mach., vol. 12, pp. 576-580, Oct. 1969.||L. Lamport, ""Proving the correctness of multiprocess programs"", IEEE Trans. Software Eng., vol. SE-3, pp. 125-143, Mar. 1977.||N. G. Leveson, Software safety: A definition and some preliminary ideas, Mar. 1981.||N. G. Leveson, ""Software safety from a software viewpoint"", Proc. 5th Int. Syst. Safety Conf., vol. 2, 1981-July.||N. G. Leveson, T. Shimeall, J. Stolzy and J. Thomas, ""Design for safe software"", Proc. AIAA Space Sci. Meeting, 1983-Jan.||M. Lipow, ""Prediction of software errors"", J. Syst. Software, vol. 1, pp. 71-75, 1979.||C. V. Ramamoorthy and F. B. Bastiani, ""Software reliability‑Status and perspectives"", IEEE Trans. Software Eng., vol. SE-8, pp. 354-371, July 1982.||C. V. Ramamoorthy, F. B. Bastiani, J. M. Favaro, Y. R. Mok, C. W. Nam and K. Suzuki, ""A systematic approach to the development and validation of critical software for nuclear power plants"", Proc. 4th Int. Conf. Software Eng., pp. 231-240, 1979.||B. Randell, ""System structure for software fault tolerance"", Proc. Int. Conf. Reliable Software SIGPLAN Notices, vol. 10, no. 6, 1975-June.||W. P. Rodgers, Introduction to System Safety Engineering, New York:Wiley, 1971.||J. Thomas and N. G. Leveson, ""Applying safety design techniques to software safety"", Proc. AIAA Space Sci. Meeting, 1983-Jan.||",Analyzing Software Safety
"C.L. Heitmeyer&&Computer Science and Systems Branch, Naval Research Laboratory, Inc., Washington D.C., DC, USA|J.D. McLean&&Computer Science and Systems Branch, Naval Research Laboratory, Inc., Washington D.C., DC, USA|","An abstract requirements specification states system requirements precisely without describing a real or a paradigm implementation. Although such specifications have important advantages, they are difficult to produce for complex systems and hence are seldom seen in the ""real"" programming world. This paper introduces an approach to producing abstract requirements specifications that applies to a significant class of real-world systems, including any system that must reconstruct data that have undergone a sequence of transformations. tions. It also describes how the approach was used to produce a requirements document for SCP, a small, but nontrivial Navy communications system. The specification techniques used in the SCP requirements document are introduced and illustrated with examples.",10.1109/TSE.1983.235117,IEEE Transactions on Software Engineering,"Formal specifications,Contracts,Measurement standards,Standards development,Computer science,Software maintenance,Personnel,Software algorithms,Data structures","M. W. Alford, ""A requirements engineering methodology for real-time processing requirements"", IEEE Trans. Software Eng., Jan. 1977.||P. C. Belford, A. F. Bond, D. G. Henderson and L. S. Sellers, ""A key to effective software development"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.-13-15.||T. E. Bell and T. E. Thayer, ""Software requirements: Are they really a problem?"", Proc. 2nd Int. Conf. Software Eng., 1976-Oct.||T. E. Bell, D. C. Bixler and M. E. Dyer, ""An extendable approach to computer-aided software requirements engineering"", IEEE Trans. Software Eng., Jan. 1977.||B. W. Boehm, ""Software engineering"", IEEE Trans. Comput., Dec. 1976.||A. M. Davis and T. G. Rauscher, ""Formal techniques and automatic processing to ensure correctness in requirements specifications"", Proc. Specifications of Reliable Software, 1979-Apr.||E. W. Dijkstra, A Discipline of Programming, NJ, Englewood Cliffs:Prentice-Hall, 1976.||J. Guttag, ""Notes on type abstraction (version 2)"", IEEE Trans. Software Eng., vol. SE-6, pp. 13-23, Jan. 1980.||M. Hamilton and S. Zeldin, ""Higher order software–A methodology for defining software"", IEEE Trans. Software Eng., Mar. 1976.||C. L. Heitmeyer and J. D. McLean, Requirements of the submarine communications package.||K. L. Heninger, J. Kallander, D. L. Parnas and J. E. Shore, Software requirements for the A-7E aircraft, 1978.||K. L. Heninger, ""Specifying software requirements for complex systems: New techniques and their application"", IEEE Trans. Software Eng., vol. SE-6, pp. 2-13, Jan. 1980.||A. A. Levene and G. P. Mullery, ""An investigation of requirement specification languages: Theory and practice"", IEEE Computer, May 1982.||B. H. Liskov and V. Berzins, ""An appraisal of program specifications"" in Research Directions in Software Technology, MA, Cambridge:MIT Press, pp. 287, 1979.||P. Lucas, P. Lauer and H. Stigleitner, Method and notation for the formal definition of programming languages, June 1968.||J. Ludewig, ""Computer-aided specification of process control systems"", IEEE Computer, May 1982.||M. Majster-Cederbaum, ""A simple relation between relational and predicate transformer semantics for non-deterministic programs"", Inform. Processing Lett., vol. 11, pp. 190-192, Dec. 1980.||J. D. McLean, A formal foundation for trace specification, 1982.||J. Ass. Comput. Mach., 1983.||D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comp. Mach., vol. 15, pp. 1053-1058, Dec. 1972.||D. L. Parnas, ""The use of precise specifications in the development of software"" in Inform. Processing 77, New York, 1977.||D. L. Parnas, Use of abstract interfaces in the development of software for embedded computer systems, 1977.||D. L. Parnas, ""The role of program specifications"" in Research Directions in Software Technology, MA, Cambridge:MIT Press, pp. 367, 1979.||D. T. Ross and K. Schoman, ""Structured analysis for requirements definition"", IEEE Trans. Software Eng., Jan. 1977.||",Abstract requirements specification: A new approach and its application
"R.A. Nelson&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|L.M. Haibt&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|P.B. Sheridan&&IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA|","A programming system has been implemented in which annotated Petri nets are used as machine-processable high-evel design representations. The nets can be used to express the parallelism and the dynamic sequential dependencies found in complex software. They can then be interactively fired to facilitate debugging of the design. The nets are processed into a procedure language, called XL/1, to which a variety of transformations are applied in order to produce more efficient programs. These programs are generated for either a serial or a parallel processing environment. Finally, the XL/1 programs may be translated into PL/I or PL/S. The serial processing versions have been compiled and run successfully, but the parallel processing versions have not yet been run in a parallel processing environment.",10.1109/TSE.1983.235118,IEEE Transactions on Software Engineering,"Casting,Petri nets,Parallel processing,Process control,Programming,Hardware,Debugging,Concurrent computing,Process design","T. Agerwala, A complete model for representing the coordination of asynchronous processes, July 1974.||T. Agerwala, ""Putting Petri nets to work"", IEEE Computer, vol. 12, pp. 85-94, Dec. 1979.||F. E. Allen and J. Cocke, ""A program data flow analysis procedure"", Commun. Ass. Comput. Mach., vol. 19, pp. 137-147, Mar. 1976.||J. Backus, ""Can programming be liberated from the von Neumann style? A functional style and its algebra of programs"", 1977 ACM Turing Award Lecture Commun. Ass. Comput. Mach., vol. 21, pp. 613-641, Aug. 1978.||E. W. Dijkstra, ""Cooperating sequential processes"" in Programming Languages, New York:Academic, pp. 43-112, 1968.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun. Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1975.||Newsletter of the Special Interest Group on Petri Nets and Related System Models, Germany, Bonn:Gesellschaft fuer Informatik.||M. Hack, Decidability questions for Petri nets, June 1976.||D. Harel, ""And/Or programs: A new approach to structured programming"", ACM Trans. Programming Languages and Syst., vol. 2, pp. 1-17, Jan. 1980.||R. E. Miller and C. K. Yap, ""On formulating simultaneity for studying parallelism and synchronization"", J. Comput. Syst. Sci., vol. 20, pp. 203-218, Apr. 1980.||G. J. Myers, Composite/Structured Design, New York:Van Nostrand Reinhold, 1978.||C. Mead and L. Conway, Introduction to VLSI Systems, MA, Reading:Addison-Wesley, 1980.||I. Nassi and B. Schneiderman, ""Flowchart techniques for structured tured programming"", ACM SIGPLAN Notices, vol. 8, pp. 12-26, Aug. 1973.||R. A. Nelson, ""XL: A language structure"", ACM SIGPLAN Notices, vol. 13, no. 12, pp. 73-87, Dec. 1978.||R. A. Nelson, L. M. Haibt and P. B. Sheridan, Specification design and implementation via annotated Petri nets, Mar. 1982.||J. L. Peterson, ""Petri nets"", Comput. Surveys, vol. 9, pp. 223-252, Sept. 1977.||J. L. Peterson, Petri Net Theory and the Modeling of Systems, NJ, Englewood Cliffs:Prentice-Hall, 1981.||J. F. Stay, ""HIPO and integrated program design"", IBM Syst. J., vol. 15, no. 2, pp. 143-154, 1976.||D. Teichrow and E. A. Hershey, ""PSL/PSA: A computeraided technique for structured documentation and analysis of information processing systems"", IEEE Trans. Software Eng., vol. SE-3, pp. 41-48, Jan. 1977.||H. J. Wojtkowiak, Design automation and verification for digital systems, Dec. 1980.||",Casting Petri Nets into Programs
"J.E. Coolahan&&Applied Physics Laboratory, Johns Hopkins University, Laurel, MD, USA|N. Roussopoulos&&Department of Computer Science, University of Maryland, College Park, MD, USA|","A methodology for the statement of timing requirements is presented for a class of embedded computer systems. The notion of a ""time-driven"" system is introduced which is formalized using a Petri net model augmented with timing information. Several subclasses of time-driven systems are defined with increasing levels of complexity. By deriving the conditions under which the Petri net model can be proven to be safe in the presence of time, timing requirements for modules in the system can be obtained. Analytical techniques are developed for proving safeness in the presence of time for the net constructions used in the defined subclasses of time-driven systems.",10.1109/TSE.1983.235261,IEEE Transactions on Software Engineering,"Timing,Petri nets,Embedded system,Power system modeling,Embedded computing,Control systems,Real time systems,Concurrent computing,Application software","T. Agerwala, ""Putting Petri nets to work"", IEEE Computer, vol. 12, pp. 85-94, Dec. 1979.||M. W. Alford, ""Software requirements engineering methodology (SREM) at the age of four"", Proc. COMPSAC 80, pp. 866-873, 1980-Oct.||T. L. Booth and C. A. Wiecek, ""Performance abstract data types as a tool in software performance analysis and design"", IEEE Trans. Software Eng., vol. SE-6, pp. 138-151, Mar. 1980.||B. Dasarathy, ""Timing constraints for real-time systems: constructs for expressing them methods of validating them"", Proc. IEEE Real-Time Systems Symp., 1982-Dec.||Y. W. Han, ""Performance evaluation of a digital system using a Petri net-like approach"", Proc. Nat. Electron. Conf., vol. 32, pp. 166-172, 1978-Oct.||L. J. Mekly and S. S. Yau, ""Software design representation using abstract process networks"", IEEE Trans. Software Eng., vol. SE-6, pp. 420-435, Sept. 1980.||J. D. Noe, ""Hierarchical modeling with pro-nets"", Proc. Nat. Electron. Conf., vol. 32, pp. 155-160, 1978-Oct.||J. D. Noe and G. J. Nutt, ""Macro E-nets for representation of parallel systems"", IEEE Trans. Comput., vol. C-22, pp. 718-727, Aug. 1973.||G. J. Nutt, ""Evaluation nets for computer systems performance analysis"", Proc. Fall Joint Comput. Conf., pp. 279-286, 1972-Dec.||J. L. Peterson, ""Petri nets"", ACM Comput. Surveys, vol. 9, pp. 223-252, Sept. 1977.||J. L. Peterson, Petri Net Theory and the Modeling of Systems, NJ, Englewood Cliffs:Prentice-Hall, 1981.||C. A. Petri, Kommunikation mit Automaten, 1962.||C. F. Greene, Communication with automata, vol. 1, 1966.||C. V. Ramamoorthy and G. S. Ho, ""Performance evaluation of asynchronous concurrent systems using Petri nets"", IEEE Trans. Software Eng., vol. SE-6, pp. 440-449, Sept. 1980.||C. V. Ramamoorthy and H. H. So, ""Software requirements and specifications: Status and perspectives"" in Tutorial: Software Methodology, New York:IEEE Press, pp. 43-164, 1978.||C. Ramchandani, Analysis of asynchronous concurrent systems by Petri nets, 1974.||B. J. Taylor, ""Introducing real time constraimts into requirements and high level design of operating systems"", IEEE Conf. Rec. Nat. Telecommun. Conf., pp. 18.5.1-18.5.5, 1980-Dec.||W. Trattnig and H. Kerner, ""EDDA-A very-high-level programming and specification language in the style of SADT"", Proc. COMPSAC 80, pp. 436-443, 1980-Oct.||P. Zave, ""An operational approach to requirements specification for embedded systems"", IEEE Trans. Software Eng., vol. SE-8, pp. 250-269, May 1982.||",Timing Requirements for Time-Driven Systems Using Augmented Petri Nets
"S. Jajodia&&Department of Computer Science, University of Missouri, Columbia, MO, USA|P.A. Ng&&Department of Computer Science, University of Missouri, Columbia, MO, USA|F.N. Springsteel&&Department of Computer Science, University of Missouri, Columbia, MO, USA|","We investigate the question of when two entity-relationship diagrams (ERD's) should be considered equivalent, in the sense of representing the same information. This question is very important for a database design process which uses the ERD model, and can be interpreted in various ways. We give three natural and increasingly stricter criteria for developing concepts of equivalence for ERD's. We first give a notion of ""domain data compatibility"" which ensures that the ERD's in question represent the same universe of data in an aggregate sense. Then we define the set of functional dependencies which are naturally embedded in each ERD, and use it to develop a concept of ""data dependency equivalence"" which ensures that the ERD's satisfy the same constraints (functional dependencies) among the represented data. Finally, we give our strongest criterion, instance data equivalence, which requires the ERD's to have the same power to represent instances of data. We develop several alternate forms of this third notion, including some giving efficient tableaux tests for its occurrence. Indeed, for each type of equivalence, we give a polynomial-time algorithm to test for it.",10.1109/TSE.1983.235262,IEEE Transactions on Software Engineering,"Relational databases,Erbium,Testing,Computer science,Process design,Aggregates,Polynomials,Data processing,Missiles","A. V. Aho, C. Beeri and J. D. Ullman, ""The theory of joins in relational databases"", ACM Trans. Database Syst., vol. 4, no. 3, pp. 297-314, 1979.||A. V. Aho, Y. Sagiv and J. D. Ullman, ""Equivalences among relational expressions"", SIAM J. Comput., vol. 8, no. 2, pp. 218-246, 1979.||A. V. Aho, ""Efficient optimization of a class of relational expressions"", ACM Trans. Database Syst., vol. 4, no. 4, pp. 435-454, 1979.||C. Beeri, A. O. Mendelzon, Y. Sagiv and J. D. Ullman, ""Equivalence of relational database schemes"", Proc. 11th Annu. ACM Symp. Theory of Comput., pp. 319-329, 1979.||P. A. Bernstein, ""Synthesizing third normal form relations from functional dependencies"", ACM Trans. Database Syst., vol. 1, no. 4, pp. 277-298, 1976.||A. K. Chandra and P. M. Merlin, ""Optimal implementation of conjunctive queries in relational databases"", Proc. 9th Annu. ACM Symp. Theory of Comput., pp. 77-90, 1976.||P. P. Chen, ""The entity-relationship model: Toward a unified view of data"", ACM Trans. Database Syst., vol. 1, no. 1, pp. 9-36, 1976.||Entity-Relationship Approach to Systems Analysis and Design, The Netherlands, Amsterdam:North-Holland, 1980.||Entity-Relationship Approach to Information Modeling and Analysis, CA, Saugus:ER Inst., 1981.||I. Chung, F. Nakamura and P. P. Chen, ""A decomposition of relations using the entity-relationship approach"" in Entity‑Relationship Approach to Information Modeling and Analysis, CA, Saugus:ER Inst., pp. 151-173.||E. F. Codd, ""A relational model for large shared data bases"", Commun. Ass. Comput. Mach., vol. 13, no. 6, pp. 377-387, 1970.||E. F. Codd, ""Further normalization of the data base relational model"" in Data Base Systems, NJ, Englewood Cliffs:Prentice-Hall, pp. 33-64, 1972.||R. Fagin, ""A normal form for relational databases that is based on domains and keys"", ACM Trans. Database Syst., vol. 6, no. 3, pp. 387-415, 1981.||S. Jajodia and P. A. Ng, ""Equivalence of entity-relationship diagrams"", Proc. IEEE 6th Int. Comput. Software & Applications Conf., 1982.||D. Maier, A. O. Mendelzon and Y. Sagiv, ""Testing implications of data dependencies"", ACM Trans. Database Syst., vol. 4, no. 4, pp. 455-469, 1979.||P. A. Ng, ""Further analysis of the entity-relationship approach to database design"", IEEE Trans. Software Eng., vol. SE-7, no. 1, pp. 85-99, 1981.||G. Poonen, ""CLEAR: A conceptual language for entities and relationships"", Proc. Int. Conf. Management of Data, pp. 194-215, 1978.||H. Sakai, ""On the optimization of an entity-relationship model"", AFIPS Conf. Proc. 3rd USA-Japan Comput. Conf., pp. 216-220, 1978.||J. D. Ullman, Principles of Database Systems, MD, Potomac:Comput. Soc. Press, 1980.||J. D. Ullman, ""The U.R. strikes back"", Proc. ACM Symp. Principles of Database Syst., pp. 10-22, 1982.||",The Problem of Equivalence for Entity-Relationship Diagrams
"I. Kalantari&&Department of Mathematics, Western Illinois University, Macomb, IL, USA|G. McDonald&&Department of Mathematics, Western Illinois University, Macomb, IL, USA|","In this paper we present a tree structure for storing points from a normed space whose norm is effectively computable. We then give an algorithm for finding the nearest point from the tree to a given query point. Our algorithm searches the tree and uses the triangle inequality to eliminate searching of the entirety of some branches of the tree whenever a certain predicate is satisfied. Our data structure uses 0(n) for storage. Empirical data which we have gathered suggest that the expected complexity for preprocessing and the search time are, respectively, 0(nlogn) and 0(logn).",10.1109/TSE.1983.235263,IEEE Transactions on Software Engineering,"Data structures,Tree data structures,Mathematics,Organizing,Data analysis,Information retrieval,Image retrieval,Pattern recognition,Statistical analysis","J. L. Bentley, ""Multidimensional divide-and-conquer"", Commun. Ass. Comput. Mach., vol. 23, pp. 214-229, Apr. 1980.||J. L. Bentley, D. F. Stanat and E. H. Williams, ""The complexity of finding fixed-radius near neighbors"", Inform. Processing Lett., vol. 6, pp. 209-212, Dec. 1977.||J. O. Bentley, B. W. Weide and A. C. Yuo, ""Optimal expected time algorithms for closest point problems"", ACM Trans. Math. Software, vol. 6, pp. 563-580, Dec. 1980.||D. E. Knuth, The Art of Computer Programming vol. 3, MA, Reading:Addison-Wesley, 1969.||D. T. Lee and F. P. Preparata, Location of a point on a planar subdivision and its applications, Nov. 1975.||R. J. Lipton and R. E. Tarjan, ""Applications of a planar separator theorem"", Proc. 18th IEEE Symp. Foundations Comput. Sci., pp. 162-170, 1-Oct.||F. P. Preparata and S. J. Hong, ""Convex hull of finite sets of points in two and three dimensions"", Commun. Ass. Comput. Mach., vol. 20, pp. 87-93, Feb. 1977.||M. I. Shamos, Problems in computational geometry, CT, New Haven:Dep. Comput. Sci., Yale Univ., May 1975.||M. I. Shamos, ""Geometric complexity"", Conf. Rec. 7th Annu. ACM Symp. Theory of Comput., pp. 224-233, 1975-May.||M. I. Shamos and D. Hoey, ""Closest-point problems"", Proc. 16th IEEE Symp. Foundations Comput. Sci., pp. 151-162, 1975-Oct.||A. C. Yao, On constructing minimum spanning trees in k‑dimensional space and related problems, 1977.||G. Yuval, ""Finding nearest neighbors"", Inform. Processing Lett., vol. 5, pp. 63-65, Aug. 1976.||H. S. Wilf, ""The 'Why-don't-you-just...?' barrier in discrete algorithms"", Amer. Math. Month., vol. 86, no. 1, pp. 30-36, 1979.||",A Data Structure and an Algorithm for the Nearest Point Problem
B. Curtis&&unknow|,,10.1109/TSE.1983.235270,IEEE Transactions on Software Engineering,"Software metrics,Software measurement,Measurement techniques,Statistical analysis,Testing,Measurement errors,Failure analysis,Laboratories,Software performance,Performance analysis",,Software Metrics: Guest Editor's Introduction
"A.J. Albrecht&&IBM Corporate Information Systems and Administration, White Plains, NY, USA|J.E. Gaffney&&Federal Systems Division, IBM, Corporation, Gaithersburg, NY, USA|","One of the most important problems faced by software developers and users is the prediction of the size of a programming system and its development effort. As an alternative to ""size,"" one might deal with a measure of the ""function"" that the software is to perform. Albrecht [1] has developed a methodology to estimate the amount of the ""function"" the software is to perform, in terms of the data it is to use (absorb) and to generate (produce). The ""function"" is quantified as ""function points,"" essentially, a weighted sum of the numbers of ""inputs,"" ""outputs,""master files,"" and ""inquiries"" provided to, or generated by, the software. This paper demonstrates the equivalence between Albrecht's external input/output data flow representative of a program (the ""function points"" metric) and Halstead's [2] ""software science"" or ""software linguistics"" model of a program as well as the ""soft content"" variation of Halstead's model suggested by Gaffney [7].",10.1109/TSE.1983.235271,IEEE Transactions on Software Engineering,"Application software,Software measurement,Software performance,Size measurement,Performance evaluation,State estimation,Software design,Information systems","A. J. Albrecht, ""Measuring application development productivity"", Proc. IBM Applications Develop. Symp., pp. 83, 1979-Oct.-14-17.||M. H. Halstead, Elements of Software Science, New York:Elsevier, 1977.||J. E. Gaffney, ""Software metrics: A key to improved software development management"", Conf. Comput. Sci. Statist. 13th Symp. on Interface, 1981-Mar.||K. Christensen, G. P. Fitsos and C. P. Smith, ""A perspective on software science"", IBM Syst. J., vol. 20, no. 4, pp. 372-387, 1981.||J. L. F. Dekerf, ""APL and Halstead's theory of software metrics"", APL81 Conf: Proc. ACM (APL Quote Quad), vol. 12, pp. 89-93, 1981-Sept.||A. O. Allen, ""Probability statistics and queueing theory-With computer science applications"" in Computer Science and Applied Mathematics Series, New York:Academic, 1978.||J. E. Gaffney, ""A comparison of a complexity-Based and Halstead program size estimates"", 1979 ACM Comput. Sci. Conf., 1979-Feb.||D. F. Stanat and D. F. McAllister, Discrete Mathematics in Computer Science, NJ, Englewood Cliffs:Prentice-Hall, pp. 265, 1977.||N. Pippenger, ""Complexity theory"", Scientific Amer., pp. 120, June 1978.||","Software Function, Source Lines of Code, and Development Effort Prediction: A Software Science Validation"
"C.A. Behrens&&Cooper, Behrens and McMullen, Inc., Beach Haven, NJ, USA|","The function point method of measuring application development productivity developed by Albrecht is reviewed and a productivity improvement measure introduced. The measurement methodology is then applied to 24 development projects. Size, environment, and language effects on productivity are examined. The concept of a productivity index which removes size effects is defined and an analysis of the statistical significance of results is presented.",10.1109/TSE.1983.235429,IEEE Transactions on Software Engineering,"Productivity,Application software,Particle measurements,Data processing,Costs,Investments,Programming profession,Measurement techniques","A. J. Albrecht, ""Measuring application development productivity"", Guide/Share Application Develop. Symp. Proc., pp. 83-92, 1979-Oct.||B. Curtis, S. B. Sheppard, P. Milliman, M. A. Borst and T. Love, ""Measuring the psychological complexity of software maintenance tasks with the Halstead and McCabe metrics"", IEEE Trans. Software Eng., vol. SE-5, pp. 95-104, Mar. 1979.||T. Gilb, Software Metrics (Winthrop Computer Systems Series), NJ, Englewood:Winthrop, 1976.||M. H. Halstead, Elements of Software Science, New York:Elsevier North-Holland, 1977.||T. C. Jones, ""Measuring programming quality and productivity"", IBM Syst. J., vol. 17, no. 1, pp. 39-63, 1978.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||C. E. Walston and C. P. Felix, ""A method of programming measurement and estimation"", IBM Syst. J., vol. 16, no. 1, pp. 54-73, 1977.||",Measuring the Productivity of Computer Systems Development Activities with Function Points
"V.R. Basili&&Department of Computer Science, University of Maryland, College Park, MD, USA|R.W. Selby&&Department of Computer Science, University of Maryland, College Park, MD, USA|T. Phillips&&Department of Computer Science, University of Maryland, College Park, MD, USA|","The desire to predict the effort in developing or explain the quality of software has led to the proposal of several metrics in the literature. As a step toward validating these metrics, the Software Engineering Laboratory has analyzed the Software Science metrics, cyclomatic complexity, and various standard program measures for their relation to 1) effort (including design through acceptance testing), 2) development errors (both discrete and weighted according to the amount of time to locate and frix), and 3) one another. The data investigated are collected from a production Fortran environment and examined across several projects at once, within individual projects and by individual programmers across projects, with three effort reporting accuracy checks demonstrating the need to validate a database. When the data come from individual programmers or certain validated projects, the metrics' correlations with actual effort seem to be strongest. For modules developed entirely by individual programmers, the validity ratios induce a statistically significant ordering of several of the metrics' correlations. When comparing the strongest correlations, neither Software Science's E metric, cyclomatic complexity nor source lines of code appears to relate convincingly better with effort than the others",10.1109/TSE.1983.235430,IEEE Transactions on Software Engineering,"Data analysis,Programming profession,Software quality,Proposals,Software engineering,Laboratories,Measurement standards,Software standards,Standards development,Software measurement","V. R. Basili, ""Tutorial on Models and Metrics for Software management and Engineering"", IEEE Comput. Soc., 1980.||V. R. Basili and D. H. Hutchens, Analyzing a syntactic family of complexity metrics, Dec. 1981.||IEEE Trans. Software Eng..||V. R. Basili and T. Phillips, ""Evaluating and comparing the software metrics in the Software Engineering Laboratory"", ACM Sigmetrics (1981 ACM Workshop/Symp. Measurement and Evaluation of Software Quality), vol. 10, pp. 95-106, 1981-Mar.||V. R. Basili and D. M. Weiss, A methodology for collecting valid software engineering data*, Dec. 1982.||V. R. Basili, Evaluating software development by analysis of changes: The data from the Software Engineering Laboratory*, Dec. 1982.||V. R. Basili and M. V. Zelkowitz, ""Analyzing medium scale software developments"", Proc. 3rd Int. Conf Software Eng., pp. 116-123, 1978-May.||V. R. Basili, ""Measuring software development characteristics in the local environment"", Comput. and Structures, vol. 10, pp. 39-43, 1979.||V. R. Basili, M. V. Zelkowitz, F. E. McGarry, R. W. Reiter, W. F. Truszkowski and D. L. Weiss, The Software Engineering Laboratory, May 1977.||N. Bulut and M. H. Halstead, ""Impurities found in algorithm implementations"", ACM SIGPLAN Notices, vol. 9, Mar. 1974.||D. N. Card, F. E. McGarry, J. Page, S. Eslinger and V. R. Basil, The Software Engineering Laboratory, Feb. 1982.||E. T. Chen, ""Program complexity and programmer productivity"", IEEE Trans. Software Eng., vol. SE-4, pp. 187-194, May 1978.||K. Christensen, G. P. Fitsos and C. P. Smith, ""A perspective on software science"", IBM Syst. J., vol. 20, pp. 372-387, 1981.||B. Curtis, S. B. Sheppard and P. M. Milliman, ""Third time charm: Stronger replication of the ability of software complexity metrics to predict programmer performance"", Proc. 4th Int. Conf Software Eng., pp. 356-360, 1979-Sept.||W. J. Decker and W. A. Taylor, FORTRAN static source code analyzer program (SAP) user's guide (Revision 1), May 1982.||A. R. Feuer and E. B. Fowlkes, ""Some results from an empirical study of computer software"", Proc. 4th Int. Conf. Software Eng., pp. 351-355, 1979-Sept.||G. P. Fitsos, Vocabulary effects in software science, Jan. 1980.||J. E. Gaffney and G. L. Heller, ""Macro variable software models for application to improved software development management"", Proc. Workshop on Quantitative Software Models for Reliability Complexity and Cost IEEE Comput. Society, 1980.||S. A. Gloss-Soler, The DACS Glossary: A Bibliography of Software Engineering Terms, Oct. 1979.||M. H. Halstead, Elements of Software Science, New York:Elsevier North-Holland, 1977.||R. V. Hogg and E. A. Tanis, Probability and Statistical Inference, New York:Macmillan, pp. 256-271, 1977.||IEEE Standard Glossary of Software Engineering Terminology, 1983.||M. Kendall and A. Stuart, The Advanced Theory of Statistics, New York:Macmillan, vol. 2, pp. 503-508, 1979.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. SE-2, pp. 308-320, Dec. 1976.||F. E. McGarry, Systems Development Head, MD, Greenbelt:NASA/ Goddard Space Flight Center, Jan.-July 1982.||E. M. O'Neill, S. R. Waligora and C. E. Goorevich, FORTRAN static source code analyzer (SAP) user's guide, Feb. 1978.||V. Y. Shen and H. E. Dunsmore, A software science analysis of COBOL programs, Aug. 1980.||C. P. Smith, A software science analysis of IBM programming products, Jan. 1980.||",Metric Analysis and Data Validation Across Fortran Projects
"V.R. Basili&&Department of Computer Science, University of Maryland, College Park, MD, USA|D.H. Hutchens&&Department of Computer Science, Clemson University, Clemson, SC, USA|","A family of syntactic complexity metrics is defined that generates several metrics commonly occurring in the literature. The paper uses the family to answer some questions about the relationship of these metrics to error-proneness and to each other. Two derived metrics are applied; slope which measures the relative skills of programmers at handling a given level of complexity and r square which is indirectly related to the consistency of performance of the programmer or team. The study suggests that individual differences have a large effect on the significance of results where many individuals are used. When an individual is isolated, better results are obtainable. The metrics can also be used to differentiate between projects on which a methodology was used and those on which it was not.",10.1109/TSE.1983.235431,IEEE Transactions on Software Engineering,"Computer science,Programming profession,Current measurement,Particle measurements,Time measurement,Size measurement,Software metrics,Software measurement,Costs,Quality assurance","V. R. Basili and D. H. Hutchens, ""A study of a family of structural complexity metrics"", Proc. ACM-NBS 19th Annu. Tech. Symp.: Pathways to System Integrity, pp. 13-15, 1980-June.||V. R. Basili and R. W. Reiter, ""An investigation of human factors in software development"", IEEE Computer, pp. 21-38, Dec. 1979.||V. R. Basili, ""A controlled experiment quantitatively comparing software development approaches"", IEEE Trans. Software Eng., vol. SE-7, May 1981.||V. R. Basili and A. J. Turner, ""Iterative enhancement: A practical technique for software development"", IEEE TPans. Software Eng., vol. SE-1, pp. 390-396, Dec. 1975.||V. R. Basili, SIMPL-T: A Structured Programming Language, IL, Geneva:Paladin House, 1976.||G. Benyon-Tinker, ""Complexity measures in an evolving large system"", Proc. IEEE Workshop on Quantitative Software Models, pp. 117-127, 1979-Oct.||W. M. Carriere and R. Thibodeau, Development of a logistics software cost estimating technique for foreign military sales, CA, Santa Barbara:General Res. Corp., June 1979.||E. T. Chen, ""Program complexity and programmer productivity"", IEEE Trans. Software Eng., vol. SE-4, pp. 187-193, May 1978.||W. J. Conover, Practical Nonparametric Statistics, New York:Wiley, 1971.||B. Curtis, S. B. Sheppard, P. Milliman, M. A. Borst and T. Love, ""Measuring the psychological complexity of software maintenance tasks with the Halstead and McCabe metrics"", IEEE Trans. Software Eng., vol. SE-5, pp. 96-104, Mar. 1979.||H. E. Dunsmore, The influence of programming factors on program complexity, July 1978.||H. E. Dunsmore and J. D. Gannon, ""Experimental investigations of programming complexity"", Proc. ACM-NBS 16th Annu. Tech. Symp.: Systems and Software, pp. 117-225, 1977-June.||H. E. Dunsmore and J. D. Gannon, ""Analysis of the effects of programming factors on programming effort"", J. Syst. Software, vol. 1, pp. 265-273, 1980.||J. L. Elshoff, ""An analysis of some commercial PL/1 programs"", IEEE Trans. Software Eng., vol. SE-2, pp. 113-120, June 1976.||M. Halstead, Elements of Software Science, New York:Elsevier Comput. Sci. Library, 1977.||S. Henry and D. Kafura, ""Software quality metrics based on interconnectivity"", J. Syst. Software, vol. 2, pp. 121-131, 1981.||R. C. Linger, H. D. Mills and B. I. Witt, Structured Programming: Theory and Practice, MA, Reading:Addison-Wesley, 1979.||T. J. McCabe, ""A complexity measure"", IEEE Trans. Software Eng., vol. 2, pp. 308-320, Dec. 1976.||J. Neter and W. Wasserman, Applied Linear Statistical Models, IL, Homewood:R. D. Irwin, Inc., 1974.||S. Siegel, Nonparametric Statistics, New York:McGraw-Hill, 1956.||W. P. Stevens, G. J. Myers and L. L. Constantine, ""Structural design"", IBM Syst. J., vol. 13, no. 2, pp. 115-139, 1974.||T. Sunohara, A. Takano, K. Vehara and T. Ohkawa, ""Program complexity measure for software development management"", Proc. 5th Int. Conf Software Eng., pp. 100-106, 1981-Mar.-9-12.||M. D. Weiser, ""Program slicing"", 5th Int. Conf. Software Eng., 1981.||M. R. Woodward, M. A. Hennell and D. Hedly, ""A measure of control flow complexity in program text"", IEEE Trans. Software Eng., vol. SE-5, pp. 45-50, Jan. 1979.||S. S. Yau and J. S. Collofello, ""Some stability measures for software maintenance"", IEEE Trans. Software Eng., vol. SE-6, pp. 545-552, Nov. 1980.||",An Empirical Study of a Syntactic Complexity Family
"L.J. Osterweil&&Department of Computer Science, University of Colorado, Boulder, CO, USA|","This paper discusses the goals and methods of the Toolpack project and in this context discusses the architecture and design of the software system being produced as the focus of the project. Toolpack is presented as an experimental activity in which a large software tool environment is being created for the purpose of general distribution and then careful study and analysis. The paper begins by explaining the motivation for building integrated tool sets. It then proceeds to explain the basic requirements that an integrated system of tools must satisfy in order to be successful and to remain useful both in practice and as an experimental object. The paper then summarizes the tool capabilities that will be incorporated into the environment. It then goes on to present a careful description of the actual architecture of the Toolpack integrated tool system. Finally the Toolpack project experimental plan is presented, and future plans and directions are summarized.",10.1109/TSE.1983.235432,IEEE Transactions on Software Engineering,"Programming,Software tools,Computer architecture,Software prototyping,Software systems,Algorithm design and analysis,Transaction databases,Software design,Buildings,Virtual prototyping","L. J. Osterweil, ""Software environment research directions for the next five years"", IEEE Computer, vol. 14, pp. 35-43, Apr. 1981.||Proc. Conf Programming Environment for Developing Numerical Software, 1978-Oct.-18-20.||Proc. Conf. Comput. Environment for Math. Software, 1981-July-15.||W. R. Cowell and L. D. Fosdick, ""Mathematical software production"" in Mathematical Software III, New York:Academic, pp. 195-224, 1977.||SFTRAN III Programmer Reference Manual, Apr. 1981.||B. W. Kernighan, Ratfor–A preprocessor for a rational Fortran.||S. I. Feldman, The programming language EFL, June 1979.||L. J. Osterweil, Draft Toolpack architectural design, Boulder:Dep. Comput. Sci., Univ. Colorado, Nov. 1981.||S. J. Hague, The provision of editors for the manipulation of Fortran, IL, Argonne:Appl. Math. Div., Argonne Nat. Lab., Nov. 1981.||T. Teitelbaum and T. Reps, ""The Cornell program synthesizer: A syntax-directed programming environment"", Commun. Ass. Comput. Mach., vol. 24, pp. 563-573, Sept. 1981.||V. Donzeau-Gouge, G. Huet, G. Kahn and B. Lang, Programming environments based on structed editors: The mentor experience, 1980.||L. D. Fosdick, POLISH-X transformations, May 1981.||B. S. Baker, ""An algorithm for structuring flowgraphs"", J. Ass. Comput. Mach., vol. 24, pp. 98-120, Jan. 1977.||J. Feiber, R. N. Taylor and L. J. Osterweil, Newton–A dynamic program analysis tool capabilities specification, Mar. 1981.||L. J. Osterweil and L. D. Fosdick, ""DAVE–A validation error detection and documentation system for FORTRAN programs"", Software–Practice and Experience, vol. 6, pp. 473-486, Sept. 1976.||B. G. Ryder, ""The PFORT verifier"", Software–Practice and Experience, vol. 4, pp. 359-377, 1974.||W. Ward and J. Rice, A simple macro processor, IL, Argonne:Appl. Math. Div., Argonne Nat. Lab., Sept. 1981.||J. M. Boyle and K. Matz, ""Automating multiple program realizations"", MRI Conf. Rec. XXIV Symp. Comput. Software. Brooklyn, pp. 421-456, 1976.||D. R. Hanson, The portable I/O system PIOS, Apr. 1980.||D. Scherrer, COOKBOOK–Instructions for implementing the LBL software tools package, 1978.||S. I. Feldman, ""Make–A program for maintaining computer programs"", Software–Practice and Experience, vol. 9, pp. 255-265, Apr. 1979.||J. N. Buxton and V. Stenning, Requirements for Ada Programming support environments, Dep. Defense, Feb. 1980.||R. N. Taylor and L. J. Osterweil, ""Anomaly detection in concurrent software by static data flow analysis"", IEEE Trans. Software Eng., vol. SE-6, pp. 265-278, May 1980.||R. N. Taylor, Static analysis of the synchronization structure of concurrent programs, 1980.||",Toolpack—An Experimental Software Development Environment Research Project
"J.S. Gourlay&&Department of Computer and Information Science, Ohio State Uinversity, Columbus, OH, USA|","Testing has long been in need of mathematical underpinnings to explain its value as well as its limitations. This paper develops and applies a mathematical framework that 1) unifies previous work on the subject, 2) provides a mechanism for comparing the power of methods of testing programs based on the degree to which the methods approximate program verification, and 3) provides a reasonable and useful interpretation of the notion that successful tests increase one's confidence in the program's correctness.",10.1109/TSE.1983.235433,IEEE Transactions on Software Engineering,"Software testing,Genetic mutations,Programming profession,Hardware,Software reliability,Formal verification,Computer errors,Computer science,Information science,Reliability theory",,A Mathematical Framework for the Investigation of Testing
"Bo-Shoe Chen&&Bell Laboratories, Inc., Naperville, IL, USA|R.T. Yeh&&Department of Computer Science, University of Maryland, College Park, MD, USA|","Computations of distributed systems are extremely difficult to specify and verify using traditional techniques because the systems are inherently concurrent, asynchronous, and nondeterministic. Furthermore, computing nodes in a distributed system may be highly independent of each other, and the entire system may lack an accurate global clock.",10.1109/TSE.1983.235434,IEEE Transactions on Software Engineering,"Formal specifications,Clocks,Safety,Distributed computing,Control systems,Computer science,Process control,Distributed power generation,Power generation,Petri nets","M. W. Alford, Requirement development using SREM technology, vol. 1, Oct. 1977.||K. A. Barlett, ""Note on reliable full duplex transmission on half duplex links"", Commun. Ass. Comput. Mach., vol. 12, no. 5, pp. 260-261, 1969.||B. Chen and R. T. Yeh, ""Event-based behavior specification of distributed systems"", Proc. IEEE Symp. Reliability in Distributed Software and Database Syst., pp. 46-52, 1981-July.||B. Chen, Event-based specification and verification of distributed systems, May 1982.||B. Chen and R. T. Yeh, ""Formal specification and verification of distributed systems"", Proc. 3rd Int. Conf. Distributed Comput. Syst., pp. 380-385, 1982-Oct.||M. H. Conner, Process synchronization by behavior controllers, Aug. 1979.||A. A. S. Danthine, ""Protocol representation with finite-state models"", IEEE Trans. Commun., vol. COM-28, pp. 632-642, 1980.||H. B. Enderton, ""2"" in A Mathematical Introduction to Logic, New York:Academic, 1972.||D. I. Good, Principles of proving concurrent programs in GYPSY, Jan. 1979.||I. Greif, ""A language for formal problem specification"", Commun. Ass. Comput. Mach., vol. 20, pp. 931-935, Dec. 1979.||B. Hailpern and S. Owicki, ""Verifying network protocols using temporal logic"", Proc. Trends and Appl. 1980: Comput. Network Protocols IEEE Comput. Soc., 1980-May.||C. Hewitt and H. J. Baker, ""Laws for communicating parallel processes"", IFIP, pp. 987-992, 1977.||C. A. R. Hoare, A model for communicating sequential processes, Comput. Lab., Oxford Univ., Dec. 1978.||L. Lamport, ""Time clocks and the ordering of events in a distributed system"", Commun. Ass. Comput. Mach., vol. 21, pp. 558-565, July 1978.||J. Misra and K. M. Chandy, ""Proofs of networks of processes"", IEEE Trans. Software Eng., vol. SE-7, pp. 417-526, July 1981.||S. Owicki and L. Lamport, ""Proving liveness properties of concurrent programs"", ACM Trans. Programming Lang. Syst., vol. 4, pp. 455-495, July 1982.||J. L. Peterson, ""Petri nets"", ACM Comput. Surveys, vol. 9, pp. 223-253, Sept. 1977.||A. Pnueli, ""The temporal logic of programs"", Proc. 18th IEEE Symp. Foundation of Comput. Sci., pp. 46-57, 1977-Nov.||L. Robinson and D. Roubine, SPECIAL: A SPECIfication and Assertion Language, 1977.||R. L. Schwartz and P. M. Melliar-Smith, ""Temporal logic specification of distributed systems"", Proc. 2nd Int. Conf. Distributed Comput. Syst., pp. 446-454, 1981-Apr.||N. V. Stenning, ""A data transfer protocol"", Comput. Networks, vol. 1, pp. 99-110, Sept. 1976.||C. Sunshine, Formal methods for communication protocol specification and verification, Rand Corp., Sept. 1979.||R. T. Yeh and P. Zave, ""Specifying software requirements"", Proc. IEEE, 1980-Oct.||P. Zave and R. T. Yeh, ""Executable requirements for enbedded systems"", Proc. 5th Int. Conf. Software Eng., 1981.||C. C. Zhoa and C. A. R. Hoare, ""Partial correctness of communicating sequential processes"", Proc. 2nd Int. Conf. Distributed Comput. Syst., pp. 1-12, 1981-Apr.||",Formal Specification and Verification of Distributed Systems
"K. Ramamritham&&Department of Computer and Information Science, University of Massachusetts, Amherst, MA, USA|R.M. Keller&&Department of Computer Science, University of Utah, Salt Lake, UT, USA|","The formalism of temporal logic has been suggested to be an appropriate tool for expressing the semantics of concurrent programs. This paper is concerned with the application of temporal logic to the specification of factors affecting the synchronization of concurrent processes. Towards this end, we first introduce a model for synchronization and axiomatize its behavior. SYSL, a very high-level language for specifying synchronization properties, is then described. It is designed using the primitives of temporal logic and features constructs to express properties that affect synchronization in a fairly natural and modular fashion. Since the statements in the language have intuitive interpretations, specifications are humanly readable. In addition, since they possess appropriate formal semantics, unambiguous specifications result.",10.1109/TSE.1983.235435,IEEE Transactions on Software Engineering,"Specification languages,High level languages,Logic design,Information science,Computer science,Cities and towns,Message passing,Protection,Process design,Software safety","S. Andler, ""Predicate path expressions"", Proc. 6th Annu. Symp. POPL, pp. 226-236, 1979-Jan.||G. R. Andrews, ""Synchronizing resources"", ACM Trans. Programming Languages Syst., vol. 3, pp. 405-430, Oct. 1981.||R. R. Atkinson and C. E. Hewitt, ""Specification and proof techniques for serializers"", IEEE Trans. Software Eng., vol. SE-5, pp. 10-23, Jan. 1979.||M. Ben-Ari and A. Pnueli, Temporal logic proofs of concurrent programs, Nov. 1980.||A. J. Bernstein and J. C. Sharp, ""A policy-driven scheduler for a time-sharing system"", Commun. Ass. Comput. Mach., vol. 2, pp. 74-78, Feb. 1971.||V. Berzins and D. Kapur, Denotational and axiomatic definitions for path expressions, Massachusetts Inst. Technol., Nov. 1977.||P. Brinch-Hansen and J. Staunstrup, ""Specification and implementation of mutual exclusion"", IEEE Trans. Software Eng., vol. SE-4, pp. 365-370, Sept. 1978.||E. M. Clarke and E. A. Emerson, ""Design and synthesis of synchronization skeletons using branching time temporal logic"", Proc. Workshop Logics of Programs (Springer-Verlag Lecture Notes in Comput. Sci.), vol. 131, 1981.||I. Greif, ""A language for formal problem specification"", Commun. Ass. Comput. Mach., vol. 20, pp. 931-935, Mar. 1977.||P. Griffiths, SYNVER: A system for the automatic synthesis and verification of synchronization processes, 1974.||V. Guttag, E. Horowitz and D. Musser, ""Abstract data types and software validation"", Commun. Ass. Comput. Mach., vol. 21, pp. 1048-1064, Dec. 1978.||A. N. Habermann, Path expressions, Carnegie-Mellon Univ., June 1975.||B. T. Hailpern and S. Owicki, ""Verifying network protocols using temporal logic"", Proc. NBS/IEEE Conf. Trends and Applications on Comput. Network Protocols, 1980.||C. A. R. Hoare, Monitors: An operating system structuring concept Commun. Ass. Comput. Mach., vol. 17, pp. 540-557, Oct. 1974.||C. A. R. Hoare, ""Communicating sequencial processes"", Commun. Ass. Comput. Mach., vol. 21, pp. 666-677, Aug. 1978.||B. Jayaraman and R. M. Keller, ""Resource expressions for applicative languages"", Proc. Int. Conf. Parallel Processing, pp. 160-167, 1980-June.||R. M. Keller, Sentinels: A concept for multiprocess coordination, Univ. Utah, June 1978.||L. Lamport, ""'Sometime' is sometimes 'not never'"", Proc. 7th Annu. Symp. POPL, pp. 174-185, 1980-Jan.||P. E. Lauer and R. H. Campbell, ""Formal semantics of a class of primitives for coordinating concurrent processes"", Acta Informatica, vol. 5, pp. 297-332, 1975.||P. E. Lauer, P. R. Torrigiani and M. W. Shields, ""COSY–A system specification language based on paths and processes"", Acta Informatica, vol. 12, pp. 109-158, Apr. 1979.||M. S. Laventhal, Synthesis of synchronization code for data abstractions, June 1978.||Z. Manna and P. Wolper, ""Synthesis of communicating processes from temporal logic specifications"", Proc. Workshop Logics of Programs (Springer-Verlag Lecture Notes in Comput. Sci.), vol. 131, 1981.||S. Owicki and L. Lamport, ""Proving liveness properties of concurrent programs"", ACM Trans. Programming Languages Syst., vol. 4, pp. 455-495, July 1982.||A. Pnueli, ""The temporal semantics of concurrent programs"", Semantics of Concurrent Computation (Springer Lecture Notes in Comput. Sci.), vol. 70, pp. 1-20, June 1979.||A. Pnueli, ""On the temporal analysis of fairness"", Proc. 7th Annu. Symp. POPL, pp. 163-173, 1980-Jan.||K. Ramamritham and R. M. Keller, ""Specifying and proving properties of sentinel processes"", Proc. 5th Int. Conf Software Eng., pp. 374-382, 1981-Mar.||K. Ramamritham and R. M. Keller, ""On synchronization and its specification"", Springer Lecture Notes in Comput. Sci., vol. 111, June 1981.||K. Ramamritham, Specification and synthesis of synchronizers, Aug. 1981.||H. A. Schmid, ""On the efficient implementation of conditional critical regions and the construction of monitors"", Act Informatica, vol. 6, pp. 227-249, 1976.||R. L. Schwartz and P. M. Melliar-Smith, ""Temporal logic specifications of distributed systems"", Proc. 2nd Int. Conf Distributed Syst., 1981-Apr.||A. C. Shaw, ""Software specification languages based on regular expressions"", Proc. Software Tools Workshop, pp. 1-39, 1979-May.||",Specification of Synchronizing Processes
"S.S. Yau&&Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, IL, USA|M.U. Caglayan&&University of Petroleum and Minerals, Dhahran, Saudi Arabia|","A model for representing and analyzing the design of a distributed software system is presented. The model is based on a modified form of Petri net, and enables one to represent both the structure and the behavior of a distributed software system at a desired level of design. Behavioral properties of the design representation can be verified by translating the modified Petri net into an equivalent ordinary Petri net and then analyzing that resulting Petri net. The model emphasizes the unified representation of control and data flows, partially ordered software components, hierarchical component structure, abstract data types, data objects, local control, and distributed system state. At any design level, the distributed software system is viewed as a collection of software components. Software components are externally described in terms of their input and output control states, abstract data types, data objects, and a set of control and data transfer specifications. They are interconnected through the shared control states and through the shared data objects. A system component can be viewed internally as a collection of subcomponents, local control states, local abstract data types, and local data objects.",10.1109/TSE.1983.235581,IEEE Transactions on Software Engineering,"Software systems,Software design,Petri nets,Distributed computing,Distributed control,Control systems,Hardware,Design methodology,Concurrent computing,Computer languages","D. L. Parnas, ""On the criteria to be used in decomposing systems into modules"", Commun. Ass. Comput. Mach., vol. 15, no. 12, pp. 1053-1058, 1972.||O. J. Dahi, E. W. Dijkstra and C. A. R. Hoare, Structured Programming, New York:Academic, 1972.||W. P. Stevens, G. F. Myers and L. C. Constantine, ""Structured design"", IBM Syst. J., vol. 13, no. 2, pp. 115-139, 1974.||E. Yourdon and L. L. Constantin, Structured Design, New York:Yourdon, Inc., 1975.||M. A. Jackson, Principles of Program Design, London:Academic, 1975.||P. Brinch-Hansen, ""Distributed processes: A concurrent programming concept"", Commun. Ass. Comput. Mach., vol. 21, no. 11, pp. 934-941, Nov. 1978.||C. A. R. Hoare, ""Communicating sequential processes"", Commun. Ass. Comput. Mach., vol. 21, no. 8, pp. 666-677, Aug. 1978.||C. A. R. Hoare, ""Monitors: An operating system structuring concept"", Commun: Ass. Comput. Mach., vol. 17, no. 10, pp. 549-557, Oct. 1974.||O. J. Dahl, B. Myhrhaug and K. Nygaard, Simula 67-Common Base Language, Oslo:Norwegian Comput. Cen., May 1968.||C. Hewitt and R. Atkinson, ""Parallelism and synchronization in actor systems"", Proc. 4th ACM Symp. Principles of Programming Languages, pp. 267-280, 1977-Jan.||R. Milner, A Calculus of Communicating Systems (Lecture Notes in Comput. Sci), New York:Springer-Verlag, vol. 92, 1980.||G. Kahn, ""The semantics of a simple language for parallel programming"", Proc. IFIP Congr. 74, pp. 471-475, 1974-Aug.||D. B. MacQueen, Models for distributed computing, Apr. 1979.||C. A. Petri, Kommunikation mit Automaten, 1965.||A. W. Holt, Final report of the information system theory project, Sept. 1968.||A. W. Holt and F. Commoner, ""Events and conditions"", Rec. Project MAC Conf. on Concurrent Syst. and Parallel Comput., pp. 3-52, 1970.||J. B. Dennis, ""Modular asynchronous control structures for a high performance processor"", Rec. Project MA C Conf on Concurrent Syst. and Parallel Comput., pp. 55-80, 1970.||W. Brauer, Net Theory and Applications (Lecture Notes in Comput. Sci), New York:Springer-Verlag, vol. 84, 1980.||J. L. Peterson, ""Petri nets"", ACM Comput. Surveys, vol. 9, pp. 223-252, Sept. 1977.||J. L. Peterson, Petri Net Theory and the Modeling of Systems, NJ, Englewood Cliffs:Prentice-Hall, 1981.||S. S. Yau, C. C. Yang and S. M. Shatz, ""An approach to distributed computing system software design"", IEEE Trans. Software Eng., vol. SE-7, pp. 427-436, July 1981.||L. J. Mekly and S. S. Yau, ""Software design representation using abstract process networks"", IEEE Trans. Software Eng., vol. SE-6, pp. 420-435, Sept. 1980.||P. M. Lu and S. S. Yau, ""A methodoiogy for representing the formal specification of distributed computing system software design"", Proc. 1st Int. Conf. Distributed Comput. Syst., pp. 212-221, 1979-Oct.||S. S. Yau and S. M. Shatz, ""On communication in the design of software components of distributed computer systems"", Proc. 3rd Int. Conf Distributed Comput. Syst., pp. 280-287, 1982-Oct.||I. M. Campos and G. Estrin, ""Concurrent software system design"", Proc. 3rd Int. Conf. Software Eng., pp. 230-242, 1978-May.||P. E. Lauer, P. R. Torrigiani and M. W. Shields, ""COSY-A system specification language based on paths and processes"", Acta Informatica, vol. 12, pp. 109-158, 1979.||P. E. Lauer, M. W. Shields and E. Best, ""Design and analysis of highiy parallel and distributed systems"" in Abstract Software Specifications (Lecture Notes in Comput. Sci), New York:Springer-Verlag, vol. 86, pp. 451-503, 1980.||T. Agerwala, An analysis of controlling agents for asynchronous processes, Aug. 1974.||S. S. Patil, Coordination of asynchronous events, June 1970.||C. Ramchandani, Analysis of asynchronous sytems by Petri nets, 1973.||F. Commoner, ""Marked directed graphs"", J. Comput. Syst. Sci, vol. 5, pp. 511-523, Oct. 1971.||G. J. Nutt, ""Evaluation nets for computer system performance analysis"", Proc. 1972 Fall Joint Comput. Conf., vol. 41, pp. 279-236.||J. D. Noe and G. J. Nutt, ""Macro E-nets for representation of parallel systems"", IEEE Trans Comput., vol. C-22, pp. 718-727, Aug. 1973.||J. D. Noe, ""Hierarchical modeling with pro-nets"", Proc. Nat. Electron. Conf., vol. 32, pp. 155-160, 1978-Oct.||W. Trattnig and H. Kerner, ""EDDA-A very high-level programming and specification language in the style of SADT"", Proc. Compsac 80, pp. 436-443, 1980-Oct.||R. Valette and M. Diaz, ""Top-down formal specification and verification of parallel control systems"", Digital Processes, vol. 4, pp. 181-199, 1978.||C. A. Petri, Interpretations of net theory, July 1975.||J. V. Guttag and J. J. Horning, ""The algebraic specification of abstract data types"", Acta Informatica, vol. 10, pp. 27-52, 1978.||J. Guttag, ""Notes on type abstraction (version 2)"", IEEE Trans. Software Eng., vol. SE-6, pp. 13-24, Jan. 1980.||E. W. Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Commun Ass. Comput. Mach., vol. 18, pp. 453-457, Aug. 1978.||",Distributed Software System Design Representation Using Modified Petri Nets
"M. Trachtenberg&&RCA, Moorestown, NJ, USA|","The earlier findings of Shooman and Bolsky, that the difficulty of detecting or correcting a software bug is independent of its order of detection, is challenged by new data which shows definite tendencies for early bugs to need less time to be detected and more to be corrected than later bugs.",10.1109/TSE.1983.235582,IEEE Transactions on Software Engineering,"Computer bugs,Real time systems,Control systems,Error correction,Computer errors,Software testing,Software debugging,System testing,Logic design,Phase detection","M. L. Shooman and M. I. Bolsky, ""Types distributions and test and correction time for programming errors"", ACM SIGPLAN Notices, vol. 10, pp. 347-357, June 1975.||L. M. Ottenstein, ""Quantitative estimates of debugging requirements"", IEEE Trans. Software Eng., vol. SE-5, pp. 504-513, Sept. 1979.||J. D. Musa, Software Reliability Data, NY:Griffiss Air Force Base, 1979.||",Order and Difficulty of Debugging
